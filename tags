!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/james/.vim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
"::"	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^"::" <- function(pkg, name) {$/;"	f
"::"	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^"::" <- function(pkg, name) {$/;"	f
"__LoadingNamespaceInfo__"	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^"__LoadingNamespaceInfo__" <- list(libname = package.lib,$/;"	L
"__LoadingNamespaceInfo__"	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^"__LoadingNamespaceInfo__" <- list(libname = package.lib,$/;"	L
(<cr>	vimrc	/^inoremap (<cr> (<cr>)<esc>O$/;"	m
*	vimrc	/^nnoremap * *N$/;"	m
*	vimrc	/^vnoremap * y\/\\V<C-R>=escape(@",'\/\\')<CR><CR>N$/;"	m
*Backward incompatible changes*	plugged/fzf/CHANGELOG.md	/^### *Backward incompatible changes*$/;"	S	section:CHANGELOG""0.9.4
,	vimrc	/^nnoremap , za$/;"	m
-	plugged/vim-vinegar/plugin/vinegar.vim	/^  nmap - <Plug>VinegarUp$/;"	m
-	plugged/vim-vinegar/plugin/vinegar.vim	/^  nmap <buffer> - <Plug>VinegarUp$/;"	m
.	plugged/vim-repeat/autoload/repeat.vim	/^    nmap . <Plug>(RepeatDot)$/;"	m
.	plugged/vim-vinegar/plugin/vinegar.vim	/^  nnoremap <buffer> . :<C-U> <C-R>=<SID>escaped(line('.'), line('.') - 1 + v:count1)<CR><Home>$/;"	m
.	plugged/vim-vinegar/plugin/vinegar.vim	/^  xnoremap <buffer> . <Esc>: <C-R>=<SID>escaped(line("'<"), line("'>"))<CR><Home>$/;"	m
.knownS3Generics	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    .knownS3Generics <- local({$/;"	v	function:foo
.knownS3Generics	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    .knownS3Generics <- local({$/;"	v	function:foo
0.10.0	plugged/fzf/CHANGELOG.md	/^0.10.0$/;"	s	chapter:CHANGELOG
0.10.1	plugged/fzf/CHANGELOG.md	/^0.10.1$/;"	s	chapter:CHANGELOG
0.10.2	plugged/fzf/CHANGELOG.md	/^0.10.2$/;"	s	chapter:CHANGELOG
0.10.3	plugged/fzf/CHANGELOG.md	/^0.10.3$/;"	s	chapter:CHANGELOG
0.10.4	plugged/fzf/CHANGELOG.md	/^0.10.4$/;"	s	chapter:CHANGELOG
0.10.5	plugged/fzf/CHANGELOG.md	/^0.10.5$/;"	s	chapter:CHANGELOG
0.10.6	plugged/fzf/CHANGELOG.md	/^0.10.6$/;"	s	chapter:CHANGELOG
0.10.7	plugged/fzf/CHANGELOG.md	/^0.10.7$/;"	s	chapter:CHANGELOG
0.10.8	plugged/fzf/CHANGELOG.md	/^0.10.8$/;"	s	chapter:CHANGELOG
0.10.9	plugged/fzf/CHANGELOG.md	/^0.10.9$/;"	s	chapter:CHANGELOG
0.11.0	plugged/fzf/CHANGELOG.md	/^0.11.0$/;"	s	chapter:CHANGELOG
0.11.1	plugged/fzf/CHANGELOG.md	/^0.11.1$/;"	s	chapter:CHANGELOG
0.11.2	plugged/fzf/CHANGELOG.md	/^0.11.2$/;"	s	chapter:CHANGELOG
0.11.3	plugged/fzf/CHANGELOG.md	/^0.11.3$/;"	s	chapter:CHANGELOG
0.11.4	plugged/fzf/CHANGELOG.md	/^0.11.4$/;"	s	chapter:CHANGELOG
0.12.0	plugged/fzf/CHANGELOG.md	/^0.12.0$/;"	s	chapter:CHANGELOG
0.12.1	plugged/fzf/CHANGELOG.md	/^0.12.1$/;"	s	chapter:CHANGELOG
0.12.2	plugged/fzf/CHANGELOG.md	/^0.12.2$/;"	s	chapter:CHANGELOG
0.13.0	plugged/fzf/CHANGELOG.md	/^0.13.0$/;"	s	chapter:CHANGELOG
0.13.1	plugged/fzf/CHANGELOG.md	/^0.13.1$/;"	s	chapter:CHANGELOG
0.13.2	plugged/fzf/CHANGELOG.md	/^0.13.2$/;"	s	chapter:CHANGELOG
0.13.3	plugged/fzf/CHANGELOG.md	/^0.13.3$/;"	s	chapter:CHANGELOG
0.13.4	plugged/fzf/CHANGELOG.md	/^0.13.4$/;"	s	chapter:CHANGELOG
0.13.5	plugged/fzf/CHANGELOG.md	/^0.13.5$/;"	s	chapter:CHANGELOG
0.15.0	plugged/fzf/CHANGELOG.md	/^0.15.0$/;"	s	chapter:CHANGELOG
0.15.1	plugged/fzf/CHANGELOG.md	/^0.15.1$/;"	s	chapter:CHANGELOG
0.15.2	plugged/fzf/CHANGELOG.md	/^0.15.2$/;"	s	chapter:CHANGELOG
0.15.3	plugged/fzf/CHANGELOG.md	/^0.15.3$/;"	s	chapter:CHANGELOG
0.15.4	plugged/fzf/CHANGELOG.md	/^0.15.4$/;"	s	chapter:CHANGELOG
0.15.5	plugged/fzf/CHANGELOG.md	/^0.15.5$/;"	s	chapter:CHANGELOG
0.15.6	plugged/fzf/CHANGELOG.md	/^0.15.6$/;"	s	chapter:CHANGELOG
0.15.7	plugged/fzf/CHANGELOG.md	/^0.15.7$/;"	s	chapter:CHANGELOG
0.15.8	plugged/fzf/CHANGELOG.md	/^0.15.8$/;"	s	chapter:CHANGELOG
0.15.9	plugged/fzf/CHANGELOG.md	/^0.15.9$/;"	s	chapter:CHANGELOG
0.16.0	plugged/fzf/CHANGELOG.md	/^0.16.0$/;"	s	chapter:CHANGELOG
0.16.1	plugged/fzf/CHANGELOG.md	/^0.16.1$/;"	s	chapter:CHANGELOG
0.16.10	plugged/fzf/CHANGELOG.md	/^0.16.10$/;"	s	chapter:CHANGELOG
0.16.11	plugged/fzf/CHANGELOG.md	/^0.16.11$/;"	s	chapter:CHANGELOG
0.16.2	plugged/fzf/CHANGELOG.md	/^0.16.2$/;"	s	chapter:CHANGELOG
0.16.3	plugged/fzf/CHANGELOG.md	/^0.16.3$/;"	s	chapter:CHANGELOG
0.16.4	plugged/fzf/CHANGELOG.md	/^0.16.4$/;"	s	chapter:CHANGELOG
0.16.5	plugged/fzf/CHANGELOG.md	/^0.16.5$/;"	s	chapter:CHANGELOG
0.16.6	plugged/fzf/CHANGELOG.md	/^0.16.6$/;"	s	chapter:CHANGELOG
0.16.7	plugged/fzf/CHANGELOG.md	/^0.16.7$/;"	s	chapter:CHANGELOG
0.16.8	plugged/fzf/CHANGELOG.md	/^0.16.8$/;"	s	chapter:CHANGELOG
0.16.9	plugged/fzf/CHANGELOG.md	/^0.16.9$/;"	s	chapter:CHANGELOG
0.17.0	plugged/fzf/CHANGELOG.md	/^0.17.0$/;"	s	chapter:CHANGELOG
0.17.0-2	plugged/fzf/CHANGELOG.md	/^0.17.0-2$/;"	s	chapter:CHANGELOG
0.17.1	plugged/fzf/CHANGELOG.md	/^0.17.1$/;"	s	chapter:CHANGELOG
0.17.3	plugged/fzf/CHANGELOG.md	/^0.17.3$/;"	s	chapter:CHANGELOG
0.17.4	plugged/fzf/CHANGELOG.md	/^0.17.4$/;"	s	chapter:CHANGELOG
0.17.5	plugged/fzf/CHANGELOG.md	/^0.17.5$/;"	s	chapter:CHANGELOG
0.18.0	plugged/fzf/CHANGELOG.md	/^0.18.0$/;"	s	chapter:CHANGELOG
0.19.0	plugged/fzf/CHANGELOG.md	/^0.19.0$/;"	s	chapter:CHANGELOG
0.20.0	plugged/fzf/CHANGELOG.md	/^0.20.0$/;"	s	chapter:CHANGELOG
0.21.1	plugged/fzf/CHANGELOG.md	/^0.21.1$/;"	s	chapter:CHANGELOG
0.22.0	plugged/fzf/CHANGELOG.md	/^0.22.0$/;"	s	chapter:CHANGELOG
0.23.0	plugged/fzf/CHANGELOG.md	/^0.23.0$/;"	s	chapter:CHANGELOG
0.23.1	plugged/fzf/CHANGELOG.md	/^0.23.1$/;"	s	chapter:CHANGELOG
0.24.0	plugged/fzf/CHANGELOG.md	/^0.24.0$/;"	s	chapter:CHANGELOG
0.24.1	plugged/fzf/CHANGELOG.md	/^0.24.1$/;"	s	chapter:CHANGELOG
0.24.2	plugged/fzf/CHANGELOG.md	/^0.24.2$/;"	s	chapter:CHANGELOG
0.24.3	plugged/fzf/CHANGELOG.md	/^0.24.3$/;"	s	chapter:CHANGELOG
0.24.4	plugged/fzf/CHANGELOG.md	/^0.24.4$/;"	s	chapter:CHANGELOG
0.25.0	plugged/fzf/CHANGELOG.md	/^0.25.0$/;"	s	chapter:CHANGELOG
0.25.1	plugged/fzf/CHANGELOG.md	/^0.25.1$/;"	s	chapter:CHANGELOG
0.26.0	plugged/fzf/CHANGELOG.md	/^0.26.0$/;"	s	chapter:CHANGELOG
0.27.0	plugged/fzf/CHANGELOG.md	/^0.27.0$/;"	s	chapter:CHANGELOG
0.27.1	plugged/fzf/CHANGELOG.md	/^0.27.1$/;"	s	chapter:CHANGELOG
0.27.2	plugged/fzf/CHANGELOG.md	/^0.27.2$/;"	s	chapter:CHANGELOG
0.27.3	plugged/fzf/CHANGELOG.md	/^0.27.3$/;"	s	chapter:CHANGELOG
0.28.0	plugged/fzf/CHANGELOG.md	/^0.28.0$/;"	s	chapter:CHANGELOG
0.29.0	plugged/fzf/CHANGELOG.md	/^0.29.0$/;"	s	chapter:CHANGELOG
0.30.0	plugged/fzf/CHANGELOG.md	/^0.30.0$/;"	s	chapter:CHANGELOG
0.31.0	plugged/fzf/CHANGELOG.md	/^0.31.0$/;"	s	chapter:CHANGELOG
0.32.0	plugged/fzf/CHANGELOG.md	/^0.32.0$/;"	s	chapter:CHANGELOG
0.32.1	plugged/fzf/CHANGELOG.md	/^0.32.1$/;"	s	chapter:CHANGELOG
0.33.0	plugged/fzf/CHANGELOG.md	/^0.33.0$/;"	s	chapter:CHANGELOG
0.34.0	plugged/fzf/CHANGELOG.md	/^0.34.0$/;"	s	chapter:CHANGELOG
0.35.0	plugged/fzf/CHANGELOG.md	/^0.35.0$/;"	s	chapter:CHANGELOG
0.35.1	plugged/fzf/CHANGELOG.md	/^0.35.1$/;"	s	chapter:CHANGELOG
0.36.0	plugged/fzf/CHANGELOG.md	/^0.36.0$/;"	s	chapter:CHANGELOG
0.37.0	plugged/fzf/CHANGELOG.md	/^0.37.0$/;"	s	chapter:CHANGELOG
0.38.0	plugged/fzf/CHANGELOG.md	/^0.38.0$/;"	s	chapter:CHANGELOG
0.39.0	plugged/fzf/CHANGELOG.md	/^0.39.0$/;"	s	chapter:CHANGELOG
0.40.0	plugged/fzf/CHANGELOG.md	/^0.40.0$/;"	s	chapter:CHANGELOG
0.41.0	plugged/fzf/CHANGELOG.md	/^0.41.0$/;"	s	chapter:CHANGELOG
0.41.1	plugged/fzf/CHANGELOG.md	/^0.41.1$/;"	s	chapter:CHANGELOG
0.42.0	plugged/fzf/CHANGELOG.md	/^0.42.0$/;"	s	chapter:CHANGELOG
0.43.0	plugged/fzf/CHANGELOG.md	/^0.43.0$/;"	s	chapter:CHANGELOG
0.44.0	plugged/fzf/CHANGELOG.md	/^0.44.0$/;"	s	chapter:CHANGELOG
0.44.1	plugged/fzf/CHANGELOG.md	/^0.44.1$/;"	s	chapter:CHANGELOG
0.45.0	plugged/fzf/CHANGELOG.md	/^0.45.0$/;"	s	chapter:CHANGELOG
0.46.0	plugged/fzf/CHANGELOG.md	/^0.46.0$/;"	s	chapter:CHANGELOG
0.46.1	plugged/fzf/CHANGELOG.md	/^0.46.1$/;"	s	chapter:CHANGELOG
0.47.0	plugged/fzf/CHANGELOG.md	/^0.47.0$/;"	s	chapter:CHANGELOG
0.48.0	plugged/fzf/CHANGELOG.md	/^0.48.0$/;"	s	chapter:CHANGELOG
0.48.1	plugged/fzf/CHANGELOG.md	/^0.48.1$/;"	s	chapter:CHANGELOG
0.49.0	plugged/fzf/CHANGELOG.md	/^0.49.0$/;"	s	chapter:CHANGELOG
0.50.0	plugged/fzf/CHANGELOG.md	/^0.50.0$/;"	s	chapter:CHANGELOG
0.51.0	plugged/fzf/CHANGELOG.md	/^0.51.0$/;"	s	chapter:CHANGELOG
0.52.0	plugged/fzf/CHANGELOG.md	/^0.52.0$/;"	s	chapter:CHANGELOG
0.52.1	plugged/fzf/CHANGELOG.md	/^0.52.1$/;"	s	chapter:CHANGELOG
0.53.0	plugged/fzf/CHANGELOG.md	/^0.53.0$/;"	s	chapter:CHANGELOG
0.54.0	plugged/fzf/CHANGELOG.md	/^0.54.0$/;"	s	chapter:CHANGELOG
0.9.10	plugged/fzf/CHANGELOG.md	/^0.9.10$/;"	s	chapter:CHANGELOG
0.9.11	plugged/fzf/CHANGELOG.md	/^0.9.11$/;"	s	chapter:CHANGELOG
0.9.12	plugged/fzf/CHANGELOG.md	/^0.9.12$/;"	s	chapter:CHANGELOG
0.9.13	plugged/fzf/CHANGELOG.md	/^0.9.13$/;"	s	chapter:CHANGELOG
0.9.3	plugged/fzf/CHANGELOG.md	/^0.9.3$/;"	s	chapter:CHANGELOG
0.9.4	plugged/fzf/CHANGELOG.md	/^0.9.4$/;"	s	chapter:CHANGELOG
0.9.5	plugged/fzf/CHANGELOG.md	/^0.9.5$/;"	s	chapter:CHANGELOG
0.9.6	plugged/fzf/CHANGELOG.md	/^0.9.6$/;"	s	chapter:CHANGELOG
0.9.7	plugged/fzf/CHANGELOG.md	/^0.9.7$/;"	s	chapter:CHANGELOG
0.9.8	plugged/fzf/CHANGELOG.md	/^0.9.8$/;"	s	chapter:CHANGELOG
0.9.9	plugged/fzf/CHANGELOG.md	/^0.9.9$/;"	s	chapter:CHANGELOG
1. Update the list of processes by pressing CTRL-R	plugged/fzf/README.md	/^#### 1. Update the list of processes by pressing CTRL-R$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
1.0 Release Candidate	plugged/papercolor-theme/ROADMAP.md	/^# 1.0 Release Candidate$/;"	c
1.0.0	plugged/vim-lastplace/README.md	/^### 1.0.0$/;"	S	section:vim-lastplace v4.6.0""Version History
2. Switch between sources by pressing CTRL-D or CTRL-F	plugged/fzf/README.md	/^#### 2. Switch between sources by pressing CTRL-D or CTRL-F$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
2.0.0	plugged/vim-lastplace/README.md	/^### 2.0.0$/;"	S	section:vim-lastplace v4.6.0""Version History
2.0.1	plugged/vim-lastplace/README.md	/^### 2.0.1$/;"	S	section:vim-lastplace v4.6.0""Version History
3. Interactive ripgrep integration	plugged/fzf/README.md	/^#### 3. Interactive ripgrep integration$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
3.0.0	plugged/vim-lastplace/README.md	/^### 3.0.0$/;"	S	section:vim-lastplace v4.6.0""Version History
3.0.1	plugged/vim-lastplace/README.md	/^### 3.0.1$/;"	S	section:vim-lastplace v4.6.0""Version History
3.0.2	plugged/vim-lastplace/README.md	/^### 3.0.2$/;"	S	section:vim-lastplace v4.6.0""Version History
3.0.3	plugged/vim-lastplace/README.md	/^### 3.0.3$/;"	S	section:vim-lastplace v4.6.0""Version History
3.0.4	plugged/vim-lastplace/README.md	/^### 3.0.4$/;"	S	section:vim-lastplace v4.6.0""Version History
3.1.0	plugged/vim-lastplace/README.md	/^### 3.1.0$/;"	S	section:vim-lastplace v4.6.0""Version History
3.1.1	plugged/vim-lastplace/README.md	/^### 3.1.1$/;"	S	section:vim-lastplace v4.6.0""Version History
3.2.1	plugged/vim-lastplace/README.md	/^### 3.2.1$/;"	S	section:vim-lastplace v4.6.0""Version History
4.4.0	plugged/vim-lastplace/README.md	/^### 4.4.0$/;"	S	section:vim-lastplace v4.6.0""Version History
4.5.0	plugged/vim-lastplace/README.md	/^### 4.5.0$/;"	S	section:vim-lastplace v4.6.0""Version History
4.6.0	plugged/vim-lastplace/README.md	/^### 4.6.0$/;"	S	section:vim-lastplace v4.6.0""Version History
<BS>	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    snoremap <silent> <BS> <c-g>"_c$/;"	m
<C-G>S	plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-R>	plugged/vim-repeat/autoload/repeat.vim	/^    nmap <C-R> <Plug>(RepeatRedo)$/;"	m
<C-R><C-F>	plugged/vim-vinegar/plugin/vinegar.vim	/^    cmap <buffer> <C-R><C-F> <Plug><cfile>$/;"	m
<C-S>	plugged/vim-surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<C-d>	vimrc	/^nnoremap <C-d> :q!<cr>$/;"	m
<C-f>	vimrc	/^nnoremap <C-f> :vimgrep '' **\/*<left><left><left><left><left><left>$/;"	m
<DEL>	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    snoremap <silent> <DEL> <c-g>"_c$/;"	m
<Plug>(-fzf-complete-finish)	plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-finish) <c-o>l$/;"	m
<Plug>(-fzf-complete-finish)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <silent> <Plug>(-fzf-complete-finish) a$/;"	m
<Plug>(-fzf-complete-trigger)	plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(RepeatDot)	plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatDot)      :<C-U>if !repeat#run(v:count)<Bar>echoerr repeat#errmsg/;"	m
<Plug>(RepeatRedo)	plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatRedo)     :<C-U>call repeat#wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
<Plug>(RepeatUndo)	plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndo)     :<C-U>call repeat#wrap('u',v:count)<CR>$/;"	m
<Plug>(RepeatUndoLine)	plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndoLine) :<C-U>call repeat#wrap('U',v:count)<CR>$/;"	m
<Plug>(abolish-coerce)	plugged/vim-abolish/plugin/abolish.vim	/^nnoremap <expr> <Plug>(abolish-coerce) <SID>coerce(nr2char(getchar()))$/;"	m
<Plug>(abolish-coerce)	plugged/vim-abolish/plugin/abolish.vim	/^vnoremap <expr> <Plug>(abolish-coerce) <SID>coerce(nr2char(getchar()))$/;"	m
<Plug>(abolish-coerce-word)	plugged/vim-abolish/plugin/abolish.vim	/^nnoremap <expr> <Plug>(abolish-coerce-word) <SID>coerce(nr2char(getchar())).'iw'$/;"	m
<Plug>(fzf-insert)	plugged/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-insert) i$/;"	m
<Plug>(fzf-normal)	plugged/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-normal) <Nop>$/;"	m
<Plug><cfile>	plugged/vim-vinegar/plugin/vinegar.vim	/^  cnoremap <buffer><expr> <Plug><cfile> get(<SID>relatives('.'),0,"\\022\\006")$/;"	m
<Plug>CSurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>ChangeCommentary	plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>$/;"	m
<Plug>Commentary	plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>Commentary	plugged/vim-commentary/plugin/commentary.vim	/^onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==#/;"	m
<Plug>Commentary	plugged/vim-commentary/plugin/commentary.vim	/^xnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>CommentaryLine	plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'$/;"	m
<Plug>CommentaryUndo	plugged/vim-commentary/plugin/commentary.vim	/^nmap <silent> <Plug>CommentaryUndo :echoerr "Change your <Plug>CommentaryUndo map to <Plug>Comme/;"	m
<Plug>CompletorCppJumpToPlaceholder	plugged/completor.vim/pythonx/completers/cpp/placeholder.vim	/^inoremap <silent><expr> <Plug>CompletorCppJumpToPlaceholder <SID>jump_to_placeholder()$/;"	m
<Plug>CompletorCppJumpToPlaceholder	plugged/completor.vim/pythonx/completers/cpp/placeholder.vim	/^noremap  <silent><expr> <Plug>CompletorCppJumpToPlaceholder <SID>jump_to_placeholder()$/;"	m
<Plug>Csurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>Dsurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>SurroundRepeat	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>VSurround	plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 /;"	m
<Plug>VgSurround	plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 /;"	m
<Plug>VinegarSplitUp	plugged/vim-vinegar/plugin/vinegar.vim	/^nnoremap <silent> <Plug>VinegarSplitUp :call <SID>opendir('split')<CR>$/;"	m
<Plug>VinegarTabUp	plugged/vim-vinegar/plugin/vinegar.vim	/^nnoremap <silent> <Plug>VinegarTabUp :call <SID>opendir('tabedit')<CR>$/;"	m
<Plug>VinegarUp	plugged/vim-vinegar/plugin/vinegar.vim	/^nnoremap <silent> <Plug>VinegarUp :call <SID>opendir('edit')<CR>$/;"	m
<Plug>VinegarVerticalSplitUp	plugged/vim-vinegar/plugin/vinegar.vim	/^nnoremap <silent> <Plug>VinegarVerticalSplitUp :call <SID>opendir('vsplit')<CR>$/;"	m
<Plug>YSsurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'$/;"	m
<Plug>YSurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')$/;"	m
<Plug>Yssurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'$/;"	m
<Plug>Ysurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')$/;"	m
<Plug>fugitive:	plugged/vim-fugitive/plugin/fugitive.vim	/^nmap <script> <Plug>fugitive: <Nop>$/;"	m
<Plug>fugitive:y<C-G>	plugged/vim-fugitive/plugin/fugitive.vim	/^nmap <script><silent> <Plug>fugitive:y<C-G> :<C-U>call setreg(v:register, fugitive#Object(@%))<C/;"	m
<S-Tab>	vimrc	/^inoremap <expr> <S-Tab> pumvisible() ? "\\<C-p>" : "\\<S-Tab>"$/;"	m
<S-k>	vimrc	/^nnoremap <S-k> :bd<cr>$/;"	m
<S-tab>	vimrc	/^nnoremap <S-tab> <C-w>W$/;"	m
<SID>:	plugged/vim-fugitive/autoload/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<Tab>	vimrc	/^inoremap <expr> <Tab> pumvisible() ? "\\<C-n>" : "\\<Tab>"$/;"	m
<c-h>	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    snoremap <silent> <c-h> <c-g>"_c$/;"	m
<c-r>	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    snoremap <c-r> <c-g>"_c<c-r>$/;"	m
<cr>	autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<cr>	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<cr>	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^      nmap <buffer> <cr> <plug>(plug-preview)$/;"	m
<cr>	vimrc	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<cr>"$/;"	m
<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)	plugged/fzf/README.md	/^<img src="https:\/\/raw.githubusercontent.com\/junegunn\/i\/master\/fzf.png" height="170" alt="f/;"	c
<leader><space>	vimrc	/^nnoremap <silent> <leader><space> :noh<cr>$/;"	m
<leader>b	vimrc	/^nnoremap <nowait><leader>b :Buffers<cr>$/;"	m
<leader>c	vimrc	/^nnoremap <leader>c :copen 10<cr>$/;"	m
<leader>eb	vimrc	/^nnoremap <leader>eb :e ~\/.bashrc<cr>$/;"	m
<leader>ed	vimrc	/^nnoremap <leader>ed :e ~\/.dotfiles<cr>$/;"	m
<leader>es	vimrc	/^nnoremap <leader>es :e ~\/.vim\/UltiSnips<cr>$/;"	m
<leader>et	vimrc	/^nnoremap <leader>et :e ~\/.tmux.conf<cr>$/;"	m
<leader>ev	vimrc	/^nnoremap <leader>ev :e $MYVIMRC<cr>$/;"	m
<leader>f	vimrc	/^nnoremap <leader>f :Files<cr>$/;"	m
<leader>g	vimrc	/^nnoremap <leader>g :GFiles<cr>$/;"	m
<leader>l	vimrc	/^nnoremap <leader>l :e \/var\/log\/gunicorn<cr>$/;"	m
<leader>m	vimrc	/^nnoremap <leader>m zM$/;"	m
<leader>p	vimrc	/^nnoremap <leader>p oimport pudb; pu.db<esc>$/;"	m
<leader>r	vimrc	/^nnoremap <leader>r :Rg<cr>$/;"	m
<leader>r	vimrc	/^nnoremap <leader>r zR$/;"	m
<leader>so	vimrc	/^nnoremap <leader>so :so %<cr>$/;"	m
<leader>t	vimrc	/^nnoremap <leader>t :Tags<cr>$/;"	m
<leader>v	vimrc	/^nnoremap <leader>v :vsp<cr>$/;"	m
<plug>(-fzf-/)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
<plug>(-fzf-vim-do)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(fzf-complete-buffer-line)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-file)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-path)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	plugged/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	plugged/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
<plug>(fzf-maps-x)	plugged/fzf.vim/plugin/fzf.vim	/^xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>$/;"	m
<plug>(plug-preview)	autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
<plug>(plug-preview)	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
<plug>(plug-preview)	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> <plug>(plug-preview) :silent! call <SID>preview_commit()<cr>$/;"	m
<plug>SplitjoinJoin	plugged/splitjoin.vim/plugin/splitjoin.vim	/^nnoremap <silent> <plug>SplitjoinJoin  :<c-u>call sj#Join()<cr>$/;"	m
<plug>SplitjoinSplit	plugged/splitjoin.vim/plugin/splitjoin.vim	/^nnoremap <silent> <plug>SplitjoinSplit :<c-u>call sj#Split()<cr>$/;"	m
<tab>	vimrc	/^nnoremap <tab> <C-w>w$/;"	m
A	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^        module A$/;"	m
A	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^      defmodule A do$/;"	m
A	plugged/vim-coiled-snake/tests/corner_cases/one_line_class.py	/^class A: pass$/;"	c
ACTION_CHOICES	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    ACTION_CHOICES = list(zip(ACTION_LIST, ACTION_LIST))$/;"	v	class:FailureLine
ACTION_LIST	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    ACTION_LIST = ("test_result", "log", "crash", "truncated")$/;"	v	class:FailureLine
ACTION_MAP	plugged/completor.vim/pythonx/completers/rust.py	/^ACTION_MAP = {$/;"	v
ALE	plugged/completor.vim/pythonx/completers/ale.py	/^class ALE(Completor):$/;"	c
ARR_D	plugged/ultisnips/test/constant.py	/^ARR_D = "\\x1bOB"$/;"	v
ARR_L	plugged/ultisnips/test/constant.py	/^ARR_L = "\\x1bOD"$/;"	v
ARR_R	plugged/ultisnips/test/constant.py	/^ARR_R = "\\x1bOC"$/;"	v
ARR_U	plugged/ultisnips/test/constant.py	/^ARR_U = "\\x1bOA"$/;"	v
AUTHOR	plugged/fzf/man/man1/fzf.1	/^.SH AUTHOR$/;"	s	title:fzf
AUTOCLASSIFIED	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    AUTOCLASSIFIED = 2$/;"	v	class:Job
AUTOCLASSIFY_STATUSES	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    AUTOCLASSIFY_STATUSES = ((PENDING, 'pending'),$/;"	v	class:Job
Abbreviation	plugged/vim-abolish/README.markdown	/^## Abbreviation$/;"	s	chapter:abolish.vim
Abolish	plugged/vim-abolish/plugin/abolish.vim	/^  let Abolish = {}$/;"	v
Abolish	plugged/vim-abolish/plugin/abolish.vim	/^command! -nargs=+ -bang -bar -range=0 -complete=custom,s:Complete Abolish$/;"	c
Abolished	plugged/vim-abolish/plugin/abolish.vim	/^function! Abolished()$/;"	f
About	plugged/vim-lastplace/README.md	/^## About$/;"	s	chapter:vim-lastplace v4.6.0
Actual	plugged/splitjoin.vim/spec/support/vim-elixir/ISSUE_TEMPLATE.md	/^# Actual$/;"	c
AdaptCursorOffsetIfNeeded	plugged/MatchTagAlways/python/mta_core.py	/^def AdaptCursorOffsetIfNeeded( sanitized_html, cursor_offset ):$/;"	f
Add	plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Add(chunk *Chunk, key string, list []Result) {$/;"	f	struct:fzf.ChunkCache
AddBuiltinFlag	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^    function! AddBuiltinFlag(flags, flag, condition)$/;"	f
AddBuiltinFlag	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^    function! AddBuiltinFlag(flags, flag, condition)$/;"	f
AddBuiltinFlag	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^    function! AddBuiltinFlag(flags, flag, condition)$/;"	f
AddBuiltinFlag	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^    function! AddBuiltinFlag(flags, flag, condition)$/;"	f
AddFunc_Opt	plugged/ultisnips/test/test_UltiSnipFunc.py	/^class AddFunc_Opt(_AddFuncBase):$/;"	c
AddFunc_Simple	plugged/ultisnips/test/test_UltiSnipFunc.py	/^class AddFunc_Simple(_AddFuncBase):$/;"	c
AddNewSnippetSource	plugged/ultisnips/test/test_UltiSnipFunc.py	/^class AddNewSnippetSource(_VimTest):$/;"	c
AddTabularPattern	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^com! -nargs=+ -bang AddTabularPattern$/;"	c
AddTabularPattern	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^function! AddTabularPattern(command, force)$/;"	f
AddTabularPipeline	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^com! -nargs=+ -bang AddTabularPipeline$/;"	c
AddTabularPipeline	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^function! AddTabularPipeline(command, force)$/;"	f
Added `--ansi` option (#150)	plugged/fzf/CHANGELOG.md	/^#### Added `--ansi` option (#150)$/;"	t	subsection:CHANGELOG""0.9.5""New features
Added `--expect` option (#163)	plugged/fzf/CHANGELOG.md	/^#### Added `--expect` option (#163)$/;"	t	subsection:CHANGELOG""0.9.6""New features
Added `--tac` option to reverse the order of the input.	plugged/fzf/CHANGELOG.md	/^#### Added `--tac` option to reverse the order of the input.$/;"	t	subsection:CHANGELOG""0.9.4""New features
AddedSnippetsSource	plugged/ultisnips/pythonx/UltiSnips/snippet/source/added.py	/^class AddedSnippetsSource(SnippetSource):$/;"	c
Advanced customization	plugged/fzf.vim/README.md	/^### Advanced customization$/;"	S	section:fzf :heart: vim""Customization
Advanced fzf examples	plugged/fzf/ADVANCED.md	/^Advanced fzf examples$/;"	c
Advanced topics	plugged/fzf/README.md	/^Advanced topics$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Algo	plugged/fzf/src/algo/algo.go	/^type Algo func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []ru/;"	t	package:algo	typeref:typename:func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int)
Alias syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/alias_spec.rb	/^describe 'Alias syntax' do$/;"	d
Aliases for snippets	plugged/ultisnips/doc/examples/snippets-aliasing/README.md	/^# Aliases for snippets$/;"	c
Alt	plugged/fzf/src/tui/tui.go	/^	Alt$/;"	c	package:tui
AltBackspace	plugged/fzf/src/tui/tui.go	/^	AltBackspace$/;"	c	package:tui
AltDown	plugged/fzf/src/tui/tui.go	/^	AltDown$/;"	c	package:tui
AltKey	plugged/fzf/src/tui/tui.go	/^func AltKey(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
AltLeft	plugged/fzf/src/tui/tui.go	/^	AltLeft$/;"	c	package:tui
AltRight	plugged/fzf/src/tui/tui.go	/^	AltRight$/;"	c	package:tui
AltShiftDown	plugged/fzf/src/tui/tui.go	/^	AltShiftDown$/;"	c	package:tui
AltShiftLeft	plugged/fzf/src/tui/tui.go	/^	AltShiftLeft$/;"	c	package:tui
AltShiftRight	plugged/fzf/src/tui/tui.go	/^	AltShiftRight$/;"	c	package:tui
AltShiftUp	plugged/fzf/src/tui/tui.go	/^	AltShiftUp$/;"	c	package:tui
AltUp	plugged/fzf/src/tui/tui.go	/^	AltUp$/;"	c	package:tui
Alternate 256-xterm -> sRGB mapping	plugged/seoul256.vim/README.md	/^Alternate 256-xterm -> sRGB mapping$/;"	s
Always highlight enclosing tags	plugged/MatchTagAlways/README.md	/^# Always highlight enclosing tags$/;"	c
Ambidouble	plugged/fzf/src/options.go	/^	Ambidouble   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Anon_NoTrigger_AfterSpace	plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_NoTrigger_AfterSpace(_AnonBase):$/;"	c
Anon_NoTrigger_BeginningOfLine	plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_NoTrigger_BeginningOfLine(_AnonBase):$/;"	c
Anon_NoTrigger_FirstCharOfLine	plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_NoTrigger_FirstCharOfLine(_AnonBase):$/;"	c
Anon_NoTrigger_Multi	plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_NoTrigger_Multi(_AnonBase):$/;"	c
Anon_NoTrigger_Simple	plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_NoTrigger_Simple(_AnonBase):$/;"	c
Anon_Trigger_Multi	plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_Trigger_Multi(_AnonBase):$/;"	c
Anon_Trigger_Opts	plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_Trigger_Opts(_AnonBase):$/;"	c
Anon_Trigger_Simple	plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_Trigger_Simple(_AnonBase):$/;"	c
Anon_Trigger_Twice	plugged/ultisnips/test/test_AnonymousExpansion.py	/^class Anon_Trigger_Twice(_AnonBase):$/;"	c
Anonymous function syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/anonymous_function_spec.rb	/^describe 'Anonymous function syntax' do$/;"	d
AnonymousFunctionfb12f65a0100	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    getFile: function(name, c) {$/;"	f	function:startServer
AnonymousFunctionfb12f65a0200	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      if (config.dontLoad && config.dontLoad.some(function(pat) { return minimatch(name, pat); }/;"	f	function:startServer.AnonymousFunctionfb12f65a0100
AnonymousFunctionfb12f65a0300	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    normalizeFilename: function(name) {$/;"	f	function:startServer
AnonymousFunctionfb12f65a0400	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^  if (config.loadEagerly) config.loadEagerly.forEach(function(pat) {$/;"	f	function:startServer
AnonymousFunctionfb12f65a0500	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    glob.sync(pat, { cwd: dir }).forEach(function(file) {$/;"	f
AnonymousFunctionfb12f65a0600	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    server.request(doc, function(err, res) {$/;"	f
AnonymousFunctionfb12f65a0700	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^  .on('line', function(line) {$/;"	f
Ansi	plugged/fzf/src/options.go	/^	Ansi         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
AsEvent	plugged/fzf/src/tui/tui.go	/^func (t EventType) AsEvent() Event {$/;"	f	type:tui.EventType	typeref:typename:Event
AsString	plugged/fzf/src/item.go	/^func (item *Item) AsString(stripAnsi bool) string {$/;"	f	struct:fzf.Item	typeref:typename:string
AsString	plugged/fzf/src/pattern.go	/^func (p *Pattern) AsString() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
AsUint16	plugged/fzf/src/util/util.go	/^func AsUint16(val int) uint16 {$/;"	f	package:util	typeref:typename:uint16
AtExit	plugged/fzf/src/util/atexit.go	/^func AtExit(fn func()) {$/;"	f	package:util
Atom syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/atom_spec.rb	/^describe 'Atom syntax' do$/;"	d
AtomicBool	plugged/fzf/src/util/atomicbool.go	/^type AtomicBool struct {$/;"	s	package:util
Attr	plugged/fzf/src/tui/dummy.go	/^type Attr int32$/;"	t	package:tui	typeref:typename:int32
Attr	plugged/fzf/src/tui/tcell.go	/^type Attr int32$/;"	t	package:tui	typeref:typename:int32
Attr	plugged/fzf/src/tui/tui.go	/^	Attr  Attr$/;"	m	struct:tui.ColorAttr	typeref:typename:Attr
Attr	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Attr() Attr {$/;"	f	struct:tui.ColorPair	typeref:typename:Attr
AttrClear	plugged/fzf/src/tui/dummy.go	/^	AttrClear     = Attr(1 << 9)$/;"	c	package:tui
AttrClear	plugged/fzf/src/tui/tcell.go	/^	AttrClear     = Attr(1 << 8)$/;"	c	package:tui
AttrRegular	plugged/fzf/src/tui/dummy.go	/^	AttrRegular   = Attr(1 << 8)$/;"	c	package:tui
AttrRegular	plugged/fzf/src/tui/tcell.go	/^	AttrRegular   = Attr(1 << 7)$/;"	c	package:tui
AttrUndefined	plugged/fzf/src/tui/dummy.go	/^	AttrUndefined = Attr(0)$/;"	c	package:tui
AttrUndefined	plugged/fzf/src/tui/tcell.go	/^	AttrUndefined = Attr(0)$/;"	c	package:tui
Attribution	plugged/splitjoin.vim/CODE_OF_CONDUCT.md	/^## Attribution$/;"	s	chapter:Contributor Covenant Code of Conduct
Author	plugged/seoul256.vim/README.md	/^Author$/;"	s
AutoSave	plugged/vim-auto-save/README.md	/^# AutoSave$/;"	c
AutoSave	plugged/vim-auto-save/plugin/AutoSave.vim	/^function! AutoSave()$/;"	f
AutoSaveToggle	plugged/vim-auto-save/plugin/AutoSave.vim	/^command! AutoSaveToggle :call AutoSaveToggle()$/;"	c
AutoSaveToggle	plugged/vim-auto-save/plugin/AutoSave.vim	/^function! AutoSaveToggle()$/;"	f
Autocommands	plugged/ultisnips/test/test_Autocommands.py	/^class Autocommands(_VimTest):$/;"	c
Autojump from tabstop when it's empty	plugged/ultisnips/doc/examples/autojump-if-empty/README.md	/^# Autojump from tabstop when it's empty$/;"	c
Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne	plugged/ultisnips/test/test_Autotrigger.py	/^class Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne(_VimTest):$/;"	c
Autotrigger_CanMatchContext	plugged/ultisnips/test/test_Autotrigger.py	/^class Autotrigger_CanMatchContext(_VimTest):$/;"	c
Autotrigger_CanMatchPreviouslySelectedPlaceholder	plugged/ultisnips/test/test_Autotrigger.py	/^class Autotrigger_CanMatchPreviouslySelectedPlaceholder(_VimTest):$/;"	c
Autotrigger_CanMatchSimpleTrigger	plugged/ultisnips/test/test_Autotrigger.py	/^class Autotrigger_CanMatchSimpleTrigger(_VimTest):$/;"	c
Autotrigger_CanToggle	plugged/ultisnips/test/test_Autotrigger.py	/^class Autotrigger_CanToggle(_VimTest):$/;"	c
Autotrigger_GlobalDisable	plugged/ultisnips/test/test_Autotrigger.py	/^class Autotrigger_GlobalDisable(_VimTest):$/;"	c
Autotrigger_GlobalDisableThenToggle	plugged/ultisnips/test/test_Autotrigger.py	/^class Autotrigger_GlobalDisableThenToggle(_VimTest):$/;"	c
B	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^          module B$/;"	m	module:A
B	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^        module A::B$/;"	m	module:A
B	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^      defmodule B do$/;"	m
B	plugged/vim-coiled-snake/tests/corner_cases/one_line_class.py	/^class B: pass$/;"	c
BACKWARD	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    BACKWARD = 2$/;"	v	class:JumpDirection
BASE	plugged/fzf/test/test_go.rb	/^BASE = File.expand_path('..', __dir__)$/;"	C
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARY32)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARY64)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYARM5)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYARM6)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYARM7)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYARM8)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYLOONG64)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYPPC64LE)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYRISCV64)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYS390)$/;"	m
BINARY32	plugged/fzf/Makefile	/^BINARY32       := fzf-$(GOOS)_386$/;"	m
BINARY64	plugged/fzf/Makefile	/^BINARY64       := fzf-$(GOOS)_amd64$/;"	m
BINARYARM5	plugged/fzf/Makefile	/^BINARYARM5     := fzf-$(GOOS)_arm5$/;"	m
BINARYARM6	plugged/fzf/Makefile	/^BINARYARM6     := fzf-$(GOOS)_arm6$/;"	m
BINARYARM7	plugged/fzf/Makefile	/^BINARYARM7     := fzf-$(GOOS)_arm7$/;"	m
BINARYARM8	plugged/fzf/Makefile	/^BINARYARM8     := fzf-$(GOOS)_arm8$/;"	m
BINARYLOONG64	plugged/fzf/Makefile	/^BINARYLOONG64  := fzf-$(GOOS)_loong64$/;"	m
BINARYPPC64LE	plugged/fzf/Makefile	/^BINARYPPC64LE  := fzf-$(GOOS)_ppc64le$/;"	m
BINARYRISCV64	plugged/fzf/Makefile	/^BINARYRISCV64  := fzf-$(GOOS)_riscv64$/;"	m
BINARYS390	plugged/fzf/Makefile	/^BINARYS390     := fzf-$(GOOS)_s390x$/;"	m
BRACES	plugged/ultisnips/test/vim_interface.py	/^    BRACES = re.compile("([}{])")$/;"	v	class:VimInterfaceWindows
BS	plugged/ultisnips/test/constant.py	/^BS = "\\x7f"$/;"	v
BUILD_FLAGS	plugged/fzf/Makefile	/^BUILD_FLAGS    := -a -ldflags "-s -w -X main.version=$(VERSION) -X main.revision=$(REVISION)" -t/;"	m
BUILD_INVERTED_INDEX	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
BUSTED	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    BUSTED = 2$/;"	v	class:TextLogStep
Background Colors (palette1)	plugged/everforest/palette.md	/^#### Background Colors (palette1)$/;"	t	subsection:Color Palette and Highlighting Semantics""Palette Variants""Dark
Background Colors (palette1)	plugged/everforest/palette.md	/^#### Background Colors (palette1)$/;"	t	subsection:Color Palette and Highlighting Semantics""Palette Variants""Light
Backspace	plugged/fzf/src/tui/tui.go	/^	Backspace$/;"	c	package:tui
Backspace_TabStop_NotZero	plugged/ultisnips/test/test_Editing.py	/^class Backspace_TabStop_NotZero(_VimTest):$/;"	c
Backspace_TabStop_Zero	plugged/ultisnips/test/test_Editing.py	/^class Backspace_TabStop_Zero(_VimTest):$/;"	c
BackwardEOF	plugged/fzf/src/tui/tui.go	/^	BackwardEOF$/;"	c	package:tui
Bar	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^          module Bar$/;"	m	module:Foo
Bar	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^        module Foo::Bar$/;"	m	module:Foo
Bar	plugged/vim-coiled-snake/tests/test_blocks.py	/^class Bar:$/;"	c
Bar	plugged/vim-coiled-snake/tests/test_nested.py	/^                class Bar:$/;"	c	class:Bar.Bar.Bar.Bar
Bar	plugged/vim-coiled-snake/tests/test_nested.py	/^            class Bar:$/;"	c	class:Bar.Bar.Bar
Bar	plugged/vim-coiled-snake/tests/test_nested.py	/^        class Bar:$/;"	c	class:Bar.Bar
Bar	plugged/vim-coiled-snake/tests/test_nested.py	/^    class Bar:$/;"	c	class:Bar
Bar	plugged/vim-coiled-snake/tests/test_nested.py	/^class Bar:$/;"	c
Base	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class Base(object):$/;"	c
Base	plugged/completor.vim/pythonx/completor/__init__.py	/^Base = Meta('Base', (object, ), {})$/;"	v
Base	plugged/validator.vim/pythonx/validator/__init__.py	/^Base = Meta('Base', (object,), {})$/;"	v
Bash	plugged/fzf/src/options.go	/^	Bash         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Basic folding	plugged/splitjoin.vim/spec/support/vim-elixir/spec/folding/basic_spec.rb	/^describe 'Basic folding' do$/;"	d
Basic indenting	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^describe 'Basic indenting' do$/;"	d
Baz	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^            class Baz < Quux$/;"	c	module:Foo.Bar
Baz	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^            describe Baz do$/;"	d
Baz	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^          RSpec.describe Baz do$/;"	d
Baz	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^        class Foo::Bar::Baz < Quux$/;"	c	module:Foo.Bar
Baz	plugged/vim-coiled-snake/tests/test_blocks.py	/^class Baz:$/;"	c
Become	plugged/fzf/src/util/util_unix.go	/^func (x *Executor) Become(stdin *os.File, environ []string, command string) {$/;"	f	struct:util.Executor
Become	plugged/fzf/src/util/util_windows.go	/^func (x *Executor) Become(stdin *os.File, environ []string, command string) {$/;"	f	struct:util.Executor
Before submitting	plugged/fzf.vim/.github/ISSUE_TEMPLATE.md	/^Before submitting$/;"	c
Before you add a feature	plugged/ultisnips/CONTRIBUTING.md	/^## Before you add a feature$/;"	s	chapter:Contributing to UltiSnips
BenchmarkExtractColor	plugged/fzf/src/ansi_test.go	/^func BenchmarkExtractColor(b *testing.B) {$/;"	f	package:fzf
BenchmarkNextAnsiEscapeSequence	plugged/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence(b *testing.B) {$/;"	f	package:fzf
BenchmarkNextAnsiEscapeSequence_Regex	plugged/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence_Regex(b *testing.B) {$/;"	f	package:fzf
Bg	plugged/fzf/src/tui/tui.go	/^	Bg               ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Bg	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Bg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
Binary operators	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/binary_operator_spec.rb	/^describe 'Binary operators' do$/;"	d
Binary releases	plugged/fzf/README.md	/^### Binary releases$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Bindeval	plugged/completor.vim/pythonx/completor/_vim.py	/^    class Bindeval(object):$/;"	c	function:_patch_nvim	file:
Black	plugged/fzf/src/options.go	/^	Black        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Blink	plugged/fzf/src/tui/dummy.go	/^	Blink         = Attr(1 << 4)$/;"	c	package:tui
Blink	plugged/fzf/src/tui/tcell.go	/^	Blink              = Attr(tcell.AttrBlink)$/;"	c	package:tui
Blink2	plugged/fzf/src/tui/dummy.go	/^	Blink2        = Attr(1 << 5)$/;"	c	package:tui
BlockProfile	plugged/fzf/src/options.go	/^	BlockProfile string$/;"	m	struct:fzf.Options	typeref:typename:string
Bold	plugged/fzf/src/options.go	/^	Bold         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Bold	plugged/fzf/src/tui/dummy.go	/^	Bold          = Attr(1)$/;"	c	package:tui
Bold	plugged/fzf/src/tui/tcell.go	/^	Bold          Attr = Attr(tcell.AttrBold)$/;"	c	package:tui	typeref:type:Attr
Border	plugged/fzf/src/tui/tui.go	/^	Border           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
BorderBlock	plugged/fzf/src/tui/tui.go	/^	BorderBlock$/;"	c	package:tui
BorderBold	plugged/fzf/src/tui/tui.go	/^	BorderBold$/;"	c	package:tui
BorderBottom	plugged/fzf/src/tui/tui.go	/^	BorderBottom$/;"	c	package:tui
BorderCharacter	plugged/fzf/src/tui/tui.go	/^type BorderCharacter int$/;"	t	package:tui	typeref:typename:int
BorderDouble	plugged/fzf/src/tui/tui.go	/^	BorderDouble$/;"	c	package:tui
BorderHorizontal	plugged/fzf/src/tui/tui.go	/^	BorderHorizontal$/;"	c	package:tui
BorderLabel	plugged/fzf/src/options.go	/^	BorderLabel  labelOpts$/;"	m	struct:fzf.Options	typeref:typename:labelOpts
BorderLabel	plugged/fzf/src/tui/tui.go	/^	BorderLabel      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
BorderLeft	plugged/fzf/src/tui/tui.go	/^	BorderLeft$/;"	c	package:tui
BorderNone	plugged/fzf/src/tui/tui.go	/^	BorderNone$/;"	c	package:tui
BorderRight	plugged/fzf/src/tui/tui.go	/^	BorderRight$/;"	c	package:tui
BorderRounded	plugged/fzf/src/tui/tui.go	/^	BorderRounded$/;"	c	package:tui
BorderShape	plugged/fzf/src/options.go	/^	BorderShape  tui.BorderShape$/;"	m	struct:fzf.Options	typeref:typename:tui.BorderShape
BorderShape	plugged/fzf/src/tui/tui.go	/^type BorderShape int$/;"	t	package:tui	typeref:typename:int
BorderSharp	plugged/fzf/src/tui/tui.go	/^	BorderSharp$/;"	c	package:tui
BorderStyle	plugged/fzf/src/tui/tui.go	/^type BorderStyle struct {$/;"	s	package:tui
BorderThinBlock	plugged/fzf/src/tui/tui.go	/^	BorderThinBlock$/;"	c	package:tui
BorderTop	plugged/fzf/src/tui/tui.go	/^	BorderTop$/;"	c	package:tui
BorderUndefined	plugged/fzf/src/tui/tui.go	/^	BorderUndefined BorderShape = iota$/;"	c	package:tui	typeref:type:BorderShape
BorderVertical	plugged/fzf/src/tui/tui.go	/^	BorderVertical$/;"	c	package:tui
Branches	plugged/fzf/ADVANCED.md	/^### Branches$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Broadcaster	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^      defmodule Broadcaster do$/;"	m
Buffer	plugged/completor.vim/README.md	/^#### Buffer$/;"	t	section:Completor""Completers
Buffer	plugged/completor.vim/pythonx/completers/common/buffer.py	/^class Buffer(Completor):$/;"	c
Buffer	plugged/completor.vim/tests/conftest.py	/^class Buffer(list):$/;"	c
Buffer	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^class Buffer$/;"	c
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.11
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.12
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.13
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.5
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.6
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.7
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.8
Bug1251994	plugged/ultisnips/test/test_Fixes.py	/^class Bug1251994(_VimTest):$/;"	c
BugJobMap	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class BugJobMap(models.Model):$/;"	c
Bugscache	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class Bugscache(models.Model):$/;"	c
Build instructions	plugged/fzf/BUILD.md	/^Build instructions$/;"	s	chapter:Building fzf
BuildPattern	plugged/fzf/src/pattern.go	/^func BuildPattern(cache *ChunkCache, patternCache map[string]*Pattern, fuzzy bool, fuzzyAlgo alg/;"	f	package:fzf	typeref:typename:*Pattern
BuildPlatform	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class BuildPlatform(models.Model):$/;"	c
Building fzf	plugged/fzf/BUILD.md	/^Building fzf$/;"	c
Building fzf	plugged/fzf/README.md	/^Building fzf$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Builtin Checkers	plugged/validator.vim/README.md	/^Builtin Checkers$/;"	s	chapter:Validator
ByOrder	plugged/fzf/src/result.go	/^type ByOrder []Offset$/;"	t	package:fzf	typeref:typename:[]Offset
ByRelevance	plugged/fzf/src/result.go	/^type ByRelevance []Result$/;"	t	package:fzf	typeref:typename:[]Result
ByRelevanceTac	plugged/fzf/src/result.go	/^type ByRelevanceTac []Result$/;"	t	package:fzf	typeref:typename:[]Result
Byte	plugged/fzf/src/tui/tui.go	/^func (t EventType) Byte() byte {$/;"	f	type:tui.EventType	typeref:typename:byte
Bytes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Bytes() []byte {$/;"	f	struct:util.Chars	typeref:typename:[]byte
C	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^      defmodule C do$/;"	m
CFill	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) CFill(fg Color, bg Color, attr Attr, text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
CFill	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CFill(fg Color, bg Color, a Attr, str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
CFill	plugged/fzf/src/tui/tui.go	/^	CFill(fg Color, bg Color, attr Attr, text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
CHANGELOG	plugged/fzf/CHANGELOG.md	/^CHANGELOG$/;"	c
CHANGE_DIR	plugged/completor.vim/Makefile	/^CHANGE_DIR = cd .\/pythonx\/completers\/javascript && $/;"	m
CHECK	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    CHECK = re.compile(r"^\\$\\d+")$/;"	v	class:MirrorToken
CHECK	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    CHECK = re.compile(r"^\\${VISUAL[:}\/]")$/;"	v	class:VisualToken
CHECK	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    CHECK = re.compile(r"^\\${\\d+[:}]")$/;"	v	class:TabStopToken
CHECK	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    CHECK = re.compile(r"^\\${\\d+\\\/")$/;"	v	class:TransformationToken
CHECK	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    CHECK = re.compile(r"^\\${\\d+\\|")$/;"	v	class:ChoicesToken
CHECK	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    CHECK = re.compile(r"^`!p\\s")$/;"	v	class:PythonCodeToken
CHECK	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    CHECK = re.compile(r"^`!v\\s")$/;"	v	class:VimLCodeToken
CLOSING	plugged/MatchTagAlways/python/mta_core.py	/^  CLOSING = 2$/;"	v	class:TagType
COMMENT_REGEX	plugged/MatchTagAlways/python/mta_core.py	/^COMMENT_REGEX = re.compile( '<!--.*?-->', re.DOTALL )$/;"	v
COMMON_LIMIT	plugged/completor.vim/pythonx/completor/__init__.py	/^COMMON_LIMIT = 10$/;"	v
COMPLETION_OPTIONS	plugged/ultisnips/test/test_Completion.py	/^COMPLETION_OPTIONS = "completion1\\ncompletion2\\n"$/;"	v
COMPL_ACCEPT	plugged/ultisnips/test/constant.py	/^COMPL_ACCEPT = chr(25)$/;"	v
COMPL_KW	plugged/ultisnips/test/constant.py	/^COMPL_KW = chr(24) + chr(14)$/;"	v
COMPREPLY=	plugged/fzf/shell/completion.bash	/^  COMPREPLY=()$/;"	f
CPUProfile	plugged/fzf/src/options.go	/^	CPUProfile   string$/;"	m	struct:fzf.Options	typeref:typename:string
CPrint	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) CPrint(pair ColorPair, text string) {$/;"	f	struct:tui.LightWindow
CPrint	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CPrint(pair ColorPair, text string) {$/;"	f	struct:tui.TcellWindow
CPrint	plugged/fzf/src/tui/tui.go	/^	CPrint(color ColorPair, text string)$/;"	n	interface:tui.Window
CR	plugged/fzf/src/tui/light.go	/^const CR string = "\\x1b[2m␍"$/;"	c	package:tui	typeref:typename:string
CROSSREFERENCED	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    CROSSREFERENCED = 1$/;"	v	class:Job
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CTRL_V	plugged/ultisnips/test/constant.py	/^CTRL_V = chr(22)$/;"	v
CacheKey	plugged/fzf/src/pattern.go	/^func (p *Pattern) CacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
CanAccessCursorColumn	plugged/MatchTagAlways/python/mta_vim.py	/^def CanAccessCursorColumn( cursor_column ):$/;"	f
Cargo	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=+ Cargo call cargo#cmd(<q-args>)$/;"	c
Cargo	plugged/validator.vim/pythonx/lints/rust.py	/^class Cargo(Validator):$/;"	c
Case	plugged/fzf/src/options.go	/^	Case         Case$/;"	m	struct:fzf.Options	typeref:typename:Case
Case	plugged/fzf/src/options.go	/^type Case int$/;"	t	package:fzf	typeref:typename:int
CaseIgnore	plugged/fzf/src/options.go	/^	CaseIgnore$/;"	c	package:fzf
CaseRespect	plugged/fzf/src/options.go	/^	CaseRespect$/;"	c	package:fzf
CaseSmart	plugged/fzf/src/options.go	/^	CaseSmart Case = iota$/;"	c	package:fzf	typeref:type:Case
Cbench	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cbench call cargo#bench(<q-args>)$/;"	c
Cbuild	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cbuild call cargo#build(<q-args>)$/;"	c
Ccheck	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Ccheck call cargo#check(<q-args>)$/;"	c
Cclean	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cclean call cargo#clean(<q-args>)$/;"	c
Cdoc	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cdoc call cargo#doc(<q-args>)$/;"	c
Change	plugged/fzf/src/tui/tui.go	/^	Change$/;"	c	package:tui
Change background color	plugged/seoul256.vim/README.md	/^Change background color$/;"	s
Changed behavior on `--no-sort`	plugged/fzf/CHANGELOG.md	/^#### Changed behavior on `--no-sort`$/;"	t	subsection:CHANGELOG""0.9.4""*Backward incompatible changes*
Char	plugged/fzf/src/tui/tui.go	/^	Char       rune$/;"	m	struct:tui.Event	typeref:typename:rune
Chars	plugged/fzf/src/util/chars.go	/^type Chars struct {$/;"	s	package:util
Choices	plugged/ultisnips/pythonx/UltiSnips/text_objects/choices.py	/^class Choices(TabStop):$/;"	c
ChoicesToken	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^class ChoicesToken(Token):$/;"	c
Choices_AsNestedElement_CanBeTabbedInto	plugged/ultisnips/test/test_Choices.py	/^class Choices_AsNestedElement_CanBeTabbedInto(_VimTest):$/;"	c
Choices_AsNestedElement_CanBeTabbedThrough	plugged/ultisnips/test/test_Choices.py	/^class Choices_AsNestedElement_CanBeTabbedThrough(_VimTest):$/;"	c
Choices_AsNestedElement_ShallNotTakeActionIfParentInput	plugged/ultisnips/test/test_Choices.py	/^class Choices_AsNestedElement_ShallNotTakeActionIfParentInput(_VimTest):$/;"	c
Choices_AsNestedElement_ShouldOverwriteDefaultText	plugged/ultisnips/test/test_Choices.py	/^class Choices_AsNestedElement_ShouldOverwriteDefaultText(_VimTest):$/;"	c
Choices_CanEscapeCommaInsideChoiceItem	plugged/ultisnips/test/test_Choices.py	/^class Choices_CanEscapeCommaInsideChoiceItem(_VimTest):$/;"	c
Choices_CanTakeNonAsciiCharacters	plugged/ultisnips/test/test_Choices.py	/^class Choices_CanTakeNonAsciiCharacters(_VimTest):$/;"	c
Choices_EmptyChoiceWillBeDiscarded	plugged/ultisnips/test/test_Choices.py	/^class Choices_EmptyChoiceWillBeDiscarded(_VimTest):$/;"	c
Choices_ExpectCorrectResult	plugged/ultisnips/test/test_Choices.py	/^class Choices_ExpectCorrectResult(_VimTest):$/;"	c
Choices_MoreThan9Candidates_ShouldTerminateWithSpace	plugged/ultisnips/test/test_Choices.py	/^class Choices_MoreThan9Candidates_ShouldTerminateWithSpace(_VimTest):$/;"	c
Choices_MoreThan9Candidates_ShouldWaitForInputs	plugged/ultisnips/test/test_Choices.py	/^class Choices_MoreThan9Candidates_ShouldWaitForInputs(_VimTest):$/;"	c
Choices_ShouldThrowErrorWithZeroTabstop	plugged/ultisnips/test/test_Choices.py	/^class Choices_ShouldThrowErrorWithZeroTabstop(_VimTest):$/;"	c
Choices_WilNotMessWithTabstopsAfterIt	plugged/ultisnips/test/test_Choices.py	/^class Choices_WilNotMessWithTabstopsAfterIt(_VimTest):$/;"	c
Choices_WillAbandonSelection_If_CharTyped	plugged/ultisnips/test/test_Choices.py	/^class Choices_WillAbandonSelection_If_CharTyped(_VimTest):$/;"	c
Choices_WillAbandonSelection_If_InputIsGreaterThanMaxSelectionIndex	plugged/ultisnips/test/test_Choices.py	/^class Choices_WillAbandonSelection_If_InputIsGreaterThanMaxSelectionIndex(_VimTest):$/;"	c
Choices_WillBeExpandedToInlineSelection	plugged/ultisnips/test/test_Choices.py	/^class Choices_WillBeExpandedToInlineSelection(_VimTest):$/;"	c
Choices_WillNotExpand_If_ChoiceListIsEmpty	plugged/ultisnips/test/test_Choices.py	/^class Choices_WillNotExpand_If_ChoiceListIsEmpty(_VimTest):$/;"	c
Choices_With_Mirror	plugged/ultisnips/test/test_Choices.py	/^class Choices_With_Mirror(_VimTest):$/;"	c
Choices_With_Mirror_ContinueMirroring_EvenAfterSelectionDone	plugged/ultisnips/test/test_Choices.py	/^class Choices_With_Mirror_ContinueMirroring_EvenAfterSelectionDone(_VimTest):$/;"	c
Chunk	plugged/fzf/src/chunklist.go	/^type Chunk struct {$/;"	s	package:fzf
ChunkCache	plugged/fzf/src/cache.go	/^type ChunkCache struct {$/;"	s	package:fzf
ChunkList	plugged/fzf/src/chunklist.go	/^type ChunkList struct {$/;"	s	package:fzf
Cinit	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cinit call cargo#init(<q-args>)$/;"	c
Cinstall	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cinstall call cargo#install(<q-args>)$/;"	c
Clang	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^class Clang(Completor):$/;"	c
Class	plugged/vim-coiled-snake/tests/test_decorators.py	/^class Class:$/;"	c
Class	plugged/vim-coiled-snake/tests/test_everything.py	/^class Class:$/;"	c
ClassifiedFailure	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class ClassifiedFailure(models.Model):$/;"	c
CleanUp	plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
Clear	plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Clear() {$/;"	f	struct:fzf.ChunkCache
Clear	plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Clear() {$/;"	f	struct:fzf.ChunkList
Clear	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Clear()                             {}$/;"	f	unknown:tui.FullscreenRenderer
Clear	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Clear() {$/;"	f	struct:tui.LightRenderer
Clear	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Clear() {$/;"	f	unknown:tui.FullscreenRenderer
Clear	plugged/fzf/src/tui/tui.go	/^	Clear()$/;"	n	interface:tui.Renderer
Clear	plugged/fzf/src/util/eventbox.go	/^func (events *Events) Clear() {$/;"	f	type:util.Events
ClearOnExit	plugged/fzf/src/options.go	/^	ClearOnExit  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
ClickHeader	plugged/fzf/src/tui/tui.go	/^	ClickHeader$/;"	c	package:tui
Close	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Close()                             {}$/;"	f	unknown:tui.FullscreenRenderer
Close	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Close() {$/;"	f	struct:tui.LightRenderer
Close	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Close() {$/;"	f	struct:tui.LightWindow
Close	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Close() {$/;"	f	unknown:tui.FullscreenRenderer
Close	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Close() {$/;"	f	struct:tui.TcellWindow
Close	plugged/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Renderer
Close	plugged/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Window
Cnew	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=+ Cnew call cargo#new(<q-args>)$/;"	c
CodeAction	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class CodeAction(Base):$/;"	c
Coercion	plugged/vim-abolish/README.markdown	/^## Coercion$/;"	s	chapter:abolish.vim
Coiled Snake: Python Folding for Vim	plugged/vim-coiled-snake/README.md	/^Coiled Snake: Python Folding for Vim$/;"	c
CoiledSnake	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^    augroup CoiledSnake$/;"	a
CoiledSnake	plugged/vim-coiled-snake/plugin/coiledsnake.vim	/^augroup CoiledSnake " {{{1$/;"	a
CoiledSnake	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^    augroup CoiledSnake$/;"	a
CoiledSnake	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/plugin/coiledsnake.vim	/^augroup CoiledSnake " {{{1$/;"	a
CoiledSnake	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^    augroup CoiledSnake$/;"	a
CoiledSnake	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/plugin/coiledsnake.vim	/^augroup CoiledSnake " {{{1$/;"	a
CoiledSnake	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^    augroup CoiledSnake$/;"	a
ColBorder	plugged/fzf/src/tui/tui.go	/^	ColBorder               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColBorderLabel	plugged/fzf/src/tui/tui.go	/^	ColBorderLabel          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrent	plugged/fzf/src/tui/tui.go	/^	ColCurrent              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursor	plugged/fzf/src/tui/tui.go	/^	ColCurrentCursor        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursorEmpty	plugged/fzf/src/tui/tui.go	/^	ColCurrentCursorEmpty   ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentMarker	plugged/fzf/src/tui/tui.go	/^	ColCurrentMarker        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentMatch	plugged/fzf/src/tui/tui.go	/^	ColCurrentMatch         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentSelectedEmpty	plugged/fzf/src/tui/tui.go	/^	ColCurrentSelectedEmpty ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursor	plugged/fzf/src/tui/tui.go	/^	ColCursor               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursorEmpty	plugged/fzf/src/tui/tui.go	/^	ColCursorEmpty          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColDisabled	plugged/fzf/src/tui/tui.go	/^	ColDisabled             ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColHeader	plugged/fzf/src/tui/tui.go	/^	ColHeader               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInfo	plugged/fzf/src/tui/tui.go	/^	ColInfo                 ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInput	plugged/fzf/src/tui/tui.go	/^	ColInput                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColMarker	plugged/fzf/src/tui/tui.go	/^	ColMarker               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColMatch	plugged/fzf/src/tui/tui.go	/^	ColMatch                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColNormal	plugged/fzf/src/tui/tui.go	/^	ColNormal               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreview	plugged/fzf/src/tui/tui.go	/^	ColPreview              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewBorder	plugged/fzf/src/tui/tui.go	/^	ColPreviewBorder        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewLabel	plugged/fzf/src/tui/tui.go	/^	ColPreviewLabel         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewScrollbar	plugged/fzf/src/tui/tui.go	/^	ColPreviewScrollbar     ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewSpinner	plugged/fzf/src/tui/tui.go	/^	ColPreviewSpinner       ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPrompt	plugged/fzf/src/tui/tui.go	/^	ColPrompt               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColScrollbar	plugged/fzf/src/tui/tui.go	/^	ColScrollbar            ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSelected	plugged/fzf/src/tui/tui.go	/^	ColSelected             ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSelectedMatch	plugged/fzf/src/tui/tui.go	/^	ColSelectedMatch        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSeparator	plugged/fzf/src/tui/tui.go	/^	ColSeparator            ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSpinner	plugged/fzf/src/tui/tui.go	/^	ColSpinner              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
Color	plugged/fzf/src/tui/tui.go	/^	Color Color$/;"	m	struct:tui.ColorAttr	typeref:typename:Color
Color	plugged/fzf/src/tui/tui.go	/^type Color int32$/;"	t	package:tui	typeref:typename:int32
Color Format	plugged/papercolor-theme/DESIGN.md	/^# Color Format$/;"	c
Color Names	plugged/papercolor-theme/DESIGN.md	/^# Color Names$/;"	c
Color Palette and Highlighting Semantics	plugged/everforest/palette.md	/^# Color Palette and Highlighting Semantics$/;"	c
Color schemes	plugged/seoul256.vim/README.md	/^Color schemes$/;"	s
Color themes	plugged/fzf/ADVANCED.md	/^Color themes$/;"	s	chapter:Advanced fzf examples
ColorAttr	plugged/fzf/src/tui/tui.go	/^type ColorAttr struct {$/;"	s	package:tui
ColorPair	plugged/fzf/src/tui/tui.go	/^type ColorPair struct {$/;"	s	package:tui
ColorTheme	plugged/fzf/src/tui/tui.go	/^type ColorTheme struct {$/;"	s	package:tui
Colored	plugged/fzf/src/tui/tui.go	/^	Colored          bool$/;"	m	struct:tui.ColorTheme	typeref:typename:bool
Colors	plugged/fzf/src/item.go	/^func (item *Item) Colors() []ansiOffset {$/;"	f	struct:fzf.Item	typeref:typename:[]ansiOffset
Columns	plugged/fzf/src/tui/tui.go	/^	Columns  int$/;"	m	struct:tui.TermSize	typeref:typename:int
Comands	plugged/MatchTagAlways/README.md	/^## Comands$/;"	s	chapter:Always highlight enclosing tags
Command-level options	plugged/fzf.vim/README.md	/^#### Command-level options$/;"	t	subsection:fzf :heart: vim""Customization""Configuration options for fzf.vim
Commands	plugged/fzf.vim/README.md	/^Commands$/;"	s	chapter:fzf :heart: vim
Commentary	plugged/vim-commentary/plugin/commentary.vim	/^command! -range -bar -bang Commentary call s:go(<line1>,<line2>,<bang>0)$/;"	c
Comments syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/comments_spec.rb	/^describe 'Comments syntax' do$/;"	d
Commit	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class Commit(models.Model):$/;"	c
Commit hashes	plugged/fzf/ADVANCED.md	/^### Commit hashes$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Common	plugged/completor.vim/pythonx/completers/common/__init__.py	/^class Common(completor.Completor):$/;"	c
Comparable	plugged/fzf/src/tui/tui.go	/^func (e Event) Comparable() Event {$/;"	f	unknown:tui.Event	typeref:typename:Event
CompareVersions	plugged/fzf/src/util/util.go	/^func CompareVersions(v1, v2 string) int {$/;"	f	package:util	typeref:typename:int
CompilerSet	plugged/splitjoin.vim/spec/support/rust.vim/compiler/cargo.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/splitjoin.vim/spec/support/rust.vim/compiler/rustc.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/splitjoin.vim/spec/support/vim-elixir/compiler/credo.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/splitjoin.vim/spec/support/vim-elixir/compiler/exunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/splitjoin.vim/spec/support/vim-elixir/compiler/mix.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/splitjoin.vim/spec/support/vim-javascript/compiler/eslint.vim	/^  command! -nargs=* CompilerSet setlocal <args>$/;"	c
Complete Options (completeopt)	plugged/completor.vim/README.md	/^#### Complete Options (completeopt)$/;"	t	section:Completor""Tips
Completers	plugged/completor.vim/README.md	/^Completers$/;"	s	chapter:Completor
Completion	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class Completion(Base):$/;"	c
Completion functions	plugged/fzf.vim/README.md	/^Completion functions$/;"	s	chapter:fzf :heart: vim
CompletionTest	plugged/fzf/test/test_go.rb	/^module CompletionTest$/;"	m
Completion_BackwardsJumpWithoutCOMPL_ACCEPT	plugged/ultisnips/test/test_Completion.py	/^class Completion_BackwardsJumpWithoutCOMPL_ACCEPT(_VimTest):$/;"	c
Completion_ForwardsJumpWithoutCOMPL_ACCEPT	plugged/ultisnips/test/test_Completion.py	/^class Completion_ForwardsJumpWithoutCOMPL_ACCEPT(_VimTest):$/;"	c
Completion_SimpleExample_ECR	plugged/ultisnips/test/test_Completion.py	/^class Completion_SimpleExample_ECR(_VimTest):$/;"	c
Completor	plugged/completor.vim/README.md	/^Completor$/;"	c
Completor	plugged/completor.vim/pythonx/completor/__init__.py	/^class Completor(Base):$/;"	c
Completor Actions	plugged/completor.vim/README.md	/^#### Completor Actions$/;"	t	section:Completor""Tips
CompletorDisable	plugged/completor.vim/plugin/completor.vim	/^command! CompletorDisable call completor#disable_autocomplete()$/;"	c
CompletorEnable	plugged/completor.vim/plugin/completor.vim	/^command! CompletorEnable call completor#enable_autocomplete()$/;"	c
Concealing Characters	plugged/splitjoin.vim/spec/support/vim-javascript/README.md	/^## Concealing Characters$/;"	s	chapter:vim-javascript
Config tern for javascript completion	plugged/completor.vim/README.md	/^#### Config tern for javascript completion$/;"	t	section:Completor""Tips
Configuration	plugged/fzf/README-VIM.md	/^### Configuration$/;"	S	section:FZF Vim integration""`:FZF[!]`
Configuration	plugged/splitjoin.vim/spec/support/vim-elixir/README.md	/^## Configuration$/;"	s	chapter:vim-elixir
Configuration	plugged/validator.vim/README.md	/^Configuration$/;"	s	chapter:Validator
Configuration	plugged/vim-coiled-snake/README.md	/^Configuration$/;"	s	chapter:Coiled Snake: Python Folding for Vim
Configuration Variables	plugged/splitjoin.vim/spec/support/vim-javascript/README.md	/^## Configuration Variables$/;"	s	chapter:vim-javascript
Configuration options for fzf.vim	plugged/fzf.vim/README.md	/^### Configuration options for fzf.vim$/;"	S	section:fzf :heart: vim""Customization
Configuration options of the base plugin	plugged/fzf.vim/README.md	/^### Configuration options of the base plugin$/;"	S	section:fzf :heart: vim""Customization
Configure	plugged/vim-lastplace/README.md	/^## Configure$/;"	s	chapter:vim-lastplace v4.6.0
Conflicting Scripts:	plugged/vim-lastplace/README.md	/^## Conflicting Scripts:$/;"	s	chapter:vim-lastplace v4.6.0
Constrain	plugged/fzf/src/util/util.go	/^func Constrain(val int, min int, max int) int {$/;"	f	package:util	typeref:typename:int
Constrain32	plugged/fzf/src/util/util.go	/^func Constrain32(val int32, min int32, max int32) int32 {$/;"	f	package:util	typeref:typename:int32
Contact	plugged/MatchTagAlways/README.md	/^## Contact$/;"	s	chapter:Always highlight enclosing tags
Contents	plugged/everforest/palette.md	/^## Contents$/;"	s	chapter:Color Palette and Highlighting Semantics
ContextSnippets_Before	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_Before(_VimTest):$/;"	c
ContextSnippets_ContextHasAccessToReMatch	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_ContextHasAccessToReMatch(_VimTest):$/;"	c
ContextSnippets_ContextHasAccessToVisual	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_ContextHasAccessToVisual(_VimTest):$/;"	c
ContextSnippets_ContextIsClearedBeforeExpand	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_ContextIsClearedBeforeExpand(_VimTest):$/;"	c
ContextSnippets_CursorIsZeroBased	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_CursorIsZeroBased(_VimTest):$/;"	c
ContextSnippets_DoNotExpandOnFalse	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_DoNotExpandOnFalse(_VimTest):$/;"	c
ContextSnippets_ExpandOnTrue	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_ExpandOnTrue(_VimTest):$/;"	c
ContextSnippets_Header_DoNotExpandOnFalse	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_Header_DoNotExpandOnFalse(_VimTest):$/;"	c
ContextSnippets_Header_ExpandOnTrue	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_Header_ExpandOnTrue(_VimTest):$/;"	c
ContextSnippets_PriorityKeyword	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_PriorityKeyword(_VimTest):$/;"	c
ContextSnippets_ReportError	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_ReportError(_VimTest):$/;"	c
ContextSnippets_ReportErrorOnIndexOutOfRange	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_ReportErrorOnIndexOutOfRange(_VimTest):$/;"	c
ContextSnippets_SimpleSnippet	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_SimpleSnippet(_VimTest):$/;"	c
ContextSnippets_SnippetPriority	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_SnippetPriority(_VimTest):$/;"	c
ContextSnippets_UseContext	plugged/ultisnips/test/test_ContextSnippets.py	/^class ContextSnippets_UseContext(_VimTest):$/;"	c
Contributing	plugged/everforest/README.md	/^## Contributing$/;"	s
Contributing	plugged/splitjoin.vim/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	plugged/splitjoin.vim/README.md	/^## Contributing$/;"	s
Contributing	plugged/splitjoin.vim/spec/support/vim-javascript/README.md	/^## Contributing$/;"	s	chapter:vim-javascript
Contributing	plugged/vim-coiled-snake/README.md	/^Contributing$/;"	s	chapter:Coiled Snake: Python Folding for Vim
Contributing	plugged/vim-gutentags/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	plugged/vim-repeat/README.markdown	/^## Contributing$/;"	s	chapter:repeat.vim
Contributing	plugged/vim-surround/README.markdown	/^## Contributing$/;"	s	chapter:surround.vim
Contributing to UltiSnips	plugged/ultisnips/CONTRIBUTING.md	/^# Contributing to UltiSnips$/;"	c
Contribution	plugged/vim-auto-save/README.md	/^## Contribution$/;"	s	chapter:AutoSave
Contributor Covenant Code of Conduct	plugged/splitjoin.vim/CODE_OF_CONDUCT.md	/^# Contributor Covenant Code of Conduct$/;"	c
CopyRunes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) CopyRunes(dest []rune, from int) {$/;"	f	struct:util.Chars
CountItems	plugged/fzf/src/chunklist.go	/^func CountItems(cs []*Chunk) int {$/;"	f	package:fzf	typeref:typename:int
Cpp	plugged/validator.vim/pythonx/lints/cpp.py	/^class Cpp(Validator):$/;"	c
Cpublish	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cpublish call cargo#publish(<q-args>)$/;"	c
Create your own theme	plugged/papercolor-theme/DESIGN.md	/^# Create your own theme$/;"	c
Credits	plugged/splitjoin.vim/spec/support/vim-elm-syntax/README.md	/^## Credits$/;"	s	chapter:vim-elm-syntax
Criteria	plugged/fzf/src/options.go	/^	Criteria     []criterion$/;"	m	struct:fzf.Options	typeref:typename:[]criterion
Crun	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Crun call cargo#run(<q-args>)$/;"	c
Cruntarget	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cruntarget call cargo#runtarget(<q-args>)$/;"	c
Csearch	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Csearch  call cargo#search(<q-args>)$/;"	c
Css	plugged/validator.vim/pythonx/lints/css.py	/^class Css(Validator):$/;"	c
Ctest	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Ctest call cargo#test(<q-args>)$/;"	c
CtrlA	plugged/fzf/src/tui/tui.go	/^	CtrlA$/;"	c	package:tui
CtrlAlt	plugged/fzf/src/tui/tui.go	/^	CtrlAlt$/;"	c	package:tui
CtrlAltKey	plugged/fzf/src/tui/tui.go	/^func CtrlAltKey(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
CtrlB	plugged/fzf/src/tui/tui.go	/^	CtrlB$/;"	c	package:tui
CtrlBackSlash	plugged/fzf/src/tui/tui.go	/^	CtrlBackSlash$/;"	c	package:tui
CtrlC	plugged/fzf/src/tui/tui.go	/^	CtrlC$/;"	c	package:tui
CtrlCaret	plugged/fzf/src/tui/tui.go	/^	CtrlCaret$/;"	c	package:tui
CtrlD	plugged/fzf/src/tui/tui.go	/^	CtrlD$/;"	c	package:tui
CtrlDelete	plugged/fzf/src/tui/tui.go	/^	CtrlDelete$/;"	c	package:tui
CtrlE	plugged/fzf/src/tui/tui.go	/^	CtrlE$/;"	c	package:tui
CtrlF	plugged/fzf/src/tui/tui.go	/^	CtrlF$/;"	c	package:tui
CtrlG	plugged/fzf/src/tui/tui.go	/^	CtrlG$/;"	c	package:tui
CtrlH	plugged/fzf/src/tui/tui.go	/^	CtrlH$/;"	c	package:tui
CtrlJ	plugged/fzf/src/tui/tui.go	/^	CtrlJ$/;"	c	package:tui
CtrlK	plugged/fzf/src/tui/tui.go	/^	CtrlK$/;"	c	package:tui
CtrlL	plugged/fzf/src/tui/tui.go	/^	CtrlL$/;"	c	package:tui
CtrlM	plugged/fzf/src/tui/tui.go	/^	CtrlM$/;"	c	package:tui
CtrlN	plugged/fzf/src/tui/tui.go	/^	CtrlN$/;"	c	package:tui
CtrlO	plugged/fzf/src/tui/tui.go	/^	CtrlO$/;"	c	package:tui
CtrlP	plugged/fzf/src/tui/tui.go	/^	CtrlP$/;"	c	package:tui
CtrlQ	plugged/fzf/src/tui/tui.go	/^	CtrlQ$/;"	c	package:tui
CtrlR	plugged/fzf/src/tui/tui.go	/^	CtrlR$/;"	c	package:tui
CtrlRightBracket	plugged/fzf/src/tui/tui.go	/^	CtrlRightBracket$/;"	c	package:tui
CtrlS	plugged/fzf/src/tui/tui.go	/^	CtrlS$/;"	c	package:tui
CtrlSlash	plugged/fzf/src/tui/tui.go	/^	CtrlSlash$/;"	c	package:tui
CtrlSpace	plugged/fzf/src/tui/tui.go	/^	CtrlSpace$/;"	c	package:tui
CtrlT	plugged/fzf/src/tui/tui.go	/^	CtrlT$/;"	c	package:tui
CtrlU	plugged/fzf/src/tui/tui.go	/^	CtrlU$/;"	c	package:tui
CtrlV	plugged/fzf/src/tui/tui.go	/^	CtrlV$/;"	c	package:tui
CtrlW	plugged/fzf/src/tui/tui.go	/^	CtrlW$/;"	c	package:tui
CtrlX	plugged/fzf/src/tui/tui.go	/^	CtrlX$/;"	c	package:tui
CtrlY	plugged/fzf/src/tui/tui.go	/^	CtrlY$/;"	c	package:tui
CtrlZ	plugged/fzf/src/tui/tui.go	/^	CtrlZ$/;"	c	package:tui
Cupdate	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cupdate call cargo#update(<q-args>)$/;"	c
Current	plugged/fzf/src/terminal.go	/^	Current    *StatusItem  `json:"current"`$/;"	m	struct:fzf.Status	typeref:typename:*StatusItem
Current	plugged/fzf/src/tui/tui.go	/^	Current          ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Current background color	plugged/seoul256.vim/README.md	/^Current background color$/;"	s
CurrentLineAndColumn	plugged/MatchTagAlways/python/mta_vim.py	/^def CurrentLineAndColumn():$/;"	f
CurrentMatch	plugged/fzf/src/tui/tui.go	/^	CurrentMatch     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Currently available language options	plugged/papercolor-theme/README.md	/^#### Currently available language options$/;"	t	subsection:🛠️ User Customization""Language-specific options
Currently available theme options	plugged/papercolor-theme/README.md	/^#### Currently available theme options$/;"	t	subsection:🛠️ User Customization""Theme Options
Cursor	plugged/fzf/src/tui/tui.go	/^	Cursor           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
CursorLine	plugged/fzf/src/options.go	/^	CursorLine   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
CursorMovement_BS_InEditMode	plugged/ultisnips/test/test_Movement.py	/^class CursorMovement_BS_InEditMode(_VimTest):$/;"	c
CursorMovement_Multiline_ECR	plugged/ultisnips/test/test_Movement.py	/^class CursorMovement_Multiline_ECR(_VimTest):$/;"	c
Custom completion	plugged/fzf.vim/README.md	/^Custom completion$/;"	s	chapter:fzf :heart: vim
Custom fuzzy completion	plugged/fzf/README.md	/^### Custom fuzzy completion$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Custom statusline	plugged/fzf.vim/README.md	/^### Custom statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Customization	plugged/fzf.vim/README.md	/^Customization$/;"	s	chapter:fzf :heart: vim
Customize Current Theme Colors	plugged/papercolor-theme/DESIGN.md	/^# Customize Current Theme Colors$/;"	c
Cycle	plugged/fzf/src/options.go	/^	Cycle        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Cython	plugged/validator.vim/pythonx/lints/cython.py	/^class Cython(Validator):$/;"	c
D	autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
D	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
D	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> D  :PlugDiff<cr>$/;"	m
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DEBUG	plugged/fzf/src/algo/algo.go	/^var DEBUG bool$/;"	v	package:algo	typeref:typename:bool
DEFAULT_TIMEOUT	plugged/fzf/test/test_go.rb	/^DEFAULT_TIMEOUT = 10$/;"	C
DESCRIPTION	plugged/fzf/man/man1/fzf-tmux.1	/^.SH DESCRIPTION$/;"	s	title:fzf\\-tmux
DESCRIPTION	plugged/fzf/man/man1/fzf.1	/^.SH DESCRIPTION$/;"	s	title:fzf
DIRNAME	plugged/completor.vim/pythonx/completers/python/__init__.py	/^DIRNAME = os.path.dirname(__file__)$/;"	v
DIST_DIR	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^var DIST_DIR = path.resolve(__dirname, path.join('node_modules', 'tern'));$/;"	v
DUMP_FILENAME	plugged/ultisnips/pythonx/UltiSnips/debug.py	/^DUMP_FILENAME = ($/;"	v
Dark	plugged/everforest/palette.md	/^### Dark$/;"	S	section:Color Palette and Highlighting Semantics""Palette Variants
Dark256	plugged/fzf/src/tui/tui.go	/^	Dark256   *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
DarkBg	plugged/fzf/src/tui/tui.go	/^	DarkBg           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Debugging	plugged/ultisnips/CONTRIBUTING.md	/^## Debugging$/;"	s	chapter:Contributing to UltiSnips
Debugging	plugged/validator.vim/README.md	/^Debugging$/;"	s	chapter:Validator
Default16	plugged/fzf/src/tui/tui.go	/^	Default16 *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
DefaultBorderShape	plugged/fzf/src/tui/dummy.go	/^var DefaultBorderShape = BorderRounded$/;"	v	package:tui
DefaultBorderShape	plugged/fzf/src/tui/tcell.go	/^var DefaultBorderShape BorderShape = BorderSharp$/;"	v	package:tui	typeref:typename:BorderShape
Definition	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class Definition(Completion):$/;"	c
Defmodule syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/defmodule_spec.rb	/^describe 'Defmodule syntax' do$/;"	d
Delete	plugged/fzf/src/tui/tui.go	/^	Delete$/;"	c	package:tui
DeleteCurrentTabStop1_JumpBack	plugged/ultisnips/test/test_Editing.py	/^class DeleteCurrentTabStop1_JumpBack(_VimTest):$/;"	c
DeleteCurrentTabStop2_JumpBack	plugged/ultisnips/test/test_Editing.py	/^class DeleteCurrentTabStop2_JumpBack(_VimTest):$/;"	c
DeleteCurrentTabStop3_JumpAround	plugged/ultisnips/test/test_Editing.py	/^class DeleteCurrentTabStop3_JumpAround(_VimTest):$/;"	c
DeleteLastTwoLinesInSnippet	plugged/ultisnips/test/test_Editing.py	/^class DeleteLastTwoLinesInSnippet(_VimTest):$/;"	c
DeleteSnippetInsertion0	plugged/ultisnips/test/test_Editing.py	/^class DeleteSnippetInsertion0(_VimTest):$/;"	c
DeleteSnippetInsertion1	plugged/ultisnips/test/test_Editing.py	/^class DeleteSnippetInsertion1(_VimTest):$/;"	c
Delimiter	plugged/fzf/src/options.go	/^	Delimiter    Delimiter$/;"	m	struct:fzf.Options	typeref:typename:Delimiter
Delimiter	plugged/fzf/src/tokenizer.go	/^type Delimiter struct {$/;"	s	package:fzf
Demo	plugged/fzf/README.md	/^### Demo$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Dependencies	plugged/fzf.vim/README.md	/^### Dependencies$/;"	S	section:fzf :heart: vim""Installation
Description	plugged/everforest/.github/pull_request_template.md	/^### Description$/;"	S
Description	plugged/splitjoin.vim/spec/support/rust.vim/README.md	/^## Description$/;"	s	chapter:rust.vim
Description	plugged/splitjoin.vim/spec/support/vim-elixir/README.md	/^## Description$/;"	s	chapter:vim-elixir
Description	plugged/vim-auto-save/README.md	/^## Description$/;"	s	chapter:AutoSave
Design Guideline	plugged/papercolor-theme/DESIGN.md	/^Design Guideline$/;"	c
Development	plugged/splitjoin.vim/spec/support/vim-elixir/README.md	/^## Development$/;"	s	chapter:vim-elixir
Dictionary	plugged/completor.vim/tests/conftest.py	/^    class Dictionary(object):$/;"	c	class:Vim
DidChange	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class DidChange(Base):$/;"	c
DidChangeConfiguration	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class DidChangeConfiguration(Base):$/;"	c
DidOpen	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class DidOpen(Base):$/;"	c
DidSave	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class DidSave(Base):$/;"	c
Differ	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^class Differ$/;"	c
Dim	plugged/fzf/src/tui/dummy.go	/^	Dim           = Attr(1 << 1)$/;"	c	package:tui
Dim	plugged/fzf/src/tui/tcell.go	/^	Dim                = Attr(tcell.AttrDim)$/;"	c	package:tui
Disabled	plugged/fzf/src/tui/tui.go	/^	Disabled         ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Display modes	plugged/fzf/ADVANCED.md	/^Display modes$/;"	s	chapter:Advanced fzf examples
Display modes	plugged/fzf/README.md	/^### Display modes$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
DoNotCrashOnUndoAndJumpInNestedSnippet	plugged/ultisnips/test/test_Editing.py	/^class DoNotCrashOnUndoAndJumpInNestedSnippet(_VimTest):$/;"	c
DoNotExpandAfterSpace_ExpectCorrectResult	plugged/ultisnips/test/test_Expand.py	/^class DoNotExpandAfterSpace_ExpectCorrectResult(_SimpleExpands):$/;"	c
DoNotTrimSpacesAtEndOfLinesByDefault	plugged/ultisnips/test/test_Chars.py	/^class DoNotTrimSpacesAtEndOfLinesByDefault(_VimTest):$/;"	c
DocumentSymbol	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class DocumentSymbol(Format):$/;"	c
Documentation	plugged/everforest/README.md	/^## Documentation$/;"	s
Documented	plugged/vim-coiled-snake/tests/test_label.py	/^class Documented:$/;"	c
Documenting	plugged/ultisnips/CONTRIBUTING.md	/^## Documenting$/;"	s	chapter:Contributing to UltiSnips
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
Double	plugged/fzf/src/tui/tui.go	/^	Double bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
DoubleClick	plugged/fzf/src/tui/tui.go	/^	DoubleClick$/;"	c	package:tui
Down	plugged/fzf/src/tui/tui.go	/^	Down   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Down	plugged/fzf/src/tui/tui.go	/^	Down$/;"	c	package:tui
DrawBorder	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) DrawBorder() {$/;"	f	struct:tui.LightWindow
DrawBorder	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) DrawBorder() {$/;"	f	struct:tui.TcellWindow
DrawBorder	plugged/fzf/src/tui/tui.go	/^	DrawBorder()$/;"	n	interface:tui.Window
DrawHBorder	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) DrawHBorder() {$/;"	f	struct:tui.LightWindow
DrawHBorder	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) DrawHBorder() {$/;"	f	struct:tui.TcellWindow
DrawHBorder	plugged/fzf/src/tui/tui.go	/^	DrawHBorder()$/;"	n	interface:tui.Window
DurWithin	plugged/fzf/src/util/util.go	/^func DurWithin($/;"	f	package:util	typeref:typename:time.Duration
Dynamic reloading of the list	plugged/fzf/ADVANCED.md	/^Dynamic reloading of the list$/;"	s	chapter:Advanced fzf examples
Dynamic tabstop generation	plugged/ultisnips/doc/examples/tabstop-generation/README.md	/^# Dynamic tabstop generation$/;"	c
EA	plugged/ultisnips/test/constant.py	/^EA = "#"  # Expand anonymous$/;"	v
ENVIRONMENT	plugged/fzf/man/man1/fzf.1	/^.SH ENVIRONMENT VARIABLES EXPORTED TO CHILD PROCESSES$/;"	s	title:fzf
ENVIRONMENT	plugged/fzf/man/man1/fzf.1	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:fzf
EOF	plugged/fzf/install	/^    cat >> "$src" << EOF$/;"	h
EOF	plugged/fzf/install	/^  cat << EOF$/;"	h
EOF	plugged/fzf/install	/^  cat > "$src" << EOF$/;"	h
EOF	plugged/fzf/install	/^  fish << EOF$/;"	h
EOF	plugged/fzf/uninstall	/^  cat << EOF$/;"	h
EOF	plugged/papercolor-theme/test/test.sh	/^cat > "${custom_rtp}\/.vimrc" <<- EOF$/;"	h
ESC	plugged/ultisnips/test/constant.py	/^ESC = "\\x1b"$/;"	v
EX	plugged/ultisnips/test/constant.py	/^EX = "\\t"  # EXPAND$/;"	v
EXCEPTION	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    EXCEPTION = 4$/;"	v	class:TextLogStep
EXIT	plugged/fzf/man/man1/fzf.1	/^.SH EXIT STATUS$/;"	s	title:fzf
EXTENDED	plugged/fzf/man/man1/fzf.1	/^.SH EXTENDED SEARCH MODE$/;"	s	title:fzf
Eatchar	vimrc	/^func Eatchar(pat)$/;"	f
EctoEnum	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/ecto_spec.rb	/^describe 'EctoEnum' do$/;"	d
EditableTextObject	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^class EditableTextObject(TextObject):$/;"	c
EexBuffer	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^module EexBuffer$/;"	m
Elixir	plugged/completor.vim/README.md	/^#### Elixir$/;"	t	section:Completor""Completers
Ellipsis	plugged/fzf/src/options.go	/^	Ellipsis     string$/;"	m	struct:fzf.Options	typeref:typename:string
Emacs color theme	plugged/seoul256.vim/README.md	/^Emacs color theme$/;"	s
Embedded Elixir syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/embedded_elixir_spec.rb	/^describe 'Embedded Elixir syntax' do$/;"	d
EmptyMerger	plugged/fzf/src/merger.go	/^func EmptyMerger(revision revision) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
EmptyTheme	plugged/fzf/src/tui/tui.go	/^func EmptyTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
Enable LSP	plugged/completor.vim/README.md	/^#### Enable LSP$/;"	t	section:Completor""Tips
Enable the remote debug server	plugged/ultisnips/CONTRIBUTING.md	/^### Enable the remote debug server$/;"	S	section:Contributing to UltiSnips""Testing
Enabled	plugged/fzf/src/terminal.go	/^func (s resumableState) Enabled() bool {$/;"	f	type:fzf.resumableState	typeref:typename:bool
Enclose	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
Enclose	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.TcellWindow	typeref:typename:bool
Enclose	plugged/fzf/src/tui/tui.go	/^	Enclose(y int, x int) bool$/;"	n	interface:tui.Window	typeref:typename:bool
End	plugged/fzf/src/algo/algo.go	/^	End   int$/;"	m	struct:algo.Result	typeref:typename:int
End	plugged/fzf/src/tui/tui.go	/^	End$/;"	c	package:tui
EndOfTextToken	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^class EndOfTextToken(Token):$/;"	c
Enforcement	plugged/splitjoin.vim/CODE_OF_CONDUCT.md	/^## Enforcement$/;"	s	chapter:Contributor Covenant Code of Conduct
Environment variables	plugged/fzf/README.md	/^### Environment variables$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Environment variables / Aliases	plugged/fzf/README.md	/^### Environment variables \/ Aliases$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
EqualMatch	plugged/fzf/src/algo/algo.go	/^func EqualMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []ru/;"	f	package:algo	typeref:typename:(Result, *[]int)
Erase	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Erase() {$/;"	f	struct:tui.LightWindow
Erase	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Erase() {$/;"	f	struct:tui.TcellWindow
Erase	plugged/fzf/src/tui/tui.go	/^	Erase()$/;"	n	interface:tui.Window
EraseMaybe	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) EraseMaybe() bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
EraseMaybe	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) EraseMaybe() bool {$/;"	f	struct:tui.TcellWindow	typeref:typename:bool
EraseMaybe	plugged/fzf/src/tui/tui.go	/^	EraseMaybe() bool$/;"	n	interface:tui.Window	typeref:typename:bool
Error	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^class Error(Exception):$/;"	c
Error checking with [Syntastic][syn]	plugged/splitjoin.vim/spec/support/rust.vim/README.md	/^### Error checking with [Syntastic][syn]$/;"	S	section:rust.vim""Features
EsLint	plugged/validator.vim/pythonx/lints/javascript/eslint.py	/^class EsLint(Validator):$/;"	c
Esc	plugged/fzf/src/tui/tui.go	/^	Esc$/;"	c	package:tui
EscapeCharToken	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^class EscapeCharToken(Token):$/;"	c
EscapedChar	plugged/ultisnips/pythonx/UltiSnips/text_objects/escaped_char.py	/^class EscapedChar(NoneditableTextObject):$/;"	c
Event	plugged/fzf/src/tui/tui.go	/^type Event struct {$/;"	s	package:tui
EventBox	plugged/fzf/src/util/eventbox.go	/^type EventBox struct {$/;"	s	package:util
EventType	plugged/fzf/src/tui/tui.go	/^type EventType int$/;"	t	package:tui	typeref:typename:int
EventType	plugged/fzf/src/util/eventbox.go	/^type EventType int$/;"	t	package:util	typeref:typename:int
Events	plugged/fzf/src/util/eventbox.go	/^type Events map[EventType]interface{}$/;"	t	package:util	typeref:typename:map[EventType]interface{}
EvtHeader	plugged/fzf/src/constants.go	/^	EvtHeader$/;"	c	package:fzf
EvtQuit	plugged/fzf/src/constants.go	/^	EvtQuit$/;"	c	package:fzf
EvtReadFin	plugged/fzf/src/constants.go	/^	EvtReadFin$/;"	c	package:fzf
EvtReadFin	plugged/fzf/src/util/eventbox_test.go	/^	EvtReadFin$/;"	c	package:util
EvtReadNew	plugged/fzf/src/constants.go	/^	EvtReadNew util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
EvtReadNew	plugged/fzf/src/util/eventbox_test.go	/^	EvtReadNew EventType = iota$/;"	c	package:util	typeref:typename:EventType
EvtReadNone	plugged/fzf/src/constants.go	/^	EvtReadNone$/;"	c	package:fzf
EvtReady	plugged/fzf/src/constants.go	/^	EvtReady$/;"	c	package:fzf
EvtSearchFin	plugged/fzf/src/constants.go	/^	EvtSearchFin$/;"	c	package:fzf
EvtSearchFin	plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchFin$/;"	c	package:util
EvtSearchNew	plugged/fzf/src/constants.go	/^	EvtSearchNew$/;"	c	package:fzf
EvtSearchNew	plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchNew$/;"	c	package:util
EvtSearchProgress	plugged/fzf/src/constants.go	/^	EvtSearchProgress$/;"	c	package:fzf
EvtSearchProgress	plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchProgress$/;"	c	package:util
ExBuffer	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^module ExBuffer$/;"	m
ExUnit syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/exunit_spec.rb	/^describe 'ExUnit syntax' do$/;"	d
ExactMatchNaive	plugged/fzf/src/algo/algo.go	/^func ExactMatchNaive(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern/;"	f	package:algo	typeref:typename:(Result, *[]int)
Example: Customizing `Files` command	plugged/fzf.vim/README.md	/^#### Example: Customizing `Files` command$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: `git grep` wrapper	plugged/fzf.vim/README.md	/^#### Example: `git grep` wrapper$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Examples	plugged/fzf/README-VIM.md	/^#### Examples$/;"	t	subsection:FZF Vim integration""`:FZF[!]`""Configuration
Examples	plugged/fzf/README.md	/^Examples$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
ExclusiveSelection_RealWorldCase_Test	plugged/ultisnips/test/test_Selection.py	/^class ExclusiveSelection_RealWorldCase_Test(_ES_Base):$/;"	c
ExclusiveSelection_SimpleTabstop_Test	plugged/ultisnips/test/test_Selection.py	/^class ExclusiveSelection_SimpleTabstop_Test(_ES_Base):$/;"	c
ExecCommand	plugged/fzf/src/util/util_unix.go	/^func (x *Executor) ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	struct:util.Executor	typeref:typename:*exec.Cmd
ExecCommand	plugged/fzf/src/util/util_windows.go	/^func (x *Executor) ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	struct:util.Executor	typeref:typename:*exec.Cmd
Executing external programs	plugged/fzf/README.md	/^### Executing external programs$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
Executor	plugged/fzf/src/util/util_unix.go	/^type Executor struct {$/;"	s	package:util
Executor	plugged/fzf/src/util/util_windows.go	/^type Executor struct {$/;"	s	package:util
Exit0	plugged/fzf/src/options.go	/^	Exit0        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
ExitBecome	plugged/fzf/src/constants.go	/^	ExitBecome    = 126$/;"	c	package:fzf
ExitError	plugged/fzf/src/constants.go	/^	ExitError     = 2$/;"	c	package:fzf
ExitInterrupt	plugged/fzf/src/constants.go	/^	ExitInterrupt = 130$/;"	c	package:fzf
ExitNoMatch	plugged/fzf/src/constants.go	/^	ExitNoMatch   = 1$/;"	c	package:fzf
ExitOk	plugged/fzf/src/constants.go	/^	ExitOk        = 0$/;"	c	package:fzf
ExitSnippetModeAfterTabstopZero	plugged/ultisnips/test/test_Expand.py	/^class ExitSnippetModeAfterTabstopZero(_VimTest):$/;"	c
ExpandInTheMiddleOfLine_ExpectCorrectResult	plugged/ultisnips/test/test_Expand.py	/^class ExpandInTheMiddleOfLine_ExpectCorrectResult(_SimpleExpands):$/;"	c
Expect	plugged/fzf/src/options.go	/^	Expect       map[tui.Event]string$/;"	m	struct:fzf.Options	typeref:typename:map[tui.Event]string
Expected	plugged/splitjoin.vim/spec/support/vim-elixir/ISSUE_TEMPLATE.md	/^# Expected$/;"	c
Explanation of `g:fzf_colors`	plugged/fzf/README-VIM.md	/^##### Explanation of `g:fzf_colors`$/;"	T	subsubsection:FZF Vim integration""`:FZF[!]`""Configuration""Examples
Extended	plugged/fzf/src/options.go	/^	Extended     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Extended Colors	plugged/papercolor-theme/DESIGN.md	/^## Extended Colors$/;"	s	chapter:Color Names
F1	plugged/fzf/src/tui/tui.go	/^	F1$/;"	c	package:tui
F10	plugged/fzf/src/tui/tui.go	/^	F10$/;"	c	package:tui
F11	plugged/fzf/src/tui/tui.go	/^	F11$/;"	c	package:tui
F12	plugged/fzf/src/tui/tui.go	/^	F12$/;"	c	package:tui
F2	plugged/fzf/src/tui/tui.go	/^	F2$/;"	c	package:tui
F3	plugged/fzf/src/tui/tui.go	/^	F3$/;"	c	package:tui
F4	plugged/fzf/src/tui/tui.go	/^	F4$/;"	c	package:tui
F5	plugged/fzf/src/tui/tui.go	/^	F5$/;"	c	package:tui
F6	plugged/fzf/src/tui/tui.go	/^	F6$/;"	c	package:tui
F7	plugged/fzf/src/tui/tui.go	/^	F7$/;"	c	package:tui
F8	plugged/fzf/src/tui/tui.go	/^	F8$/;"	c	package:tui
F9	plugged/fzf/src/tui/tui.go	/^	F9$/;"	c	package:tui
FAILED	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    FAILED = 2$/;"	v	class:JobLog
FAILED	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    FAILED = 255$/;"	v	class:Job
FAQ	plugged/MatchTagAlways/README.md	/^## FAQ$/;"	s	chapter:Always highlight enclosing tags
FAQ	plugged/vim-commentary/README.markdown	/^## FAQ$/;"	s	chapter:commentary.vim
FAQ	plugged/vim-fugitive/README.markdown	/^## FAQ$/;"	s	chapter:fugitive.vim
FAQ	plugged/vim-surround/README.markdown	/^## FAQ$/;"	s	chapter:surround.vim
FIELD	plugged/fzf/man/man1/fzf.1	/^.SH FIELD INDEX EXPRESSION$/;"	s	title:fzf
FIFONAME	plugged/fzf/test/test_go.rb	/^  FIFONAME = Dir::Tmpname.create(%w[fzf-fifo]) {}$/;"	C	class:TestBase
FILE	plugged/fzf/test/test_go.rb	/^FILE = File.expand_path(__FILE__)$/;"	C
FILESIZE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^	set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FOLD_PLACEHOLDER	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  FOLD_PLACEHOLDER = '<!-- FOLD -->'.freeze$/;"	C	class:Buffer
FORWARD	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    FORWARD = 1$/;"	v	class:JumpDirection
FOSimple_Break_ExpectCorrectResult	plugged/ultisnips/test/test_Format.py	/^class FOSimple_Break_ExpectCorrectResult(_FormatoptionsBase):$/;"	c
FOTextAfter_ExpectCorrectResult	plugged/ultisnips/test/test_Format.py	/^class FOTextAfter_ExpectCorrectResult(_FormatoptionsBase):$/;"	c
FOTextBeforeAndAfter_ExpectCorrectResult	plugged/ultisnips/test/test_Format.py	/^class FOTextBeforeAndAfter_ExpectCorrectResult(_FormatoptionsBase):$/;"	c
FOWrapOnLongWord_ExpectCorrectResult	plugged/ultisnips/test/test_Format.py	/^class FOWrapOnLongWord_ExpectCorrectResult(_FormatoptionsBase):$/;"	c
FZF	plugged/fzf/plugin/fzf.vim	/^command! -nargs=* -complete=dir -bang FZF call s:cmd(<bang>0, <f-args>)$/;"	c
FZF	plugged/fzf/test/test_go.rb	/^FZF = "FZF_DEFAULT_OPTS=\\"--no-scrollbar --pointer \\\\> --marker \\\\>\\" FZF_DEFAULT_COMMAND=/;"	C
FZF Vim integration	plugged/fzf/README-VIM.md	/^FZF Vim integration$/;"	c
FailureClassification	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class FailureClassification(NamedModel):$/;"	c
FailureLine	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class FailureLine(models.Model):$/;"	c
FailuresQuerySet	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class FailuresQuerySet(models.QuerySet):$/;"	c
Fatal	plugged/fzf/src/tui/tui.go	/^	Fatal$/;"	c	package:tui
Feature Wishlist	plugged/splitjoin.vim/spec/support/vim-elixir/README.md	/^### Feature Wishlist$/;"	S	section:vim-elixir""Development
Features	plugged/everforest/README.md	/^### Features$/;"	S	section:Introduction
Features	plugged/splitjoin.vim/spec/support/rust.vim/README.md	/^## Features$/;"	s	chapter:rust.vim
Features	plugged/splitjoin.vim/spec/support/vim-elm-syntax/README.md	/^## Features$/;"	s	chapter:vim-elm-syntax
Features	plugged/vim-lastplace/README.md	/^## Features$/;"	s	chapter:vim-lastplace v4.6.0
Fg	plugged/fzf/src/tui/tui.go	/^	Fg               ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Fg	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Fg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
FileWord	plugged/fzf/src/options.go	/^	FileWord     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Filename	plugged/completor.vim/README.md	/^#### Filename$/;"	t	section:Completor""Completers
Filename	plugged/completor.vim/pythonx/completers/common/filename.py	/^class Filename(Completor):$/;"	c
Files and directories	plugged/fzf/README.md	/^### Files and directories$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Files listed in `git status`	plugged/fzf/ADVANCED.md	/^### Files listed in `git status`$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Fill	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Fill(text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
Fill	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Fill(str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
Fill	plugged/fzf/src/tui/tui.go	/^	Fill(text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
FillContinue	plugged/fzf/src/tui/tui.go	/^	FillContinue FillReturn = iota$/;"	c	package:tui	typeref:type:FillReturn
FillNextLine	plugged/fzf/src/tui/tui.go	/^	FillNextLine$/;"	c	package:tui
FillReturn	plugged/fzf/src/tui/tui.go	/^type FillReturn int$/;"	t	package:tui	typeref:typename:int
FillSuspend	plugged/fzf/src/tui/tui.go	/^	FillSuspend$/;"	c	package:tui
Filter	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^    class Filter(object):$/;"	c	function:main	file:
Filter	plugged/fzf/src/options.go	/^	Filter       *string$/;"	m	struct:fzf.Options	typeref:typename:*string
FindIndex	plugged/fzf/src/merger.go	/^func (mg *Merger) FindIndex(itemIndex int32) int {$/;"	f	struct:fzf.Merger	typeref:typename:int
FinishFill	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) FinishFill() {$/;"	f	struct:tui.LightWindow
FinishFill	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) FinishFill() {$/;"	f	struct:tui.TcellWindow
FinishFill	plugged/fzf/src/tui/tui.go	/^	FinishFill()$/;"	n	interface:tui.Window
First	plugged/fzf/src/merger.go	/^func (mg *Merger) First() Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
Fish	plugged/fzf/src/options.go	/^	Fish         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Fish shell	plugged/fzf/README.md	/^### Fish shell$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Tips
Fixes and improvements	plugged/fzf/CHANGELOG.md	/^### Fixes and improvements$/;"	S	section:CHANGELOG""0.10.2
Focus	plugged/fzf/src/tui/tui.go	/^	Focus$/;"	c	package:tui
FoldOverwrite_Simple_ECR	plugged/ultisnips/test/test_Folding.py	/^class FoldOverwrite_Simple_ECR(_VimTest):$/;"	c
Fold_DeleteMiddleLine_ECR	plugged/ultisnips/test/test_Folding.py	/^class Fold_DeleteMiddleLine_ECR(_VimTest):$/;"	c
FoldingEnabled_SnippetWithFold_ExpectNoFolding	plugged/ultisnips/test/test_Folding.py	/^class FoldingEnabled_SnippetWithFold_ExpectNoFolding(_VimTest):$/;"	c
Foo	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^        module Foo$/;"	m
Foo	plugged/vim-coiled-snake/tests/corner_cases/one_line_docstring.py	/^class Foo:$/;"	c
Foo	plugged/vim-coiled-snake/tests/easy/class.py	/^class Foo:$/;"	c
Foo	plugged/vim-coiled-snake/tests/issues/test_7.py	/^class Foo:$/;"	c
Foo	plugged/vim-coiled-snake/tests/speed/big_fold.py	/^class Foo:$/;"	c
Foo	plugged/vim-coiled-snake/tests/test_blocks.py	/^class Foo:$/;"	c
Foo::Bar::Baz	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^        RSpec.describe Foo::Bar::Baz do$/;"	d
Force	plugged/fzf/src/terminal.go	/^func (s *resumableState) Force(flag bool) {$/;"	f	type:fzf.resumableState
ForceTtyIn	plugged/fzf/src/options.go	/^	ForceTtyIn   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Foreground Colors (palette2)	plugged/everforest/palette.md	/^#### Foreground Colors (palette2)$/;"	t	subsection:Color Palette and Highlighting Semantics""Palette Variants""Dark
Foreground Colors (palette2)	plugged/everforest/palette.md	/^#### Foreground Colors (palette2)$/;"	t	subsection:Color Palette and Highlighting Semantics""Palette Variants""Light
Format	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class Format(Base):$/;"	c
FormatRmd	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rmd.vim	/^function! FormatRmd()$/;"	f
FormatRrst	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rrst.vim	/^function! FormatRrst()$/;"	f
Formatting with [rustfmt][rfmt]	plugged/splitjoin.vim/spec/support/rust.vim/README.md	/^### Formatting with [rustfmt][rfmt]$/;"	S	section:rust.vim""Features
ForwardFindTag	plugged/MatchTagAlways/python/mta_core.py	/^def ForwardFindTag( text, from_position ):$/;"	f
FugitiveActualDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveActualDir(...) abort$/;"	f
FugitiveCommonDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveCommonDir(...) abort$/;"	f
FugitiveConfig	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfig(...) abort$/;"	f
FugitiveConfigGet	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGet(name, ...) abort$/;"	f
FugitiveConfigGetAll	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetAll(name, ...) abort$/;"	f
FugitiveConfigGetRegexp	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetRegexp(pattern, ...) abort$/;"	f
FugitiveDetect	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveDetect(...) abort$/;"	f
FugitiveDidChange	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveDidChange(...) abort$/;"	f
FugitiveExecute	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveExecute(args, ...) abort$/;"	f
FugitiveExtractGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveExtractGitDir(path) abort$/;"	f
FugitiveFind	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveFind(...) abort$/;"	f
FugitiveGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitDir(...) abort$/;"	f
FugitiveGitPath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitPath(path) abort$/;"	f
FugitiveGitVersion	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitVersion(...) abort$/;"	f
FugitiveHead	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveHead(...) abort$/;"	f
FugitiveIsGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveIsGitDir(...) abort$/;"	f
FugitiveParse	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveParse(...) abort$/;"	f
FugitivePath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePath(...) abort$/;"	f
FugitiveReal	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveReal(...) abort$/;"	f
FugitiveRemote	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveRemote(...) abort$/;"	f
FugitiveRemoteUrl	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveRemoteUrl(...) abort$/;"	f
FugitiveResult	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveResult(...) abort$/;"	f
FugitiveShellCommand	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveShellCommand(...) abort$/;"	f
FugitiveStatusline	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveStatusline(...) abort$/;"	f
FugitiveVimPath	plugged/vim-fugitive/plugin/fugitive.vim	/^    function! FugitiveVimPath(path) abort$/;"	f
FugitiveVimPath	plugged/vim-fugitive/plugin/fugitive.vim	/^  function FugitiveVimPath(path) abort$/;"	f
FugitiveWorkTree	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveWorkTree(...) abort$/;"	f
FullscreenRenderer	plugged/fzf/src/tui/tui.go	/^type FullscreenRenderer struct {$/;"	s	package:tui
Function	plugged/completor.vim/tests/conftest.py	/^    def Function(self, func_name):$/;"	m	class:Vim
Fuzzy	plugged/fzf/src/options.go	/^	Fuzzy        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Fuzzy completion for bash and zsh	plugged/fzf/README.md	/^Fuzzy completion for bash and zsh$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
FuzzyAlgo	plugged/fzf/src/options.go	/^	FuzzyAlgo    algo.Algo$/;"	m	struct:fzf.Options	typeref:typename:algo.Algo
FuzzyMatchV1	plugged/fzf/src/algo/algo.go	/^func FuzzyMatchV1(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []/;"	f	package:algo	typeref:typename:(Result, *[]int)
FuzzyMatchV2	plugged/fzf/src/algo/algo.go	/^func FuzzyMatchV2(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern [/;"	f	package:algo	typeref:typename:(Result, *[]int)
G	plugged/vim-fugitive/plugin/fugitive.vim	/^  command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Comm/;"	c
GO	plugged/fzf/Makefile	/^GO             ?= go$/;"	m
GOOS	plugged/fzf/Makefile	/^GOOS           ?= $(shell $(GO) env GOOS)$/;"	m
GTAGS_EXE	plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^	set GTAGS_EXE=%~2$/;"	v
GTabularize	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^   \\ GTabularize <line1>,<line2>$/;"	c
GenStage	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^defmodule GenStage do$/;"	m
Generating fzf color theme from Vim color schemes	plugged/fzf/ADVANCED.md	/^### Generating fzf color theme from Vim color schemes$/;"	S	section:Advanced fzf examples""Color themes
Get	plugged/fzf/src/merger.go	/^func (mg *Merger) Get(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
Get	plugged/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Get() bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Get	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Get(i int) rune {$/;"	f	struct:util.Chars	typeref:typename:rune
GetChar	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) GetChar() Event { return Event{} }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) GetChar() Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
GetChar	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) GetChar() Event {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	plugged/fzf/src/tui/tui.go	/^	GetChar() Event$/;"	n	interface:tui.Renderer	typeref:typename:Event
GetCorrectRHelpIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rhelp.vim	/^function GetCorrectRHelpIndent()$/;"	f
GetEelixirIndent	plugged/splitjoin.vim/spec/support/vim-elixir/indent/eelixir.vim	/^function! GetEelixirIndent(...)$/;"	f
GetElmIndent	plugged/splitjoin.vim/spec/support/vim-elm-syntax/indent/elm.vim	/^function! GetElmIndent()$/;"	f
GetJavascriptIndent	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function GetJavascriptIndent()$/;"	f
GetNextUnmatchedClosingTag	plugged/MatchTagAlways/python/mta_core.py	/^def GetNextUnmatchedClosingTag( html, cursor_offset ):$/;"	f
GetNextUnmatchedClosingTag_Nested_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def GetNextUnmatchedClosingTag_Nested_test():$/;"	f
GetNextUnmatchedClosingTag_NoClosingTagFail_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def GetNextUnmatchedClosingTag_NoClosingTagFail_test():$/;"	f
GetNextUnmatchedClosingTag_NoOpeningTagFail_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def GetNextUnmatchedClosingTag_NoOpeningTagFail_test():$/;"	f
GetNextUnmatchedClosingTag_OnAngleBracket_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def GetNextUnmatchedClosingTag_OnAngleBracket_test():$/;"	f
GetNextUnmatchedClosingTag_OrphanOpeningTag_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def GetNextUnmatchedClosingTag_OrphanOpeningTag_test():$/;"	f
GetNextUnmatchedClosingTag_Simple_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def GetNextUnmatchedClosingTag_Simple_test():$/;"	f
GetOpeningAndClosingTags	plugged/MatchTagAlways/python/mta_core.py	/^def GetOpeningAndClosingTags( html, cursor_offset ):$/;"	f
GetPreviousUnmatchedOpeningTag	plugged/MatchTagAlways/python/mta_core.py	/^def GetPreviousUnmatchedOpeningTag( html, cursor_offset ):$/;"	f
GetPreviousUnmatchedOpeningTag_NestedMultiLine_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def GetPreviousUnmatchedOpeningTag_NestedMultiLine_test():$/;"	f
GetPreviousUnmatchedOpeningTag_Nested_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def GetPreviousUnmatchedOpeningTag_Nested_test():$/;"	f
GetPreviousUnmatchedOpeningTag_OnAngleBracket_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def GetPreviousUnmatchedOpeningTag_OnAngleBracket_test():$/;"	f
GetPreviousUnmatchedOpeningTag_OrphanOpeningTag_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def GetPreviousUnmatchedOpeningTag_OrphanOpeningTag_test():$/;"	f
GetPreviousUnmatchedOpeningTag_Simple_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def GetPreviousUnmatchedOpeningTag_Simple_test():$/;"	f
GetRHelpIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rhelp.vim	/^function GetRHelpIndent()$/;"	f
GetRIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^function GetRIndent()$/;"	f
GetRmdIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rmd.vim	/^function GetRmdIndent()$/;"	f
GetRnowebIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rnoweb.vim	/^function GetRnowebIndent()$/;"	f
GetRrstIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rrst.vim	/^function GetRrstIndent()$/;"	f
GetRstIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rrst.vim	/^function GetRstIndent()$/;"	f
GetRustIndent	plugged/splitjoin.vim/spec/support/rust.vim/indent/rust.vim	/^function GetRustIndent(lnum)$/;"	f
Git	plugged/vim-fugitive/plugin/fugitive.vim	/^command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Comman/;"	c
Global options supported by `fzf#wrap`	plugged/fzf/README-VIM.md	/^### Global options supported by `fzf#wrap`$/;"	S	section:FZF Vim integration""`fzf#wrap`
Go	plugged/completor.vim/pythonx/completers/go.py	/^class Go(Completor):$/;"	c
GoFmtLint	plugged/validator.vim/pythonx/lints/go/gofmt.py	/^class GoFmtLint(Validator):$/;"	c
Golang practices (without using lsp)	plugged/completor.vim/README.md	/^#### Golang practices (without using lsp)$/;"	t	section:Completor""Tips
Golangci	plugged/validator.vim/pythonx/lints/go/golangci.py	/^class Golangci(Validator):$/;"	c
GolintLint	plugged/validator.vim/pythonx/lints/go/golint.py	/^class GolintLint(Validator):$/;"	c
Gometalinter	plugged/validator.vim/pythonx/lints/go/gometalinter.py	/^class Gometalinter(Validator):$/;"	c
Group	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class Group(models.Model):$/;"	c
Gutentags	plugged/vim-gutentags/README.md	/^# Gutentags$/;"	c
GutentagsToggleEnabled	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsUpdate	plugged/vim-gutentags/autoload/gutentags.vim	/^    command! -buffer -bang GutentagsUpdate :call s:manual_update_tags(<bang>0)$/;"	c
Gutter	plugged/fzf/src/tui/tui.go	/^	Gutter           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HAS_YARN	plugged/completor.vim/Makefile	/^HAS_YARN := $(shell which yarn)$/;"	m
HIGHLIGHT_GROUP_MAP	plugged/completor.vim/pythonx/completor/utils.py	/^    HIGHLIGHT_GROUP_MAP = {$/;"	v	class:_highlight
HasBg	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) HasBg() bool {$/;"	f	struct:tui.ColorPair	typeref:typename:bool
HasFullscreenRenderer	plugged/fzf/src/tui/dummy.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
HasFullscreenRenderer	plugged/fzf/src/tui/tcell.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
HasLeft	plugged/fzf/src/tui/tui.go	/^func (s BorderShape) HasLeft() bool {$/;"	f	type:tui.BorderShape	typeref:typename:bool
HasRight	plugged/fzf/src/tui/tui.go	/^func (s BorderShape) HasRight() bool {$/;"	f	type:tui.BorderShape	typeref:typename:bool
HasTop	plugged/fzf/src/tui/tui.go	/^func (s BorderShape) HasTop() bool {$/;"	f	type:tui.BorderShape	typeref:typename:bool
Header	plugged/fzf/src/options.go	/^	Header       []string$/;"	m	struct:fzf.Options	typeref:typename:[]string
Header	plugged/fzf/src/tui/tui.go	/^	Header           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HeaderFirst	plugged/fzf/src/options.go	/^	HeaderFirst  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
HeaderLines	plugged/fzf/src/options.go	/^	HeaderLines  int$/;"	m	struct:fzf.Options	typeref:typename:int
Height	plugged/fzf/src/options.go	/^	Height       heightSpec$/;"	m	struct:fzf.Options	typeref:typename:heightSpec
Height	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Height() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Height	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Height() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Height	plugged/fzf/src/tui/tui.go	/^	Height() int$/;"	n	interface:tui.Window	typeref:typename:int
HelloCompleter	plugged/completor.vim/tests/test_completor.py	/^class HelloCompleter(Completor):$/;"	c
Help	plugged/fzf/src/options.go	/^	Help         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Help	plugged/splitjoin.vim/spec/support/rust.vim/README.md	/^## Help$/;"	s	chapter:rust.vim
HexToColor	plugged/fzf/src/tui/tui.go	/^func HexToColor(rrggbb string) Color {$/;"	f	package:tui	typeref:typename:Color
HiLink	plugged/splitjoin.vim/spec/support/vim-javascript/extras/flow.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/splitjoin.vim/spec/support/vim-javascript/extras/flow.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/splitjoin.vim/spec/support/vim-javascript/extras/jsdoc.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/splitjoin.vim/spec/support/vim-javascript/extras/jsdoc.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugged/splitjoin.vim/spec/support/vim-javascript/syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	plugged/splitjoin.vim/spec/support/vim-javascript/syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
Hide statusline	plugged/fzf.vim/README.md	/^### Hide statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Hide statusline	plugged/fzf/README-VIM.md	/^### Hide statusline$/;"	S	section:FZF Vim integration""Tips
Highlights	plugged/everforest/palette.md	/^## Highlights$/;"	s	chapter:Color Palette and Highlighting Semantics
History	plugged/fzf/src/history.go	/^type History struct {$/;"	s	package:fzf
History	plugged/fzf/src/options.go	/^	History      *History$/;"	m	struct:fzf.Options	typeref:typename:*History
Home	plugged/fzf/src/tui/tui.go	/^	Home$/;"	c	package:tui
Host names	plugged/fzf/README.md	/^### Host names$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Hover	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class Hover(Completion):$/;"	c
How?	plugged/vim-gutentags/README.md	/^## How?$/;"	s	chapter:Gutentags
Hscroll	plugged/fzf/src/options.go	/^	Hscroll      bool$/;"	m	struct:fzf.Options	typeref:typename:bool
HscrollOff	plugged/fzf/src/options.go	/^	HscrollOff   int$/;"	m	struct:fzf.Options	typeref:typename:int
I've noticed that sometimes no tags are highlighted. Why?	plugged/MatchTagAlways/README.md	/^### I've noticed that sometimes no tags are highlighted. Why?$/;"	S	section:Always highlight enclosing tags""FAQ
I16	plugged/fzf/src/util/slab.go	/^	I16 []int16$/;"	m	struct:util.Slab	typeref:typename:[]int16
I32	plugged/fzf/src/util/slab.go	/^	I32 []int32$/;"	m	struct:util.Slab	typeref:typename:[]int32
IMAGE	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^IMAGE = "%s:%s" % (REPO, TAG)$/;"	v
IMMoving_AcceptInputWhenMoved_ECR	plugged/ultisnips/test/test_Movement.py	/^class IMMoving_AcceptInputWhenMoved_ECR(_VimTest):$/;"	c
IMMoving_CursorsKeys_ECR	plugged/ultisnips/test/test_Movement.py	/^class IMMoving_CursorsKeys_ECR(_VimTest):$/;"	c
IMMoving_ExitWhenOutsideAbove_ECR	plugged/ultisnips/test/test_Movement.py	/^class IMMoving_ExitWhenOutsideAbove_ECR(_VimTest):$/;"	c
IMMoving_ExitWhenOutsideBelow_ECR	plugged/ultisnips/test/test_Movement.py	/^class IMMoving_ExitWhenOutsideBelow_ECR(_VimTest):$/;"	c
IMMoving_ExitWhenOutsideLeft_ECR	plugged/ultisnips/test/test_Movement.py	/^class IMMoving_ExitWhenOutsideLeft_ECR(_VimTest):$/;"	c
IMMoving_ExitWhenOutsideRight_ECR	plugged/ultisnips/test/test_Movement.py	/^class IMMoving_ExitWhenOutsideRight_ECR(_VimTest):$/;"	c
IMMoving_NoExitingEventAtEnd_ECR	plugged/ultisnips/test/test_Movement.py	/^class IMMoving_NoExitingEventAtEnd_ECR(_VimTest):$/;"	c
IMMoving_NoExiting_ECR	plugged/ultisnips/test/test_Movement.py	/^class IMMoving_NoExiting_ECR(_VimTest):$/;"	c
IMMoving_NotExitingWhenBarelyOutsideLeft_ECR	plugged/ultisnips/test/test_Movement.py	/^class IMMoving_NotExitingWhenBarelyOutsideLeft_ECR(_VimTest):$/;"	c
INDEX_WHOLE_PROJECT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
Implementation	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class Implementation(Completion):$/;"	c
Implementation	plugged/ultisnips/doc/examples/autojump-if-empty/README.md	/^## Implementation$/;"	s	chapter:Autojump from tabstop when it's empty
Improvements	plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.10
Improvements	plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.3
Improvements	plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.4
Improvements	plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.5
IndentUtil	plugged/ultisnips/pythonx/UltiSnips/indent_util.py	/^class IndentUtil:$/;"	c
Indentation Specific	plugged/splitjoin.vim/spec/support/vim-javascript/README.md	/^## Indentation Specific$/;"	s	chapter:vim-javascript
Indentation bugs	plugged/splitjoin.vim/spec/support/R-Vim-runtime/README.md	/^### Indentation bugs$/;"	S	section:R-Vim-runtime""Known bugs
Indenting *after* comments	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/comment_spec.rb	/^describe 'Indenting *after* comments' do$/;"	d
Indenting Ecto queries	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/ecto_queries_spec.rb	/^describe 'Indenting Ecto queries' do$/;"	d
Indenting anonymous functions	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^describe 'Indenting anonymous functions' do$/;"	d
Indenting blocks	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/blocks_spec.rb	/^describe 'Indenting blocks' do$/;"	d
Indenting case statements	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/case_spec.rb	/^describe 'Indenting case statements' do$/;"	d
Indenting cond statements	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/cond_spec.rb	/^describe 'Indenting cond statements' do$/;"	d
Indenting documentation	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/documentation_spec.rb	/^describe 'Indenting documentation' do$/;"	d
Indenting eelixir	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/embedded_elixir_spec.rb	/^describe 'Indenting eelixir' do$/;"	d
Indenting if clauses	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/if_spec.rb	/^describe 'Indenting if clauses' do$/;"	d
Indenting lists	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^describe 'Indenting lists' do$/;"	d
Indenting pipeline	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/pipeline_spec.rb	/^describe 'Indenting pipeline' do$/;"	d
Indenting strings	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/string_spec.rb	/^describe 'Indenting strings' do$/;"	d
Indenting tuples	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/tuples_spec.rb	/^describe 'Indenting tuples' do$/;"	d
Index	plugged/fzf/src/item.go	/^func (item *Item) Index() int32 {$/;"	f	struct:fzf.Item	typeref:typename:int32
Index	plugged/fzf/src/result.go	/^func (result *Result) Index() int32 {$/;"	f	struct:fzf.Result	typeref:typename:int32
Index	plugged/fzf/src/terminal.go	/^	Index int    `json:"index"`$/;"	m	struct:fzf.StatusItem	typeref:typename:int
Index	plugged/fzf/src/util/chars.go	/^	Index int32$/;"	m	struct:util.Chars	typeref:typename:int32
Info	plugged/fzf/src/tui/tui.go	/^	Info             ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
InfoCommand	plugged/fzf/src/options.go	/^	InfoCommand  string$/;"	m	struct:fzf.Options	typeref:typename:string
InfoPrefix	plugged/fzf/src/options.go	/^	InfoPrefix   string$/;"	m	struct:fzf.Options	typeref:typename:string
InfoStyle	plugged/fzf/src/options.go	/^	InfoStyle    infoStyle$/;"	m	struct:fzf.Options	typeref:typename:infoStyle
Init	plugged/fzf/src/algo/algo.go	/^func Init(scheme string) bool {$/;"	f	package:algo	typeref:typename:bool
Init	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Init() error                        { return nil }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:error
Init	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Init() error {$/;"	f	struct:tui.LightRenderer	typeref:typename:error
Init	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Init() error {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:error
Init	plugged/fzf/src/tui/tui.go	/^	Init() error$/;"	n	interface:tui.Renderer	typeref:typename:error
Initialize	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class Initialize(Base):$/;"	c
Initialized	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class Initialized(Base):$/;"	c
Input	plugged/fzf/src/options.go	/^	Input        chan string$/;"	m	struct:fzf.Options	typeref:typename:chan string
Input	plugged/fzf/src/terminal.go	/^func (t *Terminal) Input() (bool, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, []rune)
Input	plugged/fzf/src/tui/tui.go	/^	Input            ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Insert	plugged/fzf/src/tui/tui.go	/^	Insert$/;"	c	package:tui
Inspirations	plugged/everforest/README.md	/^## Inspirations$/;"	s
Install	plugged/completor.vim/README.md	/^Install$/;"	s	chapter:Completor
Install	plugged/validator.vim/README.md	/^Install$/;"	s	chapter:Validator
Install	plugged/vim-lastplace/README.md	/^## Install$/;"	s	chapter:vim-lastplace v4.6.0
Install with [pathogen](https://github.com/tpope/vim-pathogen)	plugged/splitjoin.vim/spec/support/vim-javascript/README.md	/^### Install with [pathogen](https:\/\/github.com\/tpope\/vim-pathogen)$/;"	S	section:vim-javascript""Installation
Install with native package manager	plugged/splitjoin.vim/spec/support/vim-javascript/README.md	/^### Install with native package manager$/;"	S	section:vim-javascript""Installation
Installation	plugged/MatchTagAlways/README.md	/^## Installation$/;"	s	chapter:Always highlight enclosing tags
Installation	plugged/fzf.vim/README.md	/^Installation$/;"	s	chapter:fzf :heart: vim
Installation	plugged/fzf/README-VIM.md	/^Installation$/;"	s	chapter:FZF Vim integration
Installation	plugged/fzf/README.md	/^Installation$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Installation	plugged/seoul256.vim/README.md	/^Installation$/;"	s
Installation	plugged/splitjoin.vim/README.md	/^## Installation$/;"	s
Installation	plugged/splitjoin.vim/spec/support/rust.vim/README.md	/^## Installation$/;"	s	chapter:rust.vim
Installation	plugged/splitjoin.vim/spec/support/tabular/README.md	/^Installation$/;"	c
Installation	plugged/splitjoin.vim/spec/support/vim-elixir/README.md	/^## Installation$/;"	s	chapter:vim-elixir
Installation	plugged/splitjoin.vim/spec/support/vim-elm-syntax/README.md	/^## Installation$/;"	s	chapter:vim-elm-syntax
Installation	plugged/splitjoin.vim/spec/support/vim-javascript/README.md	/^## Installation$/;"	s	chapter:vim-javascript
Installation	plugged/vim-abolish/README.markdown	/^## Installation$/;"	s	chapter:abolish.vim
Installation	plugged/vim-coiled-snake/README.md	/^Installation$/;"	s	chapter:Coiled Snake: Python Folding for Vim
Installation	plugged/vim-commentary/README.markdown	/^## Installation$/;"	s	chapter:commentary.vim
Installation	plugged/vim-fugitive/README.markdown	/^## Installation$/;"	s	chapter:fugitive.vim
Installation	plugged/vim-repeat/README.markdown	/^## Installation$/;"	s	chapter:repeat.vim
Installation	plugged/vim-surround/README.markdown	/^## Installation$/;"	s	chapter:surround.vim
Installation	plugged/vim-vinegar/README.markdown	/^## Installation$/;"	s	chapter:vinegar.vim
Installation and Usage	plugged/vim-auto-save/README.md	/^## Installation and Usage$/;"	s	chapter:AutoSave
Int	plugged/fzf/src/tui/tui.go	/^func (t EventType) Int() int {$/;"	f	type:tui.EventType	typeref:typename:int
Introduction	plugged/everforest/README.md	/^## Introduction$/;"	s
Introduction	plugged/fzf/ADVANCED.md	/^Introduction$/;"	s	chapter:Advanced fzf examples
Invalid	plugged/fzf/src/tui/tui.go	/^	Invalid$/;"	c	package:tui
IsBytes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) IsBytes() bool {$/;"	f	struct:util.Chars	typeref:typename:bool
IsDefault	plugged/fzf/src/tui/tui.go	/^func (c Color) IsDefault() bool {$/;"	f	type:tui.Color	typeref:typename:bool
IsEmpty	plugged/fzf/src/pattern.go	/^func (p *Pattern) IsEmpty() bool {$/;"	f	struct:fzf.Pattern	typeref:typename:bool
IsFull	plugged/fzf/src/chunklist.go	/^func (c *Chunk) IsFull() bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
IsLightRendererSupported	plugged/fzf/src/tui/light_unix.go	/^func IsLightRendererSupported() bool {$/;"	f	package:tui	typeref:typename:bool
IsLightRendererSupported	plugged/fzf/src/tui/light_windows.go	/^func IsLightRendererSupported() bool {$/;"	f	package:tui	typeref:typename:bool
IsLocal	plugged/fzf/src/server.go	/^func (addr listenAddress) IsLocal() bool {$/;"	f	struct:fzf.listenAddress	typeref:typename:bool
IsTty	plugged/fzf/src/util/util.go	/^func IsTty(file *os.File) bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	plugged/fzf/src/util/util_unix.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	plugged/fzf/src/util/util_windows.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
Issues	plugged/splitjoin.vim/README.md	/^## Issues$/;"	s
Italic	plugged/fzf/src/tui/dummy.go	/^	Italic        = Attr(1 << 2)$/;"	c	package:tui
Italic	plugged/fzf/src/tui/tcell.go	/^	Italic             = Attr(tcell.AttrItalic)$/;"	c	package:tui
Item	plugged/fzf/src/item.go	/^type Item struct {$/;"	s	package:fzf
ItemBuilder	plugged/fzf/src/chunklist.go	/^type ItemBuilder func(*Item, []byte) bool$/;"	t	package:fzf	typeref:typename:func(*Item, []byte) bool
JB	plugged/ultisnips/test/constant.py	/^JB = "+"  # Jump backwards$/;"	v
JF	plugged/ultisnips/test/constant.py	/^JF = "?"  # Jump forwards$/;"	v
JSONRPC_VERSION	plugged/completor.vim/pythonx/completers/lsp/models.py	/^JSONRPC_VERSION = '2.0'$/;"	v
JSX	plugged/splitjoin.vim/spec/plugin/jsx_spec.rb	/^describe "JSX" do$/;"	d
JSX expressions	plugged/splitjoin.vim/spec/plugin/jsx_spec.rb	/^  describe "JSX expressions" do$/;"	d
Javascript	plugged/completor.vim/README.md	/^#### Javascript$/;"	t	section:Completor""Completers
Jedi	plugged/completor.vim/pythonx/completers/python/__init__.py	/^class Jedi(Completor):$/;"	c
JediProcessor	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^class JediProcessor(object):$/;"	c
Job	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class Job(models.Model):$/;"	c
JobDetail	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class JobDetail(models.Model):$/;"	c
JobGroup	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class JobGroup(models.Model):$/;"	c
JobLog	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class JobLog(models.Model):$/;"	c
JobManager	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class JobManager(models.Manager):$/;"	c
JobNote	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class JobNote(models.Model):$/;"	c
JobType	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class JobType(models.Model):$/;"	c
Jscs	plugged/validator.vim/pythonx/lints/javascript/jscs.py	/^class Jscs(Validator):$/;"	c
Jshint	plugged/validator.vim/pythonx/lints/javascript/jshint.py	/^class Jshint(Validator):$/;"	c
Json	plugged/validator.vim/pythonx/lints/json.py	/^class Json(Validator):$/;"	c
Jump	plugged/fzf/src/tui/tui.go	/^	Jump$/;"	c	package:tui
JumpCancel	plugged/fzf/src/tui/tui.go	/^	JumpCancel$/;"	c	package:tui
JumpDirection	plugged/ultisnips/pythonx/UltiSnips/position.py	/^class JumpDirection(Enum):$/;"	c
JumpForward_DefSnippet	plugged/ultisnips/test/test_Editing.py	/^class JumpForward_DefSnippet(_VimTest):$/;"	c
JumpLabels	plugged/fzf/src/options.go	/^	JumpLabels   string$/;"	m	struct:fzf.Options	typeref:typename:string
KEY/EVENT	plugged/fzf/man/man1/fzf.1	/^.SH KEY\/EVENT BINDINGS$/;"	s	title:fzf
KEYWORDS	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/atom_spec.rb	/^  KEYWORDS = %w($/;"	C
KeepRight	plugged/fzf/src/options.go	/^	KeepRight    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Kernel function syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/kernel_function_spec.rb	/^describe 'Kernel function syntax' do$/;"	d
Key	plugged/fzf/src/tui/tui.go	/^func Key(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
Key bindings for command-line	plugged/fzf/README.md	/^Key bindings for command-line$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Key bindings for git objects	plugged/fzf/ADVANCED.md	/^Key bindings for git objects$/;"	s	chapter:Advanced fzf examples
KeyName	plugged/fzf/src/tui/tui.go	/^func (e Event) KeyName() string {$/;"	f	unknown:tui.Event	typeref:typename:string
Keymap	plugged/fzf/src/options.go	/^	Keymap       map[tui.Event][]*action$/;"	m	struct:fzf.Options	typeref:typename:map[tui.Event][]*action
Keyword syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/keyword_spec.rb	/^describe 'Keyword syntax' do$/;"	d
Keywords	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/keyword_spec.rb	/^describe 'Keywords' do$/;"	d
KillCommand	plugged/fzf/src/util/util_unix.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
KillCommand	plugged/fzf/src/util/util_windows.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
Known bugs	plugged/splitjoin.vim/spec/support/R-Vim-runtime/README.md	/^## Known bugs$/;"	s	chapter:R-Vim-runtime
L	autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
L	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^    xnoremap <silent> <buffer> L :call <SID>status_load(line('.'))<cr>$/;"	m
LAYOUT	plugged/fzf/man/man1/fzf-tmux.1	/^.SH LAYOUT OPTIONS$/;"	s	title:fzf\\-tmux
LEVEL_CHOICES	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    LEVEL_CHOICES = list(zip(LEVEL_LIST, LEVEL_LIST))$/;"	v	class:FailureLine
LEVEL_LIST	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    LEVEL_LIST = ("critical", "error", "warning", "info", "debug")$/;"	v	class:FailureLine
LF	plugged/fzf/src/tui/light.go	/^const LF string = "\\x1b[2m␊"$/;"	c	package:tui	typeref:typename:string
LIB_PATTERN	plugged/validator.vim/pythonx/lints/python/pyflakes.py	/^LIB_PATTERN = re.compile('\/lib\/python(\\d(\\.\\d)?)?\/site-packages\/')$/;"	v
LICENSE	plugged/fzf/man/man1/fzf.1	/^.SH LICENSE$/;"	s	title:fzf
LIMIT	plugged/completor.vim/pythonx/completor/__init__.py	/^LIMIT = 50$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
LS	plugged/ultisnips/test/constant.py	/^LS = "@"  # List snippets$/;"	v
Lambdas in tags	plugged/splitjoin.vim/spec/plugin/jsx_spec.rb	/^  describe "Lambdas in tags" do$/;"	d
Language-specific options	plugged/papercolor-theme/README.md	/^### Language-specific options$/;"	S	chapter:🛠️ User Customization
Layout	plugged/fzf/src/options.go	/^	Layout       layoutType$/;"	m	struct:fzf.Options	typeref:typename:layoutType
LeadingWhitespaces	plugged/fzf/src/util/chars.go	/^func (chars *Chars) LeadingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
LeaveTrailingWhitespace	plugged/ultisnips/test/test_Chars.py	/^class LeaveTrailingWhitespace(_VimTest):$/;"	c
Left	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Left() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Left	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Left() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Left	plugged/fzf/src/tui/tui.go	/^	Left   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Left	plugged/fzf/src/tui/tui.go	/^	Left$/;"	c	package:tui
Left	plugged/fzf/src/tui/tui.go	/^	Left() int$/;"	n	interface:tui.Window	typeref:typename:int
LeftClick	plugged/fzf/src/tui/tui.go	/^	LeftClick$/;"	c	package:tui
Len	plugged/fzf/src/result.go	/^func (a ByOrder) Len() int {$/;"	f	type:fzf.ByOrder	typeref:typename:int
Len	plugged/fzf/src/result.go	/^func (a ByRelevance) Len() int {$/;"	f	type:fzf.ByRelevance	typeref:typename:int
Len	plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Len() int {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:int
Len	plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Len() int {$/;"	f	type:fzf.byTimeOrder	typeref:typename:int
Length	plugged/fzf/src/merger.go	/^func (mg *Merger) Length() int {$/;"	f	struct:fzf.Merger	typeref:typename:int
Length	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Length() int {$/;"	f	struct:util.Chars	typeref:typename:int
Less	plugged/fzf/src/result.go	/^func (a ByOrder) Less(i, j int) bool {$/;"	f	type:fzf.ByOrder	typeref:typename:bool
Less	plugged/fzf/src/result.go	/^func (a ByRelevance) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevance	typeref:typename:bool
Less	plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:bool
Less	plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Less(i, j int) bool {$/;"	f	type:fzf.byTimeOrder	typeref:typename:bool
License	plugged/MatchTagAlways/README.md	/^## License$/;"	s	chapter:Always highlight enclosing tags
License	plugged/everforest/README.md	/^## License$/;"	s
License	plugged/fzf.vim/README.md	/^License$/;"	s	chapter:fzf :heart: vim
License	plugged/fzf/BUILD.md	/^License$/;"	s	chapter:Building fzf
License	plugged/seoul256.vim/README.md	/^License$/;"	s
License	plugged/splitjoin.vim/spec/support/rust.vim/README.md	/^## License$/;"	s	chapter:rust.vim
License	plugged/splitjoin.vim/spec/support/vim-elm-syntax/README.md	/^## License$/;"	s	chapter:vim-elm-syntax
License	plugged/splitjoin.vim/spec/support/vim-javascript/README.md	/^## License$/;"	s	chapter:vim-javascript
License	plugged/vim-abolish/README.markdown	/^## License$/;"	s	chapter:abolish.vim
License	plugged/vim-auto-save/README.md	/^## License$/;"	s	chapter:AutoSave
License	plugged/vim-commentary/README.markdown	/^## License$/;"	s	chapter:commentary.vim
License	plugged/vim-fugitive/README.markdown	/^## License$/;"	s	chapter:fugitive.vim
License	plugged/vim-repeat/README.markdown	/^## License$/;"	s	chapter:repeat.vim
License	plugged/vim-surround/README.markdown	/^## License$/;"	s	chapter:surround.vim
License	plugged/vim-vinegar/README.markdown	/^## License$/;"	s	chapter:vinegar.vim
Light	plugged/everforest/palette.md	/^### Light$/;"	S	section:Color Palette and Highlighting Semantics""Palette Variants
Light256	plugged/fzf/src/tui/tui.go	/^	Light256  *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
LightRenderer	plugged/fzf/src/tui/light.go	/^type LightRenderer struct {$/;"	s	package:tui
LightWindow	plugged/fzf/src/tui/light.go	/^type LightWindow struct {$/;"	s	package:tui
LineColumnForOffsetInString	plugged/MatchTagAlways/python/mta_core.py	/^def LineColumnForOffsetInString( text, offset ):$/;"	f
LineColumnOffsetConversions_BasicMultiLine_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LineColumnOffsetConversions_BasicMultiLine_test():$/;"	f
LineColumnOffsetConversions_Basic_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LineColumnOffsetConversions_Basic_test():$/;"	f
LineColumnOffsetConversions_ComplexMultiLine_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LineColumnOffsetConversions_ComplexMultiLine_test():$/;"	f
LineColumnOffsetConversions_EmtpyLine_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LineColumnOffsetConversions_EmtpyLine_test():$/;"	f
LineColumnOffsetConversions_FailColumnOutOfRange_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LineColumnOffsetConversions_FailColumnOutOfRange_test():$/;"	f
LineColumnOffsetConversions_FailLineOutOfRange_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LineColumnOffsetConversions_FailLineOutOfRange_test():$/;"	f
LineColumnOffsetConversions_FailOnEmptyString_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LineColumnOffsetConversions_FailOnEmptyString_test():$/;"	f
LineIterator	plugged/ultisnips/pythonx/UltiSnips/text.py	/^class LineIterator:$/;"	c
Lines	plugged/fzf/src/tui/tui.go	/^	Lines    int$/;"	m	struct:tui.TermSize	typeref:typename:int
Lines	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Lines(multiLine bool, maxLines int, wrapCols int, wrapSignWidth int, tabstop/;"	f	struct:util.Chars	typeref:typename:([][]rune, bool)
Linter1	plugged/validator.vim/tests/test_load.py	/^class Linter1(Validator):$/;"	c
Linter2	plugged/validator.vim/tests/test_load.py	/^class Linter2(Validator):$/;"	c
Linux packages	plugged/fzf/README.md	/^### Linux packages$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
List	plugged/completor.vim/tests/conftest.py	/^    List = List$/;"	v	class:Vim
List	plugged/completor.vim/tests/conftest.py	/^class List(object):$/;"	c
List syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/list_spec.rb	/^describe 'List syntax' do$/;"	d
List type to handle multiple selections	plugged/fzf.vim/README.md	/^#### List type to handle multiple selections$/;"	t	subsection:fzf :heart: vim""Customization""Configuration options for fzf.vim
ListAllAvailable_BraceInFront_ExpectCorrectResult	plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_BraceInFront_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListAllAvailable_Disabled_ExpectCorrectResult	plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_Disabled_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListAllAvailable_NonDefined_NoExpectionShouldBeRaised	plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_NonDefined_NoExpectionShouldBeRaised(_ListAllSnippets):$/;"	c
ListAllAvailable_NothingTyped_ExpectCorrectResult	plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_NothingTyped_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListAllAvailable_SpaceInFront_ExpectCorrectResult	plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_SpaceInFront_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListAllAvailable_testtypedSecondOpt_ExpectCorrectResult	plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_testtypedSecondOpt_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListAllAvailable_testtyped_ExpectCorrectResult	plugged/ultisnips/test/test_ListSnippets.py	/^class ListAllAvailable_testtyped_ExpectCorrectResult(_ListAllSnippets):$/;"	c
ListenAddr	plugged/fzf/src/options.go	/^	ListenAddr   *listenAddress$/;"	m	struct:fzf.Options	typeref:typename:*listenAddress
Load	plugged/fzf/src/tui/tui.go	/^	Load$/;"	c	package:tui
LoadRepos	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/get_repos.exs	/^defmodule LoadRepos do$/;"	m
LocationOfEnclosingTagsInWindowView	plugged/MatchTagAlways/python/mta_vim.py	/^def LocationOfEnclosingTagsInWindowView():$/;"	f
LocationsOfEnclosingTags	plugged/MatchTagAlways/python/mta_core.py	/^def LocationsOfEnclosingTags( input_html, cursor_line, cursor_column ):$/;"	f
LocationsOfEnclosingTags_Basic_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LocationsOfEnclosingTags_Basic_test():$/;"	f
LocationsOfEnclosingTags_Comments_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LocationsOfEnclosingTags_Comments_test():$/;"	f
LocationsOfEnclosingTags_CursorInTagFull_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LocationsOfEnclosingTags_CursorInTagFull_test():$/;"	f
LocationsOfEnclosingTags_CursorInTag_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LocationsOfEnclosingTags_CursorInTag_test():$/;"	f
LocationsOfEnclosingTags_Fail_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LocationsOfEnclosingTags_Fail_test():$/;"	f
LocationsOfEnclosingTags_MultiLine_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LocationsOfEnclosingTags_MultiLine_test():$/;"	f
LocationsOfEnclosingTags_Nested_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LocationsOfEnclosingTags_Nested_test():$/;"	f
LocationsOfEnclosingTags_UnbalancedOpeningTagFull_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LocationsOfEnclosingTags_UnbalancedOpeningTagFull_test():$/;"	f
LocationsOfEnclosingTags_UnbalancedOpeningTag_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def LocationsOfEnclosingTags_UnbalancedOpeningTag_test():$/;"	f
Log tailing	plugged/fzf/ADVANCED.md	/^Log tailing$/;"	s	chapter:Advanced fzf examples
LogFilter	plugged/completor.vim/pythonx/completor/__init__.py	/^class LogFilter(object):$/;"	c
Lookup	plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Lookup(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Loop	plugged/fzf/src/matcher.go	/^func (m *Matcher) Loop() {$/;"	f	struct:fzf.Matcher
Loop	plugged/fzf/src/terminal.go	/^func (t *Terminal) Loop() error {$/;"	f	struct:fzf.Terminal	typeref:typename:error
LoopParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
Lsp	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^class Lsp(Completor):$/;"	c
LuaCLint	plugged/validator.vim/pythonx/lints/lua/luac.py	/^class LuaCLint(Validator):$/;"	c
LuacheckLint	plugged/validator.vim/pythonx/lints/lua/luacheck.py	/^class LuacheckLint(Validator):$/;"	c
MAKEFILE	plugged/fzf/Makefile	/^MAKEFILE       := $(realpath $(lastword $(MAKEFILE_LIST)))$/;"	m
MAKEFILE_DIR	plugged/ultisnips/Makefile	/^MAKEFILE_DIR := $(dir ${MAKEFILE_PATH})$/;"	m
MAKEFILE_PATH	plugged/ultisnips/Makefile	/^MAKEFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))$/;"	m
MEMProfile	plugged/fzf/src/options.go	/^	MEMProfile   string$/;"	m	struct:fzf.Options	typeref:typename:string
Machine	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class Machine(NamedModel):$/;"	c
MachinePlatform	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class MachinePlatform(models.Model):$/;"	c
Macros	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/macro_spec.rb	/^describe 'Macros' do$/;"	d
Maintainers	plugged/everforest/README.md	/^## Maintainers$/;"	s
Maintenance Help	plugged/splitjoin.vim/spec/support/vim-elixir/README.md	/^### Maintenance Help$/;"	S	section:vim-elixir""Development
MakeBorderStyle	plugged/fzf/src/tui/tui.go	/^func MakeBorderStyle(shape BorderShape, unicode bool) BorderStyle {$/;"	f	package:tui	typeref:typename:BorderStyle
MakeSlab	plugged/fzf/src/util/slab.go	/^func MakeSlab(size16 int, size32 int) *Slab {$/;"	f	package:util	typeref:typename:*Slab
MakeTransparentBorder	plugged/fzf/src/tui/tui.go	/^func MakeTransparentBorder() BorderStyle {$/;"	f	package:tui	typeref:typename:BorderStyle
Man	plugged/fzf/src/options.go	/^	Man          bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Manual	plugged/papercolor-theme/README.md	/^### Manual$/;"	S	chapter:🔌 Installation
Manual Installation	plugged/splitjoin.vim/spec/support/vim-elixir/README.md	/^### Manual Installation$/;"	S	section:vim-elixir""Installation
Map indent	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/map_spec.rb	/^describe 'Map indent' do$/;"	d
Map syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/map_spec.rb	/^describe 'Map syntax' do$/;"	d
Mappings	plugged/fzf.vim/README.md	/^Mappings$/;"	s	chapter:fzf :heart: vim
Margin	plugged/fzf/src/options.go	/^	Margin       [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
Marker	plugged/fzf/src/options.go	/^	Marker       *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Marker	plugged/fzf/src/tui/tui.go	/^	Marker           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
MarkerMulti	plugged/fzf/src/options.go	/^	MarkerMulti  *[3]string$/;"	m	struct:fzf.Options	typeref:typename:*[3]string
Match	plugged/fzf/src/pattern.go	/^func (p *Pattern) Match(chunk *Chunk, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
Match	plugged/fzf/src/tui/tui.go	/^	Match            ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
MatchCount	plugged/fzf/src/terminal.go	/^	MatchCount int          `json:"matchCount"`$/;"	m	struct:fzf.Status	typeref:typename:int
MatchIsTooCheap	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class MatchIsTooCheap(_Base, unittest.TestCase):$/;"	c
MatchItem	plugged/fzf/src/pattern.go	/^func (p *Pattern) MatchItem(item *Item, withPos bool, slab *util.Slab) (*Result, []Offset, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:(*Result, []Offset, *[]int)
MatchRequest	plugged/fzf/src/matcher.go	/^type MatchRequest struct {$/;"	s	package:fzf
MatchTagAlways#GoToEnclosingTag	plugged/MatchTagAlways/autoload/MatchTagAlways.vim	/^function! MatchTagAlways#GoToEnclosingTag()$/;"	f
MatchTagAlways#Setup	plugged/MatchTagAlways/autoload/MatchTagAlways.vim	/^function! MatchTagAlways#Setup()$/;"	f
Matcher	plugged/fzf/src/matcher.go	/^type Matcher struct {$/;"	s	package:fzf
Matcher	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class Matcher(models.Model):$/;"	c
Matches	plugged/fzf/src/terminal.go	/^	Matches    []StatusItem `json:"matches"`$/;"	m	struct:fzf.Status	typeref:typename:[]StatusItem
Max	plugged/fzf/src/util/util.go	/^func Max(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Max16	plugged/fzf/src/util/util.go	/^func Max16(first int16, second int16) int16 {$/;"	f	package:util	typeref:typename:int16
Max32	plugged/fzf/src/util/util.go	/^func Max32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MaxFitAndPad	plugged/fzf/src/terminal.go	/^func (t *Terminal) MaxFitAndPad() (int, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(int, int)
MaxX	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxX() int      { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxX() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxX	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxX() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	plugged/fzf/src/tui/tui.go	/^	MaxX() int$/;"	n	interface:tui.Renderer	typeref:typename:int
MaxY	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxY() int      { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxY() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxY	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxY() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	plugged/fzf/src/tui/tui.go	/^	MaxY() int$/;"	n	interface:tui.Renderer	typeref:typename:int
Merge	plugged/fzf/src/tui/dummy.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	plugged/fzf/src/tui/tcell.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Merge(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
MergeAttr	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) MergeAttr(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
MergeNonDefault	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) MergeNonDefault(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
Merger	plugged/fzf/src/merger.go	/^type Merger struct {$/;"	s	package:fzf
Meta	plugged/completor.vim/pythonx/completor/__init__.py	/^class Meta(type):$/;"	c
Meta	plugged/validator.vim/pythonx/validator/__init__.py	/^class Meta(type):$/;"	c
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:BugJobMap
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:Bugscache
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:BuildPlatform
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:ClassifiedFailure
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:Commit
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:FailureClassification
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:FailureLine
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:Group
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:Job
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:JobDetail
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:JobGroup
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:JobLog
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:JobNote
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:JobType
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:Machine
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:MachinePlatform
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:Matcher
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:NamedModel
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:Option
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:OptionCollection
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:Product
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:Push
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:ReferenceDataSignatures
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:Repository
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:RepositoryGroup
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:RunnableJob
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:TaskclusterMetadata
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:TextLogError
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:TextLogErrorMatch
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:TextLogErrorMetadata
Meta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    class Meta:$/;"	c	class:TextLogStep
Min	plugged/fzf/src/util/util.go	/^func Min(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Min32	plugged/fzf/src/util/util.go	/^func Min32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MinHeight	plugged/fzf/src/options.go	/^	MinHeight    int$/;"	m	struct:fzf.Options	typeref:typename:int
Minor improvements/fixes	plugged/fzf/CHANGELOG.md	/^### Minor improvements\/fixes$/;"	S	section:CHANGELOG""0.10.0
Minor improvements/fixes	plugged/fzf/CHANGELOG.md	/^### Minor improvements\/fixes$/;"	S	section:CHANGELOG""0.10.1
Mirror	plugged/ultisnips/pythonx/UltiSnips/text_objects/mirror.py	/^class Mirror(NoneditableTextObject):$/;"	c
MirrorBeforeTabstopLeave_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class MirrorBeforeTabstopLeave_ExpectCorrectResult(_VimTest):$/;"	c
MirrorBeforeTabstopOverwrite_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class MirrorBeforeTabstopOverwrite_ExpectCorrectResult(_VimTest):$/;"	c
MirrorRealLifeExample_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class MirrorRealLifeExample_ExpectCorrectResult(_VimTest):$/;"	c
MirrorToken	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^class MirrorToken(Token):$/;"	c
Mirror_TestKillTabstop_Kill	plugged/ultisnips/test/test_Mirror.py	/^class Mirror_TestKillTabstop_Kill(_VimTest):$/;"	c
Mirror_TestKill_InsertAfter_NoKill	plugged/ultisnips/test/test_Mirror.py	/^class Mirror_TestKill_InsertAfter_NoKill(_VimTest):$/;"	c
Mirror_TestKill_InsertBefore_NoKill	plugged/ultisnips/test/test_Mirror.py	/^class Mirror_TestKill_InsertBefore_NoKill(_VimTest):$/;"	c
Mirror_TestKill_InsertBeginning_Kill	plugged/ultisnips/test/test_Mirror.py	/^class Mirror_TestKill_InsertBeginning_Kill(_VimTest):$/;"	c
Mirror_TestKill_InsertEnd_Kill	plugged/ultisnips/test/test_Mirror.py	/^class Mirror_TestKill_InsertEnd_Kill(_VimTest):$/;"	c
Miscellaneous	plugged/vim-lastplace/README.md	/^## Miscellaneous$/;"	s	chapter:vim-lastplace v4.6.0
Missing features	plugged/splitjoin.vim/spec/support/vim-elm-syntax/README.md	/^### Missing features$/;"	S	section:vim-elm-syntax""Features
Mod	plugged/fzf/src/tui/tui.go	/^	Mod    bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Module function syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/module_function_spec.rb	/^describe 'Module function syntax' do$/;"	d
More Color Schemes	plugged/everforest/README.md	/^## More Color Schemes$/;"	s
Mouse	plugged/fzf/src/options.go	/^	Mouse        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Mouse	plugged/fzf/src/tui/tui.go	/^	Mouse$/;"	c	package:tui
MouseEvent	plugged/fzf/src/tui/tui.go	/^	MouseEvent *MouseEvent$/;"	m	struct:tui.Event	typeref:typename:*MouseEvent
MouseEvent	plugged/fzf/src/tui/tui.go	/^type MouseEvent struct {$/;"	s	package:tui
Move	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Move(y int, x int) {$/;"	f	struct:tui.LightWindow
Move	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Move(y int, x int) {$/;"	f	struct:tui.TcellWindow
Move	plugged/fzf/src/tui/tui.go	/^	Move(y int, x int)$/;"	n	interface:tui.Window
MoveAndClear	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.LightWindow
MoveAndClear	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.TcellWindow
MoveAndClear	plugged/fzf/src/tui/tui.go	/^	MoveAndClear(y int, x int)$/;"	n	interface:tui.Window
MovePosition_DelSameLine	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class MovePosition_DelSameLine(_MPBase, unittest.TestCase):$/;"	c
MovePosition_DelSameLine1	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class MovePosition_DelSameLine1(_MPBase, unittest.TestCase):$/;"	c
MovePosition_DelSecondLine	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class MovePosition_DelSecondLine(_MPBase, unittest.TestCase):$/;"	c
MovePosition_DelSecondLine1	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class MovePosition_DelSecondLine1(_MPBase, unittest.TestCase):$/;"	c
MovePosition_InsSameLine1	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class MovePosition_InsSameLine1(_MPBase, unittest.TestCase):$/;"	c
MovePosition_InsSameLine2	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class MovePosition_InsSameLine2(_MPBase, unittest.TestCase):$/;"	c
MtaJumpToOtherTag	plugged/MatchTagAlways/plugin/MatchTagAlways.vim	/^command -nargs=0 MtaJumpToOtherTag call MatchTagAlways#GoToEnclosingTag()$/;"	c
Multi	plugged/fzf/src/options.go	/^	Multi        int$/;"	m	struct:fzf.Options	typeref:typename:int
MultiLine	plugged/fzf/src/options.go	/^	MultiLine    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
MultiLine	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class MultiLine(_Base, unittest.TestCase):$/;"	c
MultiLineDefault_BS	plugged/ultisnips/test/test_Chars.py	/^class MultiLineDefault_BS(_MultiLineDefault):$/;"	c
MultiLineDefault_Jump	plugged/ultisnips/test/test_Chars.py	/^class MultiLineDefault_Jump(_MultiLineDefault):$/;"	c
MultiLineDefault_Type	plugged/ultisnips/test/test_Chars.py	/^class MultiLineDefault_Type(_MultiLineDefault):$/;"	c
MultiWordSnippet_Simple	plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWordSnippet_Simple(_VimTest):$/;"	c
MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle	plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle(_VimTest):$/;"	c
MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand	plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand(_VimTest):$/;"	c
MultiWord_SnippetOptions_ExpandWordSnippets_ExpandSuffix	plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandWordSnippets_ExpandSuffix($/;"	c
MultiWord_SnippetOptions_ExpandWordSnippets_NoExpand	plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandWordSnippets_NoExpand($/;"	c
MultiWord_SnippetOptions_ExpandWordSnippets_NormalExpand	plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_ExpandWordSnippets_NormalExpand($/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand	plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand(_VimTest):$/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand	plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand(_VimTest):$/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2	plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2(_VimTest):$/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO	plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO(_VimTest):$/;"	c
MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose	plugged/ultisnips/test/test_SnippetOptions.py	/^class MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose(_VimTest):$/;"	c
MultilineExpandTestTyping_ExpectCorrectResult	plugged/ultisnips/test/test_Expand.py	/^class MultilineExpandTestTyping_ExpectCorrectResult(_VimTest):$/;"	c
MultilineExpand_ExpectCorrectResult	plugged/ultisnips/test/test_Expand.py	/^class MultilineExpand_ExpectCorrectResult(_VimTest):$/;"	c
MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult(_VimTest):$/;"	c
MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult(_VimTest):$/;"	c
MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult(_VimTest):$/;"	c
Multiple_ManySnippetsOneTrigger_ECR	plugged/ultisnips/test/test_MultipleMatches.py	/^class Multiple_ManySnippetsOneTrigger_ECR(_VimTest):$/;"	c
Multiple_SimpleCaseEscapeOut_ECR	plugged/ultisnips/test/test_MultipleMatches.py	/^class Multiple_SimpleCaseEscapeOut_ECR(_MultipleMatches):$/;"	c
Multiple_SimpleCaseSelectFirst_ECR	plugged/ultisnips/test/test_MultipleMatches.py	/^class Multiple_SimpleCaseSelectFirst_ECR(_MultipleMatches):$/;"	c
Multiple_SimpleCaseSelectSecond_ECR	plugged/ultisnips/test/test_MultipleMatches.py	/^class Multiple_SimpleCaseSelectSecond_ECR(_MultipleMatches):$/;"	c
Multiple_SimpleCaseSelectTooHigh_ESelectLast	plugged/ultisnips/test/test_MultipleMatches.py	/^class Multiple_SimpleCaseSelectTooHigh_ESelectLast(_MultipleMatches):$/;"	c
Multiple_SimpleCaseSelectZero_EEscape	plugged/ultisnips/test/test_MultipleMatches.py	/^class Multiple_SimpleCaseSelectZero_EEscape(_MultipleMatches):$/;"	c
MutexProfile	plugged/fzf/src/options.go	/^	MutexProfile string$/;"	m	struct:fzf.Options	typeref:typename:string
MyTest	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/exunit_spec.rb	/^    module MyTest do$/;"	m
N	vimrc	/^nnoremap N Nzz$/;"	m
NAME	plugged/fzf/man/man1/fzf-tmux.1	/^.SH NAME$/;"	s	title:fzf\\-tmux
NAME	plugged/fzf/man/man1/fzf.1	/^.SH NAME$/;"	s	title:fzf
NULL_BYTE	plugged/ultisnips/test/test_Fixes.py	/^NULL_BYTE = CTRL_V + "000"$/;"	v
Name	plugged/fzf/src/terminal.go	/^func (a actionType) Name() string {$/;"	f	type:fzf.actionType	typeref:typename:string
NamedModel	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class NamedModel(models.Model):$/;"	c
NeedScrollbarRedraw	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NeedScrollbarRedraw() bool          { return false }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:bool
NeedScrollbarRedraw	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) NeedScrollbarRedraw() bool {$/;"	f	struct:tui.LightRenderer	typeref:typename:bool
NeedScrollbarRedraw	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NeedScrollbarRedraw() bool {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:bool
NeedScrollbarRedraw	plugged/fzf/src/tui/tui.go	/^	NeedScrollbarRedraw() bool$/;"	n	interface:tui.Renderer	typeref:typename:bool
Neoinclude	plugged/completor.vim/README.md	/^#### Neoinclude$/;"	t	section:Completor""Completers
Neoinclude	plugged/completor.vim/pythonx/completers/common/neoinclude.py	/^class Neoinclude(Completor):$/;"	c
NestedClass	plugged/vim-coiled-snake/tests/test_everything.py	/^    class NestedClass:$/;"	c	class:Class
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.10.0
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.10.1
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.10
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.11
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.12
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.13
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.3
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.4
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.5
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.6
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.7
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.9
NewAtomicBool	plugged/fzf/src/util/atomicbool.go	/^func NewAtomicBool(initialState bool) *AtomicBool {$/;"	f	package:util	typeref:typename:*AtomicBool
NewChunkCache	plugged/fzf/src/cache.go	/^func NewChunkCache() *ChunkCache {$/;"	f	package:fzf	typeref:typename:*ChunkCache
NewChunkList	plugged/fzf/src/chunklist.go	/^func NewChunkList(cache *ChunkCache, trans ItemBuilder) *ChunkList {$/;"	f	package:fzf	typeref:typename:*ChunkList
NewColorAttr	plugged/fzf/src/tui/tui.go	/^func NewColorAttr() ColorAttr {$/;"	f	package:tui	typeref:typename:ColorAttr
NewColorPair	plugged/fzf/src/tui/tui.go	/^func NewColorPair(fg Color, bg Color, attr Attr) ColorPair {$/;"	f	package:tui	typeref:typename:ColorPair
NewEventBox	plugged/fzf/src/util/eventbox.go	/^func NewEventBox() *EventBox {$/;"	f	package:util	typeref:typename:*EventBox
NewExecutor	plugged/fzf/src/util/util_unix.go	/^func NewExecutor(withShell string) *Executor {$/;"	f	package:util	typeref:typename:*Executor
NewExecutor	plugged/fzf/src/util/util_windows.go	/^func NewExecutor(withShell string) *Executor {$/;"	f	package:util	typeref:typename:*Executor
NewFullscreenRenderer	plugged/fzf/src/tui/tui.go	/^func NewFullscreenRenderer(theme *ColorTheme, forceBlack bool, mouse bool) Renderer {$/;"	f	package:tui	typeref:typename:Renderer
NewHistory	plugged/fzf/src/history.go	/^func NewHistory(path string, maxSize int) (*History, error) {$/;"	f	package:fzf	typeref:typename:(*History, error)
NewLightRenderer	plugged/fzf/src/tui/light.go	/^func NewLightRenderer(ttyin *os.File, theme *ColorTheme, forceBlack bool, mouse bool, tabstop in/;"	f	package:tui	typeref:typename:(Renderer, error)
NewMatcher	plugged/fzf/src/matcher.go	/^func NewMatcher(cache *ChunkCache, patternBuilder func([]rune) *Pattern,$/;"	f	package:fzf	typeref:typename:*Matcher
NewMerger	plugged/fzf/src/merger.go	/^func NewMerger(pattern *Pattern, lists [][]Result, sorted bool, tac bool, revision revision, min/;"	f	package:fzf	typeref:typename:*Merger
NewReader	plugged/fzf/src/reader.go	/^func NewReader(pusher func([]byte) bool, eventBox *util.EventBox, executor *util.Executor, delim/;"	f	package:fzf	typeref:typename:*Reader
NewTerminal	plugged/fzf/src/terminal.go	/^func NewTerminal(opts *Options, eventBox *util.EventBox, executor *util.Executor) (*Terminal, er/;"	f	package:fzf	typeref:typename:(*Terminal, error)
NewWindow	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, b/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) NewWindow(top int, left int, width int, height int, preview bool, border/;"	f	struct:tui.LightRenderer	typeref:typename:Window
NewWindow	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, b/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	plugged/fzf/src/tui/tui.go	/^	NewWindow(top int, left int, width int, height int, preview bool, borderStyle BorderStyle) Wind/;"	n	interface:tui.Renderer	typeref:typename:Window
NoColorTheme	plugged/fzf/src/tui/tui.go	/^func NoColorTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
NoName	plugged/validator.vim/tests/test_validator.py	/^class NoName(Validator):$/;"	c
NoUmlautsBeforeTriggerAndCharsAfter	plugged/ultisnips/test/test_Chars.py	/^class NoUmlautsBeforeTriggerAndCharsAfter(_UmlautsBase):$/;"	c
NoWinpty	plugged/fzf/src/options.go	/^	NoWinpty     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
No_Tab_Expand_ET	plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_ET(_No_Tab_Expand):$/;"	c
No_Tab_Expand_ET_Leading_Spaces	plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_ET_Leading_Spaces(_No_Tab_Expand):$/;"	c
No_Tab_Expand_ET_SW	plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_ET_SW(_No_Tab_Expand):$/;"	c
No_Tab_Expand_ET_SW_TS	plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_ET_SW_TS(_No_Tab_Expand):$/;"	c
No_Tab_Expand_Leading_Spaces	plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_Leading_Spaces(_No_Tab_Expand):$/;"	c
No_Tab_Expand_Leading_Tabs	plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_Leading_Tabs(_No_Tab_Expand):$/;"	c
No_Tab_Expand_No_TS	plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_No_TS(_No_Tab_Expand):$/;"	c
No_Tab_Expand_RealWorld	plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_RealWorld(_TabExpand_RealWorld, _VimTest):$/;"	c
No_Tab_Expand_Simple	plugged/ultisnips/test/test_SnippetOptions.py	/^class No_Tab_Expand_Simple(_No_Tab_Expand):$/;"	c
NonUnicodeDataInUnnamedRegister	plugged/ultisnips/test/test_Fixes.py	/^class NonUnicodeDataInUnnamedRegister(_VimTest):$/;"	c
None	plugged/splitjoin.vim/spec/plugin/rust_spec.rb	/^              None => return None,$/;"	C
NoneditableTextObject	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^class NoneditableTextObject(TextObject):$/;"	c
Normalize	plugged/fzf/src/options.go	/^	Normalize    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
NormalizeRunes	plugged/fzf/src/algo/normalize.go	/^func NormalizeRunes(runes []rune) []rune {$/;"	f	package:algo	typeref:typename:[]rune
Note about vim-polyglot	plugged/splitjoin.vim/spec/support/vim-elm-syntax/README.md	/^### Note about vim-polyglot$/;"	S	section:vim-elm-syntax""Installation
Notes/Caveats	plugged/splitjoin.vim/spec/support/vim-elixir/README.md	/^## Notes\/Caveats$/;"	s	chapter:vim-elixir
Nth	plugged/fzf/src/options.go	/^	Nth          []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
NullByte_ExpandAfter	plugged/ultisnips/test/test_Fixes.py	/^class NullByte_ExpandAfter(_VimTest):$/;"	c
NullByte_ListSnippets	plugged/ultisnips/test/test_Fixes.py	/^class NullByte_ListSnippets(_VimTest):$/;"	c
NumLines	plugged/fzf/src/util/chars.go	/^func (chars *Chars) NumLines(atMost int) (int, bool) {$/;"	f	struct:util.Chars	typeref:typename:(int, bool)
Numbers syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/numbers_spec.rb	/^describe 'Numbers syntax' do$/;"	d
OPENING	plugged/MatchTagAlways/python/mta_core.py	/^  OPENING = 1$/;"	v	class:TagType
OPTIONS	plugged/fzf/man/man1/fzf.1	/^.SH OPTIONS$/;"	s	title:fzf
Offset	plugged/fzf/src/result.go	/^type Offset [2]int32$/;"	t	package:fzf	typeref:typename:[2]int32
OffsetForLineColumnInString	plugged/MatchTagAlways/python/mta_core.py	/^def OffsetForLineColumnInString( text, line, column ):$/;"	f
OldSelection_RealWorldCase_Test	plugged/ultisnips/test/test_Selection.py	/^class OldSelection_RealWorldCase_Test(_OS_Base):$/;"	c
OldSelection_SimpleTabstop_Test	plugged/ultisnips/test/test_Selection.py	/^class OldSelection_SimpleTabstop_Test(_OS_Base):$/;"	c
Omni	plugged/completor.vim/pythonx/completers/common/omni.py	/^class Omni(Completor):$/;"	c
Once	plugged/fzf/src/util/util.go	/^func Once(nextResponse bool) func() bool {$/;"	f	package:util	typeref:typename:func() bool
One	plugged/fzf/src/tui/tui.go	/^	One$/;"	c	package:tui
Operators	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/operator_spec.rb	/^describe 'Operators' do$/;"	d
Option	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class Option(NamedModel):$/;"	c
OptionCollection	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class OptionCollection(models.Model):$/;"	c
OptionCollectionManager	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class OptionCollectionManager(models.Manager):$/;"	c
Optional: concerning jsx.	plugged/splitjoin.vim/spec/support/vim-javascript/ISSUE_TEMPLATE.md	/^#### Optional: concerning jsx.$/;"	t
Options	plugged/MatchTagAlways/README.md	/^## Options$/;"	s	chapter:Always highlight enclosing tags
Options	plugged/fzf/README.md	/^### Options$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Options	plugged/fzf/src/options.go	/^type Options struct {$/;"	s	package:fzf
Options	plugged/splitjoin.vim/spec/support/R-Vim-runtime/README.md	/^## Options$/;"	s	chapter:R-Vim-runtime
Our Pledge	plugged/splitjoin.vim/CODE_OF_CONDUCT.md	/^## Our Pledge$/;"	s	chapter:Contributor Covenant Code of Conduct
Our Responsibilities	plugged/splitjoin.vim/CODE_OF_CONDUCT.md	/^## Our Responsibilities$/;"	s	chapter:Contributor Covenant Code of Conduct
Our Standards	plugged/splitjoin.vim/CODE_OF_CONDUCT.md	/^## Our Standards$/;"	s	chapter:Contributor Covenant Code of Conduct
Output	plugged/fzf/src/options.go	/^	Output       chan string$/;"	m	struct:fzf.Options	typeref:typename:chan string
PARSED	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    PARSED = 1$/;"	v	class:JobLog
PAT	plugged/completor.vim/pythonx/completers/common/filename.py	/^PAT = re.compile(r'(\\w{2,}:(\/\/?[^\\s]*)?)|(<\/[^\\s>]*>?)|(\/\/)')$/;"	v
PAT	plugged/validator.vim/pythonx/lints/rust.py	/^PAT = re.compile('\\s+-->\\s(?P<fname>.*?):(?P<lnum>\\d+):(?P<col>\\d+)')$/;"	v
PAUSE_BEFORE_EXIT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
PENDING	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    PENDING = 0$/;"	v	class:Job
PENDING	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    PENDING = 0$/;"	v	class:JobLog
POST_PROCESS_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_DIR	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^var PROJECT_DIR = (function() {$/;"	f
PROJECT_FILE_NAME	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^var PROJECT_FILE_NAME = '.tern-project';$/;"	v
PROJECT_ROOT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PS1	plugged/fzf/test/test_go.rb	/^PS1= PROMPT_COMMAND= HISTFILE= HISTSIZE=100$/;"	C
PY2	plugged/MatchTagAlways/python/mta_core.py	/^PY2 = (sys.version_info[0] == 2)$/;"	v
PY2	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^PY2 = (sys.version_info[0] == 2)$/;"	v
PacifyHtmlComments	plugged/MatchTagAlways/python/mta_core.py	/^def PacifyHtmlComments( text ):$/;"	f
PacifyHtmlComments_Works_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def PacifyHtmlComments_Works_test():$/;"	f
Padding	plugged/fzf/src/options.go	/^	Padding      [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
PageDown	plugged/fzf/src/tui/tui.go	/^	PageDown$/;"	c	package:tui
PageUp	plugged/fzf/src/tui/tui.go	/^	PageUp$/;"	c	package:tui
Palette	plugged/everforest/README.md	/^### Palette$/;"	S	section:Introduction
Palette Variants	plugged/everforest/palette.md	/^## Palette Variants$/;"	s	chapter:Color Palette and Highlighting Semantics
PaperColor	plugged/papercolor-theme/colors/PaperColor.vim	/^command! -nargs=0 PaperColor :call g:PaperColor()$/;"	c
PaperColor	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! g:PaperColor()$/;"	f
ParseArgs	plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^:ParseArgs$/;"	l
ParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseOptions	plugged/fzf/src/options.go	/^func ParseOptions(useDefaults bool, args []string) (*Options, error) {$/;"	f	package:fzf	typeref:typename:(*Options, error)
ParseRange	plugged/fzf/src/tokenizer.go	/^func ParseRange(str *string) (Range, bool) {$/;"	f	package:fzf	typeref:typename:(Range, bool)
ParseSnippets_ClearAll	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_ClearAll(_VimTest):$/;"	c
ParseSnippets_ClearOne	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_ClearOne(_VimTest):$/;"	c
ParseSnippets_ClearTwo	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_ClearTwo(_VimTest):$/;"	c
ParseSnippets_ExtendsWithoutFiletype	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_ExtendsWithoutFiletype(_VimTest):$/;"	c
ParseSnippets_Global_Local_Python	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_Global_Local_Python(_VimTest):$/;"	c
ParseSnippets_Global_Python	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_Global_Python(_VimTest):$/;"	c
ParseSnippets_Global_Python_After	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_Global_Python_After(_VimTest):$/;"	c
ParseSnippets_InvalidPriorityLine	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_InvalidPriorityLine(_VimTest):$/;"	c
ParseSnippets_InvalidPriorityLine1	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_InvalidPriorityLine1(_VimTest):$/;"	c
ParseSnippets_MissingEndSnippet	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MissingEndSnippet(_VimTest):$/;"	c
ParseSnippets_MultiWord_Description	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_Description(_ParseSnippets_MultiWord):$/;"	c
ParseSnippets_MultiWord_Description_Option	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_Description_Option(_ParseSnippets_MultiWord):$/;"	c
ParseSnippets_MultiWord_NoContainer	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_NoContainer(_VimTest):$/;"	c
ParseSnippets_MultiWord_Quotes	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_Quotes(_VimTest):$/;"	c
ParseSnippets_MultiWord_RE1	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_RE1(_ParseSnippets_MultiWord_RE):$/;"	c
ParseSnippets_MultiWord_RE2	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_RE2(_ParseSnippets_MultiWord_RE):$/;"	c
ParseSnippets_MultiWord_RE3	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_RE3(_ParseSnippets_MultiWord_RE):$/;"	c
ParseSnippets_MultiWord_Simple	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_Simple(_ParseSnippets_MultiWord):$/;"	c
ParseSnippets_MultiWord_UnmatchedContainer	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_UnmatchedContainer(_VimTest):$/;"	c
ParseSnippets_MultiWord_WithQuotes	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_MultiWord_WithQuotes(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippet	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippet(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippetContext	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippetContext(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippetLocation	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippetLocation(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippetPostAction	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippetPostAction(_VimTest):$/;"	c
ParseSnippets_PrintErroneousSnippetPreAction	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintErroneousSnippetPreAction(_VimTest):$/;"	c
ParseSnippets_PrintPythonStacktrace	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintPythonStacktrace(_VimTest):$/;"	c
ParseSnippets_PrintPythonStacktraceMultiline	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_PrintPythonStacktraceMultiline(_VimTest):$/;"	c
ParseSnippets_SimpleSnippet	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_SimpleSnippet(_VimTest):$/;"	c
ParseSnippets_UnknownDirective	plugged/ultisnips/test/test_ParseSnippets.py	/^class ParseSnippets_UnknownDirective(_VimTest):$/;"	c
PassMerger	plugged/fzf/src/merger.go	/^func PassMerger(chunks *[]*Chunk, tac bool, revision revision) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
PassThrough	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) PassThrough(string)                 {}$/;"	f	unknown:tui.FullscreenRenderer
PassThrough	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) PassThrough(str string) {$/;"	f	unknown:tui.LightRenderer
PassThrough	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) PassThrough(str string) {$/;"	f	unknown:tui.FullscreenRenderer
PassThrough	plugged/fzf/src/tui/tui.go	/^	PassThrough(string)$/;"	n	interface:tui.Renderer
PassThroughNonexecutedTrigger	plugged/ultisnips/test/test_Fixes.py	/^class PassThroughNonexecutedTrigger(_VimTest):$/;"	c
Pattern	plugged/fzf/src/pattern.go	/^type Pattern struct {$/;"	s	package:fzf
Pause	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Pause(bool)                         {}$/;"	f	unknown:tui.FullscreenRenderer
Pause	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Pause(clear bool) {$/;"	f	struct:tui.LightRenderer
Pause	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Pause(clear bool) {$/;"	f	unknown:tui.FullscreenRenderer
Pause	plugged/fzf/src/tui/tui.go	/^	Pause(clear bool)$/;"	n	interface:tui.Renderer
Pdb	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^        class Pdb(pdb.Pdb):$/;"	c	member:RemotePDB.start_server	file:
PebkacError	plugged/ultisnips/pythonx/UltiSnips/error.py	/^class PebkacError(RuntimeError):$/;"	c
Peek	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Peek(event EventType) bool {$/;"	f	struct:util.EventBox	typeref:typename:bool
Performance	plugged/fzf/README.md	/^### Performance$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
PerlCriticLint	plugged/validator.vim/pythonx/lints/perl/perlcritic.py	/^class PerlCriticLint(Validator):$/;"	c
PerlLint	plugged/validator.vim/pythonx/lints/perl/perl.py	/^class PerlLint(Validator):$/;"	c
PerlSyntaxFold	plugged/ultisnips/test/test_Folding.py	/^class PerlSyntaxFold(_VimTest):$/;"	c
Person	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^Person <- R6::R6Class("Person",$/;"	c
Phony	plugged/fzf/src/options.go	/^	Phony        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Php	plugged/validator.vim/pythonx/lints/php.py	/^class Php(Validator):$/;"	c
Plug	autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
Plug	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
Plug	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  command! -nargs=+ -bar Plug call plug#(<args>)$/;"	c
PlugClean	autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugClean	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugClean	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  command! -nargs=0 -bar -bang PlugClean call s:clean(<bang>0)$/;"	c
PlugDiff	autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugDiff	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugDiff	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugDiff    call s:diff()$/;"	c
PlugInstall	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugInstall	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugInstall	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugInstall call s:install(<bang>0, /;"	c
PlugLOD	autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugLOD	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugLOD	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^    augroup PlugLOD$/;"	a
PlugSnapshot	autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugSnapshot	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugSnapshot	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  command! -nargs=? -bar -bang -complete=file PlugSnapshot call s:snapshot(<bang>0, <f-args>)$/;"	c
PlugStatus	autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugStatus	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugStatus	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugStatus  call s:status()$/;"	c
PlugUpdate	autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpdate	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpdate	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  command! -nargs=* -bar -bang -complete=customlist,s:names PlugUpdate  call s:update(<bang>0, [/;"	c
PlugUpgrade	autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
PlugUpgrade	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
PlugUpgrade	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  command! -nargs=0 -bar PlugUpgrade if s:upgrade() | execute 'source' s:esc(s:me) | endif$/;"	c
Plugin Managers	plugged/splitjoin.vim/spec/support/vim-elixir/README.md	/^### Plugin Managers$/;"	S	section:vim-elixir""Installation
Plugin_SuperTab_SimpleTest	plugged/ultisnips/test/test_Plugin.py	/^class Plugin_SuperTab_SimpleTest(_VimTest):$/;"	c
Pointer	plugged/fzf/src/options.go	/^	Pointer      *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Position	plugged/fzf/src/terminal.go	/^	Position   int          `json:"position"`$/;"	m	struct:fzf.Status	typeref:typename:int
Position	plugged/ultisnips/pythonx/UltiSnips/position.py	/^class Position:$/;"	c
PrefixMatch	plugged/fzf/src/algo/algo.go	/^func PrefixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Prepend	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Prepend(prefix string) {$/;"	f	struct:util.Chars
Prerequisite	plugged/seoul256.vim/test/README.md	/^### Prerequisite$/;"	S	chapter:Test cases for seoul256.vim
Prerequisites	plugged/fzf/BUILD.md	/^### Prerequisites$/;"	S	section:Building fzf""Build instructions
Preview	plugged/fzf/src/options.go	/^	Preview      previewOpts$/;"	m	struct:fzf.Options	typeref:typename:previewOpts
Preview window	plugged/fzf.vim/README.md	/^#### Preview window$/;"	t	subsection:fzf :heart: vim""Customization""Configuration options for fzf.vim
Preview window	plugged/fzf/README.md	/^### Preview window$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
PreviewBg	plugged/fzf/src/tui/tui.go	/^	PreviewBg        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewBorder	plugged/fzf/src/tui/tui.go	/^	PreviewBorder    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewFg	plugged/fzf/src/tui/tui.go	/^	PreviewFg        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewLabel	plugged/fzf/src/options.go	/^	PreviewLabel labelOpts$/;"	m	struct:fzf.Options	typeref:typename:labelOpts
PreviewLabel	plugged/fzf/src/tui/tui.go	/^	PreviewLabel     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewScrollDown	plugged/fzf/src/tui/tui.go	/^	PreviewScrollDown$/;"	c	package:tui
PreviewScrollUp	plugged/fzf/src/tui/tui.go	/^	PreviewScrollUp$/;"	c	package:tui
PreviewScrollbar	plugged/fzf/src/tui/tui.go	/^	PreviewScrollbar ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Previewing an image	plugged/fzf/README.md	/^### Previewing an image$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
Print	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Print(text string) {$/;"	f	struct:tui.LightWindow
Print	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Print(text string) {$/;"	f	struct:tui.TcellWindow
Print	plugged/fzf/src/tui/tui.go	/^	Print(text string)$/;"	n	interface:tui.Window
PrintQuery	plugged/fzf/src/options.go	/^	PrintQuery   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
PrintSep	plugged/fzf/src/options.go	/^	PrintSep     string$/;"	m	struct:fzf.Options	typeref:typename:string
Printer	plugged/fzf/src/options.go	/^	Printer      func(string)$/;"	m	struct:fzf.Options	typeref:typename:func(string)
Printer	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^      defmodule Printer do$/;"	m
Process IDs	plugged/fzf/README.md	/^### Process IDs$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Product	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class Product(NamedModel):$/;"	c
Progress	plugged/fzf/src/terminal.go	/^	Progress   int          `json:"progress"`$/;"	m	struct:fzf.Status	typeref:typename:int
Promotion	plugged/vim-vinegar/README.markdown	/^## Promotion$/;"	s	chapter:vinegar.vim
Prompt	plugged/fzf/src/options.go	/^	Prompt       string$/;"	m	struct:fzf.Options	typeref:typename:string
Prompt	plugged/fzf/src/tui/tui.go	/^	Prompt           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
ProperIndenting_AutoIndentAndNewline_ECR	plugged/ultisnips/test/test_Format.py	/^class ProperIndenting_AutoIndentAndNewline_ECR(_VimTest):$/;"	c
ProperIndenting_FirstLineInFileComplete_ECR	plugged/ultisnips/test/test_Format.py	/^class ProperIndenting_FirstLineInFileComplete_ECR(ProperIndenting_FirstLineInFile_ECR):$/;"	c
ProperIndenting_FirstLineInFile_ECR	plugged/ultisnips/test/test_Format.py	/^class ProperIndenting_FirstLineInFile_ECR(_VimTest):$/;"	c
ProperIndenting_SimpleCase_ECR	plugged/ultisnips/test/test_Format.py	/^class ProperIndenting_SimpleCase_ECR(_VimTest):$/;"	c
ProperIndenting_SingleLineNoReindenting_ECR	plugged/ultisnips/test/test_Format.py	/^class ProperIndenting_SingleLineNoReindenting_ECR(_VimTest):$/;"	c
Pros	plugged/fzf/README.md	/^Pros$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Protect	plugged/fzf/src/protector/protector.go	/^func Protect() {}$/;"	f	package:protector
Protect	plugged/fzf/src/protector/protector_openbsd.go	/^func Protect() {$/;"	f	package:protector
ProxyScript	plugged/fzf/src/options.go	/^	ProxyScript  string$/;"	m	struct:fzf.Options	typeref:typename:string
Push	plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Push(data []byte) bool {$/;"	f	struct:fzf.ChunkList	typeref:typename:bool
Push	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class Push(models.Model):$/;"	c
Pushing	plugged/vim-gutentags/CONTRIBUTING.md	/^## Pushing$/;"	s	chapter:Contributing
PxHeight	plugged/fzf/src/tui/tui.go	/^	PxHeight int$/;"	m	struct:tui.TermSize	typeref:typename:int
PxWidth	plugged/fzf/src/tui/tui.go	/^	PxWidth  int$/;"	m	struct:tui.TermSize	typeref:typename:int
PyFlakes	plugged/validator.vim/pythonx/lints/python/pyflakes.py	/^class PyFlakes(Validator):$/;"	c
Python	plugged/completor.vim/README.md	/^#### Python$/;"	t	section:Completor""Completers
PythonCode	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^class PythonCode(NoneditableTextObject):$/;"	c
PythonCodeOld_IndentedMultiline	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCodeOld_IndentedMultiline(_VimTest):$/;"	c
PythonCodeOld_ReferencePlaceholderAfter	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCodeOld_ReferencePlaceholderAfter(_VimTest):$/;"	c
PythonCodeOld_ReferencePlaceholderBefore	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCodeOld_ReferencePlaceholderBefore(_VimTest):$/;"	c
PythonCodeOld_SimpleExample	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCodeOld_SimpleExample(_VimTest):$/;"	c
PythonCodeOld_TransformedBeforeMultiLine	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCodeOld_TransformedBeforeMultiLine(_VimTest):$/;"	c
PythonCodeToken	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^class PythonCodeToken(Token):$/;"	c
PythonCode_AccessKilledTabstop_OverwriteFirst	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_AccessKilledTabstop_OverwriteFirst(_VimTest):$/;"	c
PythonCode_AccessKilledTabstop_OverwriteSecond	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_AccessKilledTabstop_OverwriteSecond(_VimTest):$/;"	c
PythonCode_CanOverwriteTabstop	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_CanOverwriteTabstop(_VimTest):$/;"	c
PythonCode_IndentEtSw	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_IndentEtSw(_VimTest):$/;"	c
PythonCode_IndentEtSwOffset	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_IndentEtSwOffset(_VimTest):$/;"	c
PythonCode_IndentNoetSwTs	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_IndentNoetSwTs(_VimTest):$/;"	c
PythonCode_IndentProblem	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_IndentProblem(_VimTest):$/;"	c
PythonCode_Locals	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_Locals(_VimTest):$/;"	c
PythonCode_LongerTextThanSource_Chars	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_LongerTextThanSource_Chars(_VimTest):$/;"	c
PythonCode_LongerTextThanSource_MultiLine	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_LongerTextThanSource_MultiLine(_VimTest):$/;"	c
PythonCode_MultiAppend	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_MultiAppend(_VimTest):$/;"	c
PythonCode_MultiAppendShift	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_MultiAppendShift(_VimTest):$/;"	c
PythonCode_MultiAppendShiftMethods	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_MultiAppendShiftMethods(_VimTest):$/;"	c
PythonCode_MultiAppendSimpleIndent	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_MultiAppendSimpleIndent(_VimTest):$/;"	c
PythonCode_MultilineIndented	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_MultilineIndented(_VimTest):$/;"	c
PythonCode_OptExists	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_OptExists(_VimTest):$/;"	c
PythonCode_OptNoExists	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_OptNoExists(_VimTest):$/;"	c
PythonCode_ReferencePlaceholder	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_ReferencePlaceholder(_VimTest):$/;"	c
PythonCode_ReferencePlaceholderBefore	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_ReferencePlaceholderBefore(_VimTest):$/;"	c
PythonCode_ResetIndent	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_ResetIndent(_VimTest):$/;"	c
PythonCode_SimpleAppend	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_SimpleAppend(_VimTest):$/;"	c
PythonCode_SimpleExample	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_SimpleExample(_VimTest):$/;"	c
PythonCode_SimpleExample_ReturnValueIsEmptyString	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_SimpleExample_ReturnValueIsEmptyString(_VimTest):$/;"	c
PythonCode_SimpleMkline	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_SimpleMkline(_VimTest):$/;"	c
PythonCode_TransformedBeforeMultiLine	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_TransformedBeforeMultiLine(_VimTest):$/;"	c
PythonCode_TrickyReferences	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_TrickyReferences(_VimTest):$/;"	c
PythonCode_UseNewOverOld	plugged/ultisnips/test/test_Interpolation.py	/^class PythonCode_UseNewOverOld(_VimTest):$/;"	c
PythonVisual_HasAccessToSelectedPlaceholders	plugged/ultisnips/test/test_Interpolation.py	/^class PythonVisual_HasAccessToSelectedPlaceholders(_VimTest):$/;"	c
PythonVisual_HasAccessToZeroPlaceholders	plugged/ultisnips/test/test_Interpolation.py	/^class PythonVisual_HasAccessToZeroPlaceholders(_VimTest):$/;"	c
PythonVisual_LineSelect_Simple	plugged/ultisnips/test/test_Interpolation.py	/^class PythonVisual_LineSelect_Simple(_VimTest):$/;"	c
PythonVisual_NoVisualSelection_Ignore	plugged/ultisnips/test/test_Interpolation.py	/^class PythonVisual_NoVisualSelection_Ignore(_VimTest):$/;"	c
PythonVisual_SelectOneWord	plugged/ultisnips/test/test_Interpolation.py	/^class PythonVisual_SelectOneWord(_VimTest):$/;"	c
Python_SnipRvCanBeNonText	plugged/ultisnips/test/test_Interpolation.py	/^class Python_SnipRvCanBeNonText(_VimTest):$/;"	c
Query	plugged/fzf/src/options.go	/^	Query        string$/;"	m	struct:fzf.Options	typeref:typename:string
Query	plugged/fzf/src/terminal.go	/^	Query      string       `json:"query"`$/;"	m	struct:fzf.Status	typeref:typename:string
QueueBroadcaster	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^      defmodule QueueBroadcaster do$/;"	m
Quick Start	plugged/ultisnips/README.md	/^Quick Start$/;"	s	chapter:UltiSnips
QuoteEntry	plugged/fzf/src/util/util_unix.go	/^func (x *Executor) QuoteEntry(entry string) string {$/;"	f	struct:util.Executor	typeref:typename:string
QuoteEntry	plugged/fzf/src/util/util_windows.go	/^func (x *Executor) QuoteEntry(entry string) string {$/;"	f	struct:util.Executor	typeref:typename:string
Qux	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^          class Baz::Qux$/;"	c	module:Bar.Baz
Qux	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^        class Foo::Bar::Baz::Qux$/;"	c	module:Foo.Bar.Baz
R	autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
R	plugged/splitjoin.vim/spec/plugin/r_spec.rb	/^describe "R" do$/;"	d
R	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
R	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> R  :call <SID>retry()<cr>$/;"	m
R-Vim-runtime	plugged/splitjoin.vim/spec/support/R-Vim-runtime/README.md	/^# R-Vim-runtime$/;"	c
REGEX_MAP	plugged/completor.vim/pythonx/completers/common/utils.py	/^REGEX_MAP = {$/;"	v
REPO	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^REPO = "alonid\/vim-testbed"$/;"	v
RESULTS	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    RESULTS = ((SUCCESS, 'success'),$/;"	v	class:TextLogStep
RETRY	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    RETRY = 5$/;"	v	class:TextLogStep
REVISION	plugged/fzf/Makefile	/^REVISION       := $(FZF_REVISION)$/;"	m
REVISION	plugged/fzf/Makefile	/^REVISION       := $(shell git log -n 1 --pretty=format:%h --abbrev=8 -- $(SOURCES) 2> \/dev\/nul/;"	m
ROOT_DIR	plugged/fzf/Makefile	/^ROOT_DIR       := $(shell dirname $(MAKEFILE))$/;"	m
RST2PseudoXMLLint	plugged/validator.vim/pythonx/lints/rst/rst2pseudoxml.py	/^class RST2PseudoXMLLint(Validator):$/;"	c
Racer	plugged/completor.vim/pythonx/completers/rust.py	/^class Racer(Completor):$/;"	c
Range	plugged/fzf/src/tokenizer.go	/^type Range struct {$/;"	s	package:fzf
RateLimiter	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^      defmodule RateLimiter do$/;"	m
Rationale	plugged/fzf.vim/README.md	/^Rationale$/;"	s	chapter:fzf :heart: vim
Read	plugged/fzf/src/util/util_unix.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
Read	plugged/fzf/src/util/util_windows.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
ReadJson	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    ReadJson("db-motion-cache.json") %>%$/;"	g
ReadJson	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    ReadJson("db-motion-cache.json") %>%$/;"	g
ReadSource	plugged/fzf/src/reader.go	/^func (r *Reader) ReadSource(inputChan chan string, root string, opts walkerOpts, ignores []strin/;"	f	struct:fzf.Reader
ReadZero	plugged/fzf/src/options.go	/^	ReadZero     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Reader	plugged/fzf/src/reader.go	/^type Reader struct {$/;"	s	package:fzf
Reading	plugged/fzf/src/terminal.go	/^	Reading    bool         `json:"reading"`$/;"	m	struct:fzf.Status	typeref:typename:bool
RecTabStopsWithExpandtab_SimpleExample_ECR	plugged/ultisnips/test/test_Format.py	/^class RecTabStopsWithExpandtab_SimpleExample_ECR(_ExpandTabs):$/;"	c
RecTabStopsWithExpandtab_SpecialIndentProblem_ECR	plugged/ultisnips/test/test_Format.py	/^class RecTabStopsWithExpandtab_SpecialIndentProblem_ECR(_ExpandTabs):$/;"	c
RecTabStops_BarelyNotLeavingInner_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_BarelyNotLeavingInner_ECR(_VimTest):$/;"	c
RecTabStops_ChildTriggerContainsParentTextObjects	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_ChildTriggerContainsParentTextObjects(_VimTest):$/;"	c
RecTabStops_ExpandedInZeroTSSecondTime_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_ExpandedInZeroTSSecondTime_ECR(_VimTest):$/;"	c
RecTabStops_ExpandedInZeroTSTwice_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_ExpandedInZeroTSTwice_ECR(_VimTest):$/;"	c
RecTabStops_ExpandedInZeroTS_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_ExpandedInZeroTS_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineInTabstop_ExpectCorrectResult	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineInTabstop_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_InNewlineManualIndentTextInFront_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineManualIndentTextInFront_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineManualIndent_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineManualIndent_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineMultilineWithIndent_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineMultilineWithIndent_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineMultilineWithNonZeroTS_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineMultilineWithNonZeroTS_ECR(_VimTest):$/;"	c
RecTabStops_InNewlineMultiline_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InNewlineMultiline_ECR(_VimTest):$/;"	c
RecTabStops_InnerWOTabStopTwiceDirectly_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InnerWOTabStopTwiceDirectly_ECR(_VimTest):$/;"	c
RecTabStops_InnerWOTabStopTwice_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InnerWOTabStopTwice_ECR(_VimTest):$/;"	c
RecTabStops_InnerWOTabStop_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_InnerWOTabStop_ECR(_VimTest):$/;"	c
RecTabStops_LeavingInnerInnerTwo_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_LeavingInnerInnerTwo_ECR(_VimTest):$/;"	c
RecTabStops_LeavingInnerInner_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_LeavingInnerInner_ECR(_VimTest):$/;"	c
RecTabStops_LeavingInner_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_LeavingInner_ECR(_VimTest):$/;"	c
RecTabStops_MirrorInnerSnippet_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_MirrorInnerSnippet_ECR(_VimTest):$/;"	c
RecTabStops_MirroredZeroTS_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_MirroredZeroTS_ECR(_VimTest):$/;"	c
RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_OuterOnlyWithZeroTS_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_OuterOnlyWithZeroTS_ECR(_VimTest):$/;"	c
RecTabStops_OuterOnlyWithZero_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_OuterOnlyWithZero_ECR(_VimTest):$/;"	c
RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_SimpleCase_ExpectCorrectResult	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_SimpleCase_ExpectCorrectResult(_VimTest):$/;"	c
RecTabStops_ZeroTSisNothingSpecial_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabStops_ZeroTSisNothingSpecial_ECR(_VimTest):$/;"	c
RecTabsStops_BackspaceZero_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabsStops_BackspaceZero_ECR(_VimTest):$/;"	c
RecTabsStops_TypeInZero2_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabsStops_TypeInZero2_ECR(_VimTest):$/;"	c
RecTabsStops_TypeInZero_ECR	plugged/ultisnips/test/test_Recursive.py	/^class RecTabsStops_TypeInZero_ECR(_VimTest):$/;"	c
Record syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/records_spec.rb	/^describe 'Record syntax' do$/;"	d
Reduced initial memory footprint (#151)	plugged/fzf/CHANGELOG.md	/^#### Reduced initial memory footprint (#151)$/;"	t	subsection:CHANGELOG""0.9.5""Improvements
Reducer example	plugged/fzf.vim/README.md	/^### Reducer example$/;"	S	section:fzf :heart: vim""Custom completion
ReferenceDataSignatures	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class ReferenceDataSignatures(models.Model):$/;"	c
References	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class References(Completion):$/;"	c
Refresh	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Refresh()                           {}$/;"	f	unknown:tui.FullscreenRenderer
Refresh	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Refresh() {$/;"	f	struct:tui.LightRenderer
Refresh	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Refresh() {$/;"	f	struct:tui.LightWindow
Refresh	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Refresh() {$/;"	f	unknown:tui.FullscreenRenderer
Refresh	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Refresh() {$/;"	f	struct:tui.TcellWindow
Refresh	plugged/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Renderer
Refresh	plugged/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Window
RefreshWindows	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {}$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) RefreshWindows(windows []Window) {$/;"	f	struct:tui.LightRenderer
RefreshWindows	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	plugged/fzf/src/tui/tui.go	/^	RefreshWindows(windows []Window)$/;"	n	interface:tui.Renderer
Related Projects	plugged/everforest/README.md	/^## Related Projects$/;"	s
Related Projects	plugged/vim-gutentags/README.md	/^# Related Projects$/;"	c
Related projects	plugged/fzf/README.md	/^Related projects$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Reloading the candidate list	plugged/fzf/README.md	/^### Reloading the candidate list$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
RemotePDB	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^class RemotePDB(object):$/;"	c
RemoveClosedOpenTags	plugged/MatchTagAlways/python/mta_core.py	/^  def RemoveClosedOpenTags( tags_to_close, new_tag ):$/;"	f	function:GetNextUnmatchedClosingTag	file:
RemoveTrailingWhitespace	plugged/ultisnips/test/test_Chars.py	/^class RemoveTrailingWhitespace(_VimTest):$/;"	c
Rename	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class Rename(Completion):$/;"	c
Renderer	plugged/fzf/src/tui/tui.go	/^type Renderer interface {$/;"	i	package:tui
RepeatToFill	plugged/fzf/src/util/util.go	/^func RepeatToFill(str string, length int, limit int) string {$/;"	f	package:util	typeref:typename:string
Repository	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class Repository(models.Model):$/;"	c
RepositoryGroup	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class RepositoryGroup(NamedModel):$/;"	c
Reproducing Bugs	plugged/ultisnips/CONTRIBUTING.md	/^# Reproducing Bugs$/;"	c
Requirements	plugged/completor.vim/README.md	/^Requirements$/;"	s	chapter:Completor
Requirements	plugged/validator.vim/README.md	/^Requirements$/;"	s	chapter:Validator
Reset	plugged/fzf/src/matcher.go	/^func (m *Matcher) Reset(chunks []*Chunk, patternRunes []rune, cancel bool, final bool, sort bool/;"	f	struct:fzf.Matcher
Resize	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resize(maxHeightFunc func(int) int) {}$/;"	f	unknown:tui.FullscreenRenderer
Resize	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Resize(maxHeightFunc func(int) int) {$/;"	f	struct:tui.LightRenderer
Resize	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resize(maxHeightFunc func(int) int) {}$/;"	f	unknown:tui.FullscreenRenderer
Resize	plugged/fzf/src/tui/tui.go	/^	Resize$/;"	c	package:tui
Resize	plugged/fzf/src/tui/tui.go	/^	Resize(maxHeightFunc func(int) int)$/;"	n	interface:tui.Renderer
Respecting `.gitignore`	plugged/fzf/README.md	/^### Respecting `.gitignore`$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Tips
Result	plugged/fzf/src/algo/algo.go	/^type Result struct {$/;"	s	package:algo
Result	plugged/fzf/src/result.go	/^type Result struct {$/;"	s	package:fzf
Result	plugged/fzf/src/tui/tui.go	/^	Result$/;"	c	package:tui
Resume	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resume(bool, bool)                  {}$/;"	f	unknown:tui.FullscreenRenderer
Resume	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Resume(clear bool, sigcont bool) {$/;"	f	struct:tui.LightRenderer
Resume	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resume(clear bool, sigcont bool) {$/;"	f	unknown:tui.FullscreenRenderer
Resume	plugged/fzf/src/tui/tui.go	/^	Resume(clear bool, sigcont bool)$/;"	n	interface:tui.Renderer
RetainsTheUnnamedRegister	plugged/ultisnips/test/test_Fixes.py	/^class RetainsTheUnnamedRegister(_VimTest):$/;"	c
RetainsTheUnnamedRegister_ButOnlyOnce	plugged/ultisnips/test/test_Fixes.py	/^class RetainsTheUnnamedRegister_ButOnlyOnce(_VimTest):$/;"	c
Reverse	plugged/fzf/src/tui/dummy.go	/^	Reverse       = Attr(1 << 6)$/;"	c	package:tui
Reverse	plugged/fzf/src/tui/tcell.go	/^	Reverse            = Attr(tcell.AttrReverse)$/;"	c	package:tui
ReverseFindTag	plugged/MatchTagAlways/python/mta_core.py	/^def ReverseFindTag( text, from_position ):$/;"	f
Revision	plugged/fzf/src/merger.go	/^func (mg *Merger) Revision() revision {$/;"	f	struct:fzf.Merger	typeref:typename:revision
Right	plugged/fzf/src/tui/tui.go	/^	Right$/;"	c	package:tui
RightClick	plugged/fzf/src/tui/tui.go	/^	RightClick$/;"	c	package:tui
Ripgrep integration	plugged/fzf/ADVANCED.md	/^Ripgrep integration$/;"	s	chapter:Advanced fzf examples
Rubocop	plugged/validator.vim/pythonx/lints/ruby/rubocop.py	/^class Rubocop(Validator):$/;"	c
Ruby	plugged/validator.vim/pythonx/lints/ruby/ruby.py	/^class Ruby(Validator):$/;"	c
Rumbl	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/binary_operator_spec.rb	/^  alias Rumbl.Category$/;"	a	method:hello.hello
Rumbl	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/binary_operator_spec.rb	/^  alias Rumbl.Repo$/;"	a	method:hello.hello
Run	plugged/fzf/src/core.go	/^func Run(opts *Options) (int, error) {$/;"	f	package:fzf	typeref:typename:(int, error)
Run	plugged/seoul256.vim/test/README.md	/^### Run$/;"	S	chapter:Test cases for seoul256.vim
RunAtExitFuncs	plugged/fzf/src/util/atexit.go	/^func RunAtExitFuncs() {$/;"	f	package:util
RunOnce	plugged/fzf/src/util/util.go	/^func RunOnce(f func()) func() {$/;"	f	package:util	typeref:typename:func()
Rune	plugged/fzf/src/tui/tui.go	/^	Rune EventType = iota$/;"	c	package:tui	typeref:type:EventType
RunesToChars	plugged/fzf/src/util/chars.go	/^func RunesToChars(runes []rune) Chars {$/;"	f	package:util	typeref:typename:Chars
RunesWidth	plugged/fzf/src/util/util.go	/^func RunesWidth(runes []rune, prefixWidth int, tabstop int, limit int) (int, int) {$/;"	f	package:util	typeref:typename:(int, int)
RunnableJob	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class RunnableJob(models.Model):$/;"	c
Running a test under cursor	plugged/splitjoin.vim/spec/support/rust.vim/README.md	/^### Running a test under cursor$/;"	S	section:rust.vim""Features
Running the Tests	plugged/splitjoin.vim/spec/support/vim-elixir/README.md	/^### Running the Tests$/;"	S	section:vim-elixir""Development
Running the test suite.	plugged/ultisnips/CONTRIBUTING.md	/^### Running the test suite.$/;"	S	section:Contributing to UltiSnips""Testing
Running using docker.	plugged/ultisnips/CONTRIBUTING.md	/^#### Running using docker.$/;"	t	subsection:Contributing to UltiSnips""Testing""Running the test suite.
Rust	plugged/completor.vim/README.md	/^#### Rust$/;"	t	section:Completor""Completers
Rust	plugged/splitjoin.vim/spec/support/rust.vim/ctags/rust.ctags	/^--langdef=Rust$/;"	l
RustCargoQuickFixHooks	plugged/splitjoin.vim/spec/support/rust.vim/compiler/cargo.vim	/^augroup RustCargoQuickFixHooks$/;"	a
RustEmitAsm	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^command! -nargs=* -buffer RustEmitAsm call rust#Emit("asm", <q-args>)$/;"	c
RustEmitIr	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^command! -nargs=* -buffer RustEmitIr call rust#Emit("llvm-ir", <q-args>)$/;"	c
RustExpand	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^command! -nargs=* -complete=customlist,rust#CompleteExpand -bang -buffer RustExpand call rust#Ex/;"	c
RustFmt	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^command! -bar -buffer RustFmt call rustfmt#Format()$/;"	c
RustFmtRange	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^command! -range -buffer RustFmtRange call rustfmt#FormatRange(<line1>, <line2>)$/;"	c
RustInfo	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^command! -bar RustInfo call rust#debugging#Info()$/;"	c
RustInfoToClipboard	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^command! -bar RustInfoToClipboard call rust#debugging#InfoToClipboard()$/;"	c
RustInfoToFile	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^command! -bar -nargs=1 RustInfoToFile call rust#debugging#InfoToFile(<f-args>)$/;"	c
RustPlay	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^command! -range=% RustPlay :call rust#Play(<count>, <line1>, <line2>, <f-args>)$/;"	c
RustRun	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^command! -nargs=* -complete=file -bang -buffer RustRun call rust#Run(<bang>0, <q-args>)$/;"	c
RustTest	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^command! -buffer -nargs=* -count -bang RustTest call rust#Test(<q-mods>, <count>, <bang>0, <q-ar/;"	c
S	autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
S	plugged/fzf/src/tui/tui.go	/^	S      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
S	plugged/vim-abolish/plugin/abolish.vim	/^  command -nargs=1 -bang -bar -range=0 -complete=custom,s:SubComplete S$/;"	c
S	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
S	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> S  :PlugStatus<cr>$/;"	m
S	plugged/vim-surround/plugin/surround.vim	/^  xmap S   <Plug>VSurround$/;"	m
SEE	plugged/fzf/man/man1/fzf.1	/^.SH SEE ALSO$/;"	s	title:fzf
SELF_CLOSED	plugged/MatchTagAlways/python/mta_core.py	/^  SELF_CLOSED = 3$/;"	v	class:TagType
SEQUENCES	plugged/ultisnips/test/constant.py	/^SEQUENCES = [ARR_L, ARR_R, ARR_U, ARR_D]$/;"	v
SHELL	plugged/fzf/Makefile	/^SHELL          := bash$/;"	m
SKIPPED	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    SKIPPED = 3$/;"	v	class:Job
SKIPPED	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    SKIPPED = 3$/;"	v	class:TextLogStep
SLeftClick	plugged/fzf/src/tui/tui.go	/^	SLeftClick$/;"	c	package:tui
SNIPMATE_SNIPPET_PRIORITY	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/snipmate.py	/^    SNIPMATE_SNIPPET_PRIORITY = -1000$/;"	v	class:SnipMateSnippetDefinition
SOURCES	plugged/fzf/Makefile	/^SOURCES        := $(wildcard *.go src\/*.go src\/*\/*.go shell\/*sh man\/man1\/*.1) $(MAKEFILE)$/;"	m
SRightClick	plugged/fzf/src/tui/tui.go	/^	SRightClick$/;"	c	package:tui
SScrollDown	plugged/fzf/src/tui/tui.go	/^	SScrollDown$/;"	c	package:tui
SScrollUp	plugged/fzf/src/tui/tui.go	/^	SScrollUp$/;"	c	package:tui
START_NO_DIRNAME	plugged/completor.vim/pythonx/completers/common/filename.py	/^START_NO_DIRNAME = re.compile(r'^(\\.{0,2}\/|~\/|[a-zA-Z]:\/|\\$)')$/;"	v
STATUSES	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    STATUSES = ((PENDING, 'pending'),$/;"	v	class:JobLog
STATUS_CHOICES	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    STATUS_CHOICES = list(zip(STATUS_LIST, STATUS_LIST))$/;"	v	class:FailureLine
STATUS_LIST	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    STATUS_LIST = ('PASS', 'FAIL', 'OK', 'ERROR', 'TIMEOUT', 'CRASH', 'ASSERT', 'SKIP', 'NOTRUN'/;"	v	class:FailureLine
SUCCESS	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    SUCCESS = 0$/;"	v	class:TextLogStep
SUPERSEDED	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    SUPERSEDED = 8$/;"	v	class:TextLogStep
SYNOPSIS	plugged/fzf/man/man1/fzf-tmux.1	/^.SH SYNOPSIS$/;"	s	title:fzf\\-tmux
SYNOPSIS	plugged/fzf/man/man1/fzf.1	/^.SH SYNOPSIS$/;"	s	title:fzf
SanitizeRLine	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^function SanitizeRLine(line)$/;"	f
Scheme	plugged/fzf/src/options.go	/^	Scheme       string$/;"	m	struct:fzf.Options	typeref:typename:string
Scope	plugged/splitjoin.vim/CODE_OF_CONDUCT.md	/^## Scope$/;"	s	chapter:Contributor Covenant Code of Conduct
Score	plugged/fzf/src/algo/algo.go	/^	Score int$/;"	m	struct:algo.Result	typeref:typename:int
Screencasts	plugged/ultisnips/README.md	/^Screencasts$/;"	s	chapter:UltiSnips
Screencasts	plugged/vim-fugitive/README.markdown	/^## Screencasts$/;"	s	chapter:fugitive.vim
Screenshots	plugged/everforest/.github/pull_request_template.md	/^### Screenshots$/;"	S
ScrollDown	plugged/fzf/src/tui/tui.go	/^	ScrollDown$/;"	c	package:tui
ScrollOff	plugged/fzf/src/options.go	/^	ScrollOff    int$/;"	m	struct:fzf.Options	typeref:typename:int
ScrollUp	plugged/fzf/src/tui/tui.go	/^	ScrollUp$/;"	c	package:tui
Scrollbar	plugged/fzf/src/options.go	/^	Scrollbar    *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Scrollbar	plugged/fzf/src/tui/tui.go	/^	Scrollbar        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Search	plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Search(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Search syntax	plugged/fzf/README.md	/^### Search syntax$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
See also:	plugged/splitjoin.vim/spec/support/R-Vim-runtime/README.md	/^## See also:$/;"	s	chapter:R-Vim-runtime
Select1	plugged/fzf/src/options.go	/^	Select1      bool$/;"	m	struct:fzf.Options	typeref:typename:bool
SelectModeMappings_BufferLocalMappings_ECR	plugged/ultisnips/test/test_Selection.py	/^class SelectModeMappings_BufferLocalMappings_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_DisableRemoveBeforeSelecting_ECR	plugged/ultisnips/test/test_Selection.py	/^class SelectModeMappings_DisableRemoveBeforeSelecting_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_IgnoreMappings1_ECR	plugged/ultisnips/test/test_Selection.py	/^class SelectModeMappings_IgnoreMappings1_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_IgnoreMappings2_ECR	plugged/ultisnips/test/test_Selection.py	/^class SelectModeMappings_IgnoreMappings2_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_IgnoreMappings_ECR	plugged/ultisnips/test/test_Selection.py	/^class SelectModeMappings_IgnoreMappings_ECR(_SelectModeMappings):$/;"	c
SelectModeMappings_RemoveBeforeSelecting_ECR	plugged/ultisnips/test/test_Selection.py	/^class SelectModeMappings_RemoveBeforeSelecting_ECR(_SelectModeMappings):$/;"	c
Selected	plugged/fzf/src/terminal.go	/^	Selected   []StatusItem `json:"selected"`$/;"	m	struct:fzf.Status	typeref:typename:[]StatusItem
SelectedBg	plugged/fzf/src/tui/tui.go	/^	SelectedBg       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
SelectedFg	plugged/fzf/src/tui/tui.go	/^	SelectedFg       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
SelectedMatch	plugged/fzf/src/tui/tui.go	/^	SelectedMatch    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Self-Promotion	plugged/vim-abolish/README.markdown	/^## Self-Promotion$/;"	s	chapter:abolish.vim
Self-Promotion	plugged/vim-commentary/README.markdown	/^## Self-Promotion$/;"	s	chapter:commentary.vim
Self-Promotion	plugged/vim-fugitive/README.markdown	/^## Self-Promotion$/;"	s	chapter:fugitive.vim
Self-Promotion	plugged/vim-repeat/README.markdown	/^## Self-Promotion$/;"	s	chapter:repeat.vim
Self-Promotion	plugged/vim-surround/README.markdown	/^## Self-Promotion$/;"	s	chapter:surround.vim
Separator	plugged/fzf/src/options.go	/^	Separator    *string$/;"	m	struct:fzf.Options	typeref:typename:*string
Separator	plugged/fzf/src/tui/tui.go	/^	Separator        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Set	plugged/fzf/src/terminal.go	/^func (s *resumableState) Set(flag bool) {$/;"	f	type:fzf.resumableState
Set	plugged/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Set(newState bool) bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Set	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Set(event EventType, value interface{}) {$/;"	f	struct:util.EventBox
SetNonblock	plugged/fzf/src/util/util_unix.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetNonblock	plugged/fzf/src/util/util_windows.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetStdin	plugged/fzf/src/util/util_unix.go	/^func SetStdin(file *os.File) {$/;"	f	package:util
SetStdin	plugged/fzf/src/util/util_windows.go	/^func SetStdin(file *os.File) {$/;"	f	package:util
Setting up shell integration	plugged/fzf/README.md	/^### Setting up shell integration$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Settings	plugged/fzf/README.md	/^### Settings$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
ShLint	plugged/validator.vim/pythonx/lints/sh/sh.py	/^class ShLint(Validator):$/;"	c
Shell	plugged/fzf/test/test_go.rb	/^class Shell$/;"	c
ShellCode	plugged/ultisnips/pythonx/UltiSnips/text_objects/shell_code.py	/^class ShellCode(NoneditableTextObject):$/;"	c
ShellCodeToken	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^class ShellCodeToken(Token):$/;"	c
ShellcheckLint	plugged/validator.vim/pythonx/lints/sh/shellcheck.py	/^class ShellcheckLint(Validator):$/;"	c
ShiftDelete	plugged/fzf/src/tui/tui.go	/^	ShiftDelete$/;"	c	package:tui
ShiftDown	plugged/fzf/src/tui/tui.go	/^	ShiftDown$/;"	c	package:tui
ShiftLeft	plugged/fzf/src/tui/tui.go	/^	ShiftLeft$/;"	c	package:tui
ShiftRight	plugged/fzf/src/tui/tui.go	/^	ShiftRight$/;"	c	package:tui
ShiftTab	plugged/fzf/src/tui/tui.go	/^	ShiftTab$/;"	c	package:tui
ShiftUp	plugged/fzf/src/tui/tui.go	/^	ShiftUp$/;"	c	package:tui
ShiftWidthZero	plugged/ultisnips/test/test_Fixes.py	/^class ShiftWidthZero(_VimTest):$/;"	c
ShouldEmitResizeEvent	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) ShouldEmitResizeEvent() bool        { return false }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:bool
ShouldEmitResizeEvent	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) ShouldEmitResizeEvent() bool {$/;"	f	struct:tui.LightRenderer	typeref:typename:bool
ShouldEmitResizeEvent	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) ShouldEmitResizeEvent() bool {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:bool
ShouldEmitResizeEvent	plugged/fzf/src/tui/tui.go	/^	ShouldEmitResizeEvent() bool$/;"	n	interface:tui.Renderer	typeref:typename:bool
ShowUsage	plugged/vim-gutentags/plat/unix/update_gtags.sh	/^ShowUsage() {$/;"	f
ShowUsage	plugged/vim-gutentags/plat/unix/update_pyscopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
Sigil syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/sigil_spec.rb	/^describe 'Sigil syntax' do$/;"	d
Signature	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class Signature(Completion):$/;"	c
SimpleExpandEndingWithNewline_ExpectCorrectResult	plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandEndingWithNewline_ExpectCorrectResult(_VimTest):$/;"	c
SimpleExpandExpandOrJump_Ambiguity	plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandExpandOrJump_Ambiguity(_VimTest):$/;"	c
SimpleExpandExpandOrJump_Expand	plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandExpandOrJump_Expand(_VimTest):$/;"	c
SimpleExpandJumpOrExpand_Ambiguity	plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandJumpOrExpand_Ambiguity(_VimTest):$/;"	c
SimpleExpandJumpOrExpand_Expand	plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandJumpOrExpand_Expand(_VimTest):$/;"	c
SimpleExpandNewLineAndBackspae_ExpectCorrectResult	plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandNewLineAndBackspae_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpandTwice_ExpectCorrectResult	plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandTwice_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpandTypeAfterExpand_ExpectCorrectResult	plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandTypeAfterExpand_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpandTypeAndDelete_ExpectCorrectResult	plugged/ultisnips/test/test_Expand.py	/^class SimpleExpandTypeAndDelete_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpand_DoNotClobberDefaultRegister	plugged/ultisnips/test/test_Expand.py	/^class SimpleExpand_DoNotClobberDefaultRegister(_VimTest):$/;"	c
SimpleExpand_ExpectCorrectResult	plugged/ultisnips/test/test_Expand.py	/^class SimpleExpand_ExpectCorrectResult(_SimpleExpands):$/;"	c
SimpleExpand_Issue1343	plugged/ultisnips/test/test_Expand.py	/^class SimpleExpand_Issue1343(_VimTest):$/;"	c
SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorDelete_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorDelete_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorMultilineMany_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorMultilineMany_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR(_VimTest):$/;"	c
SimpleMirrorSameLineBeforeTabDefVal_ECR	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLineBeforeTabDefVal_ECR(_VimTest):$/;"	c
SimpleMirrorSameLineManyMultiline_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLineManyMultiline_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLineMany_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLineMany_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLineNoSpaceInsideOtherSpaceAfter_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLineNoSpaceInsideOtherSpaceAfter_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLineNoSpaceInsideOther_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLineNoSpaceInsideOther_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLineNoSpaceSpaceAfter_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLineNoSpaceSpaceAfter_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLineNoSpace_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLineNoSpace_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLine_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLine_ExpectCorrectResult(_VimTest):$/;"	c
SimpleMirrorSameLine_InText_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleMirrorSameLine_InText_ExpectCorrectResult(_VimTest):$/;"	c
SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult(_VimTest):$/;"	c
SimpleTabstopWithDefaultComplexType_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleTabstopWithDefaultComplexType_ExpectCorrectResult(_VimTest):$/;"	c
SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult(_VimTest):$/;"	c
SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult(_VimTest):$/;"	c
Size	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Size() TermSize                     { return TermSize{} }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:TermSize
Size	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) Size() TermSize {$/;"	f	unknown:tui.LightRenderer	typeref:typename:TermSize
Size	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) Size() TermSize {$/;"	f	unknown:tui.LightRenderer	typeref:typename:TermSize
Size	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Size() TermSize {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:TermSize
Size	plugged/fzf/src/tui/tui.go	/^	Size() TermSize$/;"	n	interface:tui.Renderer	typeref:typename:TermSize
Slab	plugged/fzf/src/util/slab.go	/^type Slab struct {$/;"	s	package:util
Snapshot	plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Snapshot(tail int) ([]*Chunk, int, bool) {$/;"	f	struct:fzf.ChunkList	typeref:typename:([]*Chunk, int, bool)
SnipMateFileSource	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^class SnipMateFileSource(SnippetFileSource):$/;"	c
SnipMateSnippetDefinition	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/snipmate.py	/^class SnipMateSnippetDefinition(SnippetDefinition):$/;"	c
SnippetActions_CanEvenWrapSnippetInPreAction	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanEvenWrapSnippetInPreAction(_VimTest):$/;"	c
SnippetActions_CanExpandAnonOnPreExpand	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanExpandAnonOnPreExpand(_VimTest):$/;"	c
SnippetActions_CanExpandAnonSnippetInJumpAction	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanExpandAnonSnippetInJumpAction(_VimTest):$/;"	c
SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected(_VimTest):$/;"	c
SnippetActions_CanExpandAnonSnippetOnFirstJump	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanExpandAnonSnippetOnFirstJump(_VimTest):$/;"	c
SnippetActions_CanExpandSnippetInDifferentPlace	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanExpandSnippetInDifferentPlace(_VimTest):$/;"	c
SnippetActions_CanMirrorTabStopsOutsideOfSnippet	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanMirrorTabStopsOutsideOfSnippet(_VimTest):$/;"	c
SnippetActions_CanModifyParentBody	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanModifyParentBody(_VimTest):$/;"	c
SnippetActions_CanUseContextFromContextMatch	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanUseContextFromContextMatch(_VimTest):$/;"	c
SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre(_VimTest):$/;"	c
SnippetActions_DoNotBreakCursorOnSingleLikeChange	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_DoNotBreakCursorOnSingleLikeChange(_VimTest):$/;"	c
SnippetActions_EnsureIndent	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_EnsureIndent(_VimTest):$/;"	c
SnippetActions_ErrorOnBufferModificationThroughCommand	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_ErrorOnBufferModificationThroughCommand(_VimTest):$/;"	c
SnippetActions_ErrorOnModificationSnippetLine	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_ErrorOnModificationSnippetLine(_VimTest):$/;"	c
SnippetActions_MoveParentSnippetFromChildInPreAction	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_MoveParentSnippetFromChildInPreAction(_VimTest):$/;"	c
SnippetActions_MoveVisual	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_MoveVisual(_VimTest):$/;"	c
SnippetActions_PostActionCanUseSnippetRange	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_PostActionCanUseSnippetRange(_VimTest):$/;"	c
SnippetActions_PostActionModifiesBuffer	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_PostActionModifiesBuffer(_VimTest):$/;"	c
SnippetActions_PostActionModifiesCharAfterSnippet	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_PostActionModifiesCharAfterSnippet(_VimTest):$/;"	c
SnippetActions_PostActionModifiesLineAfterSnippet	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_PostActionModifiesLineAfterSnippet(_VimTest):$/;"	c
SnippetActions_PreActionModifiesBuffer	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_PreActionModifiesBuffer(_VimTest):$/;"	c
SnippetActions_UseCorrectJumpActions	plugged/ultisnips/test/test_SnippetActions.py	/^class SnippetActions_UseCorrectJumpActions(_VimTest):$/;"	c
SnippetDefinition	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^class SnippetDefinition:$/;"	c
SnippetDictionary	plugged/ultisnips/pythonx/UltiSnips/snippet/source/snippet_dictionary.py	/^class SnippetDictionary:$/;"	c
SnippetFileSource	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/base.py	/^class SnippetFileSource(SnippetSource):$/;"	c
SnippetInstance	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^class SnippetInstance(EditableTextObject):$/;"	c
SnippetManager	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^class SnippetManager:$/;"	c
SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand(_VimTest):$/;"	c
SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2(_VimTest):$/;"	c
SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3(_VimTest):$/;"	c
SnippetOptions_ExpandInwordSnippets_ExpandSingle	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippets_ExpandSingle(_VimTest):$/;"	c
SnippetOptions_ExpandInwordSnippets_SimpleExpand	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandInwordSnippets_SimpleExpand(_VimTest):$/;"	c
SnippetOptions_ExpandWordSnippets_ExpandSuffix	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_ExpandSuffix($/;"	c
SnippetOptions_ExpandWordSnippets_ExpandSuffix2	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_ExpandSuffix2($/;"	c
SnippetOptions_ExpandWordSnippets_ExpandSuffix3	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_ExpandSuffix3($/;"	c
SnippetOptions_ExpandWordSnippets_NoExpand	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_NoExpand(_SnippetOptions_ExpandWordSnippets):$/;"	c
SnippetOptions_ExpandWordSnippets_NormalExpand	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_ExpandWordSnippets_NormalExpand($/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_DontExpand	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_DontExpand(_VimTest):$/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_Expand	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_Expand(_VimTest):$/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_Expand2	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_Expand2(_VimTest):$/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO(_VimTest):$/;"	c
SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose(_VimTest):$/;"	c
SnippetOptions_Regex_Expand	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_Expand(_VimTest):$/;"	c
SnippetOptions_Regex_Multiple	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_Multiple(_VimTest):$/;"	c
SnippetOptions_Regex_PythonBlockMatch	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_PythonBlockMatch(_VimTest):$/;"	c
SnippetOptions_Regex_PythonBlockNoMatch	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_PythonBlockNoMatch(_VimTest):$/;"	c
SnippetOptions_Regex_SameLine_Long_End	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_SameLine_Long_End(_VimTest):$/;"	c
SnippetOptions_Regex_SameLine_Long_Start	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_SameLine_Long_Start(_VimTest):$/;"	c
SnippetOptions_Regex_SameLine_Simple	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_SameLine_Simple(_VimTest):$/;"	c
SnippetOptions_Regex_Self_Space	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_Self_Space(_Regex_Self):$/;"	c
SnippetOptions_Regex_Self_Start	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_Self_Start(_Regex_Self):$/;"	c
SnippetOptions_Regex_Self_TextAfter	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_Self_TextAfter(_Regex_Self):$/;"	c
SnippetOptions_Regex_Self_TextBefore	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_Self_TextBefore(_Regex_Self):$/;"	c
SnippetOptions_Regex_WithSpace	plugged/ultisnips/test/test_SnippetOptions.py	/^class SnippetOptions_Regex_WithSpace(_VimTest):$/;"	c
SnippetPriorities_AddedHasHigherThanFile	plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_AddedHasHigherThanFile(_VimTest):$/;"	c
SnippetPriorities_ClearedByChild	plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_ClearedByChild(_VimTest):$/;"	c
SnippetPriorities_ClearedByParent	plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_ClearedByParent(_VimTest):$/;"	c
SnippetPriorities_DoNotCareAboutNonMatchings	plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_DoNotCareAboutNonMatchings(_VimTest):$/;"	c
SnippetPriorities_FileHasHigherThanAdded	plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_FileHasHigherThanAdded(_VimTest):$/;"	c
SnippetPriorities_FileHasHigherThanAdded_neg_prio	plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_FileHasHigherThanAdded_neg_prio(_VimTest):$/;"	c
SnippetPriorities_MultiWordTriggerOverwriteExisting	plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_MultiWordTriggerOverwriteExisting(_VimTest):$/;"	c
SnippetPriorities_OverwriteExisting	plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_OverwriteExisting(_VimTest):$/;"	c
SnippetPriorities_OverwriteThenChoose_ECR	plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_OverwriteThenChoose_ECR(_VimTest):$/;"	c
SnippetPriorities_OverwriteTwice_ECR	plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_OverwriteTwice_ECR(_VimTest):$/;"	c
SnippetPriorities_SimpleClear	plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_SimpleClear(_VimTest):$/;"	c
SnippetPriorities_SimpleClear2	plugged/ultisnips/test/test_SnippetPriorities.py	/^class SnippetPriorities_SimpleClear2(_VimTest):$/;"	c
SnippetSource	plugged/ultisnips/pythonx/UltiSnips/snippet/source/base.py	/^class SnippetSource:$/;"	c
SnippetSyntaxError	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/base.py	/^class SnippetSyntaxError(PebkacError):$/;"	c
SnippetUtil	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^class SnippetUtil:$/;"	c
SnippetUtilForAction	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^class SnippetUtilForAction(dict):$/;"	c
Snippet_With_DoubleQuote	plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_DoubleQuote(_VimTest):$/;"	c
Snippet_With_DoubleQuote_List	plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_DoubleQuote_List(_VimTest):$/;"	c
Snippet_With_SingleQuote	plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_SingleQuote(_VimTest):$/;"	c
Snippet_With_SingleQuote_List	plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_SingleQuote_List(_VimTest):$/;"	c
Snippet_With_Umlauts	plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_List	plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_List(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_Mirrors	plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_Mirrors(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_OverwriteFirst	plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_OverwriteFirst(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_OverwriteNone	plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_OverwriteNone(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_OverwriteSecond	plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_OverwriteSecond(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_Python	plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_Python(_UmlautsBase):$/;"	c
Snippet_With_Umlauts_TypeOn	plugged/ultisnips/test/test_Chars.py	/^class Snippet_With_Umlauts_TypeOn(_UmlautsBase):$/;"	c
Sort	plugged/fzf/src/options.go	/^	Sort         int$/;"	m	struct:fzf.Options	typeref:typename:int
Sort	plugged/fzf/src/terminal.go	/^	Sort       bool         `json:"sort"`$/;"	m	struct:fzf.Status	typeref:typename:bool
Source	plugged/ultisnips/rplugin/python3/deoplete/sources/ultisnips.py	/^class Source(Base):$/;"	c
Source browsing with [Tagbar][tgbr]	plugged/splitjoin.vim/spec/support/rust.vim/README.md	/^### Source browsing with [Tagbar][tgbr]$/;"	S	section:rust.vim""Features
Spinner	plugged/fzf/src/tui/tui.go	/^	Spinner          ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
SplitCDeclarations	plugged/splitjoin.vim/spec/support/tabular/after/plugin/TabularMaps.vim	/^function! SplitCDeclarations(lines)$/;"	f
SplitjoinJoin	plugged/splitjoin.vim/plugin/splitjoin.vim	/^command! SplitjoinJoin  call sj#Join()$/;"	c
SplitjoinSplit	plugged/splitjoin.vim/plugin/splitjoin.vim	/^command! SplitjoinSplit call sj#Split()$/;"	c
Sponsors ❤️	plugged/fzf/README.md	/^Sponsors ❤️$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Standard	plugged/papercolor-theme/DESIGN.md	/^## Standard$/;"	s	chapter:Color Names
Standard	plugged/validator.vim/pythonx/lints/javascript/standard.py	/^class Standard(Validator):$/;"	c
Start	plugged/fzf/src/algo/algo.go	/^	Start int$/;"	m	struct:algo.Result	typeref:typename:int
Start	plugged/fzf/src/tui/tui.go	/^	Start$/;"	c	package:tui
Start Vim with a minimal configuration	plugged/fzf.vim/.github/ISSUE_TEMPLATE.md	/^Start Vim with a minimal configuration$/;"	c
Starting fzf in a popup window	plugged/fzf/README-VIM.md	/^### Starting fzf in a popup window$/;"	S	section:FZF Vim integration""Tips
Status	plugged/fzf/src/terminal.go	/^type Status struct {$/;"	s	package:fzf
Status line of terminal buffer	plugged/fzf.vim/README.md	/^Status line of terminal buffer$/;"	s	chapter:fzf :heart: vim
StatusItem	plugged/fzf/src/terminal.go	/^type StatusItem struct {$/;"	s	package:fzf
Stop	plugged/fzf/src/matcher.go	/^func (m *Matcher) Stop() {$/;"	f	struct:fzf.Matcher
StrikeThrough	plugged/fzf/src/tui/dummy.go	/^	StrikeThrough = Attr(1 << 7)$/;"	c	package:tui
StrikeThrough	plugged/fzf/src/tui/tcell.go	/^	StrikeThrough      = Attr(tcell.AttrStrikeThrough)$/;"	c	package:tui
String	plugged/fzf/src/actiontype_string.go	/^func (i actionType) String() string {$/;"	f	unknown:fzf.actionType	typeref:typename:string
String	plugged/fzf/src/options.go	/^func (s sizeSpec) String() string {$/;"	f	struct:fzf.sizeSpec	typeref:typename:string
String	plugged/fzf/src/pattern.go	/^func (t term) String() string {$/;"	f	struct:fzf.term	typeref:typename:string
String	plugged/fzf/src/terminal_test.go	/^func (item *Item) String() string {$/;"	f	unknown:fzf.Item	typeref:typename:string
String	plugged/fzf/src/tokenizer.go	/^func (d Delimiter) String() string {$/;"	f	struct:fzf.Delimiter	typeref:typename:string
String	plugged/fzf/src/tokenizer.go	/^func (t Token) String() string {$/;"	f	struct:fzf.Token	typeref:typename:string
String	plugged/fzf/src/tui/eventtype_string.go	/^func (i EventType) String() string {$/;"	f	unknown:tui.EventType	typeref:typename:string
String	plugged/fzf/src/util/chars.go	/^func (chars *Chars) String() string {$/;"	f	struct:util.Chars	typeref:typename:string
String syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/strings_spec.rb	/^describe 'String syntax' do$/;"	d
StringWidth	plugged/fzf/src/util/util.go	/^func StringWidth(s string) int {$/;"	f	package:util	typeref:typename:int
Struct syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/struct_spec.rb	/^describe 'Struct syntax' do$/;"	d
Style	plugged/fzf/src/tui/tcell.go	/^func (c Color) Style() tcell.Color {$/;"	f	unknown:tui.Color	typeref:typename:tcell.Color
Substitution	plugged/vim-abolish/README.markdown	/^## Substitution$/;"	s	chapter:abolish.vim
Subvert	plugged/vim-abolish/plugin/abolish.vim	/^command! -nargs=1 -bang -bar -range=0 -complete=custom,s:SubComplete Subvert$/;"	c
SuffixMatch	plugged/fzf/src/algo/algo.go	/^func SuffixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Summary	plugged/fzf/README-VIM.md	/^Summary$/;"	s	chapter:FZF Vim integration
Support	plugged/splitjoin.vim/spec/support/vim.rb	/^module Support$/;"	m
Supported commands	plugged/fzf/README.md	/^### Supported commands$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Swap	plugged/fzf/src/result.go	/^func (a ByOrder) Swap(i, j int) {$/;"	f	type:fzf.ByOrder
Swap	plugged/fzf/src/result.go	/^func (a ByRelevance) Swap(i, j int) {$/;"	f	type:fzf.ByRelevance
Swap	plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Swap(i, j int) {$/;"	f	type:fzf.ByRelevanceTac
Swap	plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Swap(i, j int) {$/;"	f	type:fzf.byTimeOrder
Switching between Ripgrep mode and fzf mode	plugged/fzf/ADVANCED.md	/^### Switching between Ripgrep mode and fzf mode$/;"	S	section:Advanced fzf examples""Ripgrep integration
Switching between Ripgrep mode and fzf mode using a single key binding	plugged/fzf/ADVANCED.md	/^### Switching between Ripgrep mode and fzf mode using a single key binding$/;"	S	section:Advanced fzf examples""Ripgrep integration
Switching to fzf-only search mode	plugged/fzf/ADVANCED.md	/^### Switching to fzf-only search mode$/;"	S	section:Advanced fzf examples""Ripgrep integration
Symbol	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class Symbol(Base):$/;"	c
Sync	plugged/fzf/src/options.go	/^	Sync         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Syntax highlight bug	plugged/splitjoin.vim/spec/support/R-Vim-runtime/README.md	/^### Syntax highlight bug$/;"	S	section:R-Vim-runtime""Known bugs
SyntaxCheckers_rust_cargo_GetLocList	plugged/splitjoin.vim/spec/support/rust.vim/syntax_checkers/rust/cargo.vim	/^function! SyntaxCheckers_rust_cargo_GetLocList() dict$/;"	f
SyntaxCheckers_rust_cargo_IsAvailable	plugged/splitjoin.vim/spec/support/rust.vim/syntax_checkers/rust/cargo.vim	/^function! SyntaxCheckers_rust_cargo_IsAvailable() dict$/;"	f
SyntaxCheckers_rust_rustc_GetLocList	plugged/splitjoin.vim/spec/support/rust.vim/syntax_checkers/rust/rustc.vim	/^function! SyntaxCheckers_rust_rustc_GetLocList() dict$/;"	f
TAG	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^TAG = "10-rust.vim"$/;"	v
TAGS_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
TAG_REGEX	plugged/MatchTagAlways/python/mta_core.py	/^TAG_REGEX = re.compile($/;"	v
TAG_REGEX_Works_test	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^def TAG_REGEX_Works_test():$/;"	f
TEMPLATE	plugged/fzf/test/test_go.rb	/^TEMPLATE = DATA.read$/;"	C
TEMPNAME	plugged/fzf/test/test_go.rb	/^  TEMPNAME = Dir::Tmpname.create(%w[fzf]) {}$/;"	C	class:TestBase
TEST_FAILED	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    TEST_FAILED = 1$/;"	v	class:TextLogStep
Tab	plugged/fzf/src/tui/tui.go	/^	Tab$/;"	c	package:tui
TabStop	plugged/ultisnips/pythonx/UltiSnips/text_objects/tabstop.py	/^class TabStop(EditableTextObject):$/;"	c
TabStopEscapingWhenSelectedNoCharTS_ECR	plugged/ultisnips/test/test_TabStop.py	/^class TabStopEscapingWhenSelectedNoCharTS_ECR(_VimTest):$/;"	c
TabStopEscapingWhenSelectedSingleCharTS_ECR	plugged/ultisnips/test/test_TabStop.py	/^class TabStopEscapingWhenSelectedSingleCharTS_ECR(_VimTest):$/;"	c
TabStopEscapingWhenSelected_ECR	plugged/ultisnips/test/test_TabStop.py	/^class TabStopEscapingWhenSelected_ECR(_VimTest):$/;"	c
TabStopNavigatingInInsertModeSimple_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopNavigatingInInsertModeSimple_ExpectCorrectResult(_VimTest):$/;"	c
TabStopNoReplace_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopNoReplace_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplaceReversed_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopSimpleReplaceReversed_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplaceSurrounded1_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopSimpleReplaceSurrounded1_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplaceSurrounded_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopSimpleReplaceSurrounded_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult(_VimTest):$/;"	c
TabStopSimpleReplace_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopSimpleReplace_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestBackwardJumping2_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestBackwardJumping2_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestBackwardJumping_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestBackwardJumping_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestJumping2_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestJumping2_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestJumping_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestJumping_ExpectCorrectResult(_VimTest):$/;"	c
TabStopTestMultilineExpand_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopTestMultilineExpand_ExpectCorrectResult(_VimTest):$/;"	c
TabStopToken	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^class TabStopToken(Token):$/;"	c
TabStopWithOneChar_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStopWithOneChar_ExpectCorrectResult(_VimTest):$/;"	c
TabStop_AdjacentTabStopAddText_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_AdjacentTabStopAddText_ExpectCorrectResult(_VimTest):$/;"	c
TabStop_CROnlyOnSelectedNear	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_CROnlyOnSelectedNear(_VimTest):$/;"	c
TabStop_EscapingCharsBackticks	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingCharsBackticks(_VimTest):$/;"	c
TabStop_EscapingCharsDollars	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingCharsDollars(_VimTest):$/;"	c
TabStop_EscapingCharsDollars1	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingCharsDollars1(_VimTest):$/;"	c
TabStop_EscapingCharsDollars_BeginningOfDefinitionText	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingCharsDollars_BeginningOfDefinitionText(_VimTest):$/;"	c
TabStop_EscapingCharsDollars_BeginningOfLine	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingCharsDollars_BeginningOfLine(_VimTest):$/;"	c
TabStop_EscapingChars_Backslash	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingChars_Backslash(_VimTest):$/;"	c
TabStop_EscapingChars_Backslash2	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingChars_Backslash2(_VimTest):$/;"	c
TabStop_EscapingChars_Backslash3	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingChars_Backslash3(_VimTest):$/;"	c
TabStop_EscapingChars_Backslash4	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingChars_Backslash4(_VimTest):$/;"	c
TabStop_EscapingChars_RealLife	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_EscapingChars_RealLife(_VimTest):$/;"	c
TabStop_Exit_ExpectCorrectResult	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_Exit_ExpectCorrectResult(_VimTest):$/;"	c
TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet(_VimTest):$/;"	c
TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE(_VimTest):$/;"	c
TabStop_Multiline_DelFirstOverwriteSecond_Overwrite	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_Multiline_DelFirstOverwriteSecond_Overwrite(_VimTest):$/;"	c
TabStop_Multiline_Leave	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_Multiline_Leave(_VimTest):$/;"	c
TabStop_Multiline_MirrorInFront_Leave	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_Multiline_MirrorInFront_Leave(_VimTest):$/;"	c
TabStop_Multiline_MirrorInFront_Overwrite	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_Multiline_MirrorInFront_Overwrite(_VimTest):$/;"	c
TabStop_Multiline_Overwrite	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_Multiline_Overwrite(_VimTest):$/;"	c
TabStop_Shell_InDefValue_Leave	plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_InDefValue_Leave(_VimTest):$/;"	c
TabStop_Shell_InDefValue_Overwrite	plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_InDefValue_Overwrite(_VimTest):$/;"	c
TabStop_Shell_ShebangPython	plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_ShebangPython(_VimTest):$/;"	c
TabStop_Shell_SimpleExample	plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_SimpleExample(_VimTest):$/;"	c
TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite	plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite(_VimTest):$/;"	c
TabStop_Shell_TestEscapedChars_Overwrite	plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_TestEscapedChars_Overwrite(_VimTest):$/;"	c
TabStop_Shell_TextInNextLine	plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_TextInNextLine(_VimTest):$/;"	c
TabStop_Shell_WithUmlauts	plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_Shell_WithUmlauts(_VimTest):$/;"	c
TabStop_TSInDefaultNested_OverwriteOneJumpAround	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultNested_OverwriteOneJumpAround(_VimTest):$/;"	c
TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther(_VimTest):$/;"	c
TabStop_TSInDefaultNested_OverwriteOneJumpToThird	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultNested_OverwriteOneJumpToThird(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_DeleteFirst	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_DeleteFirst(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteSecond	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteSecond(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack(_VimTest):$/;"	c
TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice(_VimTest):$/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst(_VimTest):$/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond(_VimTest):$/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0($/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1($/;"	c
TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite($/;"	c
TabStop_TSInDefaultText_ZeroLengthZerothTabstop	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthZerothTabstop(_VimTest):$/;"	c
TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_DoNothing	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_DoNothing(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_Overwrite0	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_Overwrite0(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_Overwrite1	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_Overwrite1(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteSecond	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteSecond(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1(_VimTest):$/;"	c
TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample	plugged/ultisnips/test/test_TabStop.py	/^class TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample(_VimTest):$/;"	c
TabStop_VimScriptInterpolation_SimpleExample	plugged/ultisnips/test/test_Interpolation.py	/^class TabStop_VimScriptInterpolation_SimpleExample(_VimTest):$/;"	c
Table of Contents	plugged/fzf/README.md	/^Table of Contents$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Tabstop	plugged/fzf/src/options.go	/^	Tabstop      int$/;"	m	struct:fzf.Options	typeref:typename:int
TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultNoType_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultNoType_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult(_VimTest):$/;"	c
TabstopWithMirrorManyFromAll_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TabstopWithMirrorManyFromAll_ExpectCorrectResult(_VimTest):$/;"	c
Tabular	plugged/splitjoin.vim/spec/support/tabular/README.md	/^Tabular$/;"	c
Tabularize	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^   \\ Tabularize <line1>,<line2>call Tabularize(<q-args>)$/;"	c
Tabularize	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^function! Tabularize(command, ...) range$/;"	f
Tac	plugged/fzf/src/options.go	/^	Tac          bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Tag	plugged/MatchTagAlways/python/mta_core.py	/^class Tag( object ):$/;"	c
TagType	plugged/MatchTagAlways/python/mta_core.py	/^class TagType( object ):$/;"	c
TagWithSameNameExistsInSequence	plugged/MatchTagAlways/python/mta_core.py	/^def TagWithSameNameExistsInSequence( tag, sequence ):$/;"	f
Tail	plugged/fzf/src/options.go	/^	Tail         int$/;"	m	struct:fzf.Options	typeref:typename:int
TaskclusterMetadata	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class TaskclusterMetadata(models.Model):$/;"	c
TcellWindow	plugged/fzf/src/tui/tcell.go	/^type TcellWindow struct {$/;"	s	package:tui
TempFileManager	plugged/ultisnips/test/vim_interface.py	/^class TempFileManager:$/;"	c
TermSize	plugged/fzf/src/tui/tui.go	/^type TermSize struct {$/;"	s	package:tui
Terminal	plugged/fzf/src/terminal.go	/^type Terminal struct {$/;"	s	package:fzf
Tern	plugged/completor.vim/pythonx/completers/javascript/__init__.py	/^class Tern(Completor):$/;"	c
Test cases for seoul256.vim	plugged/seoul256.vim/test/README.md	/^Test cases for seoul256.vim$/;"	c
TestAdditiveExpect	plugged/fzf/src/options_test.go	/^func TestAdditiveExpect(t *testing.T) {$/;"	f	package:fzf
TestAllMatch	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestAllMatch(_Base, unittest.TestCase):$/;"	c
TestAnsiCodeStringConversion	plugged/fzf/src/ansi_test.go	/^func TestAnsiCodeStringConversion(t *testing.T) {$/;"	f	package:fzf
TestAsUint16	plugged/fzf/src/util/util_test.go	/^func TestAsUint16(t *testing.T) {$/;"	f	package:util
TestAtExit	plugged/fzf/src/util/atexit_test.go	/^func TestAtExit(t *testing.T) {$/;"	f	package:util
TestAtomicBool	plugged/fzf/src/util/atomicbool_test.go	/^func TestAtomicBool(t *testing.T) {$/;"	f	package:util
TestBase	plugged/fzf/test/test_go.rb	/^class TestBase < Minitest::Test$/;"	c
TestBash	plugged/fzf/test/test_go.rb	/^class TestBash < TestBase$/;"	c	mixin:include:TestShell,include:CompletionTest
TestBind	plugged/fzf/src/options_test.go	/^func TestBind(t *testing.T) {$/;"	f	package:fzf
TestCacheKey	plugged/fzf/src/pattern_test.go	/^func TestCacheKey(t *testing.T) {$/;"	f	package:fzf
TestCacheable	plugged/fzf/src/pattern_test.go	/^func TestCacheable(t *testing.T) {$/;"	f	package:fzf
TestCaseSensitivity	plugged/fzf/src/pattern_test.go	/^func TestCaseSensitivity(t *testing.T) {$/;"	f	package:fzf
TestCharsLength	plugged/fzf/src/util/chars_test.go	/^func TestCharsLength(t *testing.T) {$/;"	f	package:util
TestCharsLines	plugged/fzf/src/util/chars_test.go	/^func TestCharsLines(t *testing.T) {$/;"	f	package:util
TestCharsToString	plugged/fzf/src/util/chars_test.go	/^func TestCharsToString(t *testing.T) {$/;"	f	package:util
TestCheapDelete	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestCheapDelete(_Base, unittest.TestCase):$/;"	c
TestChunkCache	plugged/fzf/src/cache_test.go	/^func TestChunkCache(t *testing.T) {$/;"	f	package:fzf
TestChunkList	plugged/fzf/src/chunklist_test.go	/^func TestChunkList(t *testing.T) {$/;"	f	package:fzf
TestChunkListTail	plugged/fzf/src/chunklist_test.go	/^func TestChunkListTail(t *testing.T) {$/;"	f	package:fzf
TestChunkTiebreak	plugged/fzf/src/result_test.go	/^func TestChunkTiebreak(t *testing.T) {$/;"	f	package:fzf
TestColorOffset	plugged/fzf/src/result_test.go	/^func TestColorOffset(t *testing.T) {$/;"	f	package:fzf
TestColorSpec	plugged/fzf/src/options_test.go	/^func TestColorSpec(t *testing.T) {$/;"	f	package:fzf
TestCommonCharacters	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestCommonCharacters(_Base, unittest.TestCase):$/;"	c
TestCompareVersions	plugged/fzf/src/util/util_test.go	/^func TestCompareVersions(t *testing.T) {$/;"	f	package:util
TestConstrain	plugged/fzf/src/util/util_test.go	/^func TestConstrain(t *testing.T) {$/;"	f	package:util
TestConstrain32	plugged/fzf/src/util/util_test.go	/^func TestConstrain32(t *testing.T) {$/;"	f	package:util
TestCrash	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestCrash(_Base, unittest.TestCase):$/;"	c
TestDefaultCtrlNP	plugged/fzf/src/options_test.go	/^func TestDefaultCtrlNP(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegex	plugged/fzf/src/options_test.go	/^func TestDelimiterRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexRegex	plugged/fzf/src/options_test.go	/^func TestDelimiterRegexRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexRegexCaret	plugged/fzf/src/options_test.go	/^func TestDelimiterRegexRegexCaret(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexString	plugged/fzf/src/options_test.go	/^func TestDelimiterRegexString(t *testing.T) {$/;"	f	package:fzf
TestDoc	plugged/completor.vim/tests/test_go.py	/^class TestDoc(object):$/;"	c
TestDurWithIn	plugged/fzf/src/util/util_test.go	/^func TestDurWithIn(t *testing.T) {$/;"	f	package:util
TestEmptyMerger	plugged/fzf/src/merger_test.go	/^func TestEmptyMerger(t *testing.T) {$/;"	f	package:fzf
TestEmptyPattern	plugged/fzf/src/algo/algo_test.go	/^func TestEmptyPattern(t *testing.T) {$/;"	f	package:algo
TestEmptyString	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestEmptyString(_Base, unittest.TestCase):$/;"	c
TestEqual	plugged/fzf/src/pattern_test.go	/^func TestEqual(t *testing.T) {$/;"	f	package:fzf
TestEventBox	plugged/fzf/src/util/eventbox_test.go	/^func TestEventBox(t *testing.T) {$/;"	f	package:util
TestExact	plugged/fzf/src/pattern_test.go	/^func TestExact(t *testing.T) {$/;"	f	package:fzf
TestExactMatchNaive	plugged/fzf/src/algo/algo_test.go	/^func TestExactMatchNaive(t *testing.T) {$/;"	f	package:algo
TestExactMatchNaiveBackward	plugged/fzf/src/algo/algo_test.go	/^func TestExactMatchNaiveBackward(t *testing.T) {$/;"	f	package:algo
TestExtractColor	plugged/fzf/src/ansi_test.go	/^func TestExtractColor(t *testing.T) {$/;"	f	package:fzf
TestFish	plugged/fzf/test/test_go.rb	/^class TestFish < TestBase$/;"	c	mixin:include:TestShell
TestFuzzyMatch	plugged/fzf/src/algo/algo_test.go	/^func TestFuzzyMatch(t *testing.T) {$/;"	f	package:algo
TestFuzzyMatchBackward	plugged/fzf/src/algo/algo_test.go	/^func TestFuzzyMatchBackward(t *testing.T) {$/;"	f	package:algo
TestGetCharEventKey	plugged/fzf/src/tui/tcell_test.go	/^func TestGetCharEventKey(t *testing.T) {$/;"	f	package:tui
TestGetCmdInfo	plugged/completor.vim/tests/test_go.py	/^class TestGetCmdInfo(object):$/;"	c
TestGoFZF	plugged/fzf/test/test_go.rb	/^class TestGoFZF < TestBase$/;"	c
TestGuessing_BackspaceOneChar	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestGuessing_BackspaceOneChar(_BaseGuessing, unittest.TestCase):$/;"	c
TestGuessing_DeleteOneChar	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestGuessing_DeleteOneChar(_BaseGuessing, unittest.TestCase):$/;"	c
TestGuessing_InsertOneChar	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestGuessing_InsertOneChar(_BaseGuessing, unittest.TestCase):$/;"	c
TestGuessing_InsertOneChar1	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestGuessing_InsertOneChar1(_BaseGuessing, unittest.TestCase):$/;"	c
TestGuessing_Noop0	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestGuessing_Noop0(_BaseGuessing, unittest.TestCase):$/;"	c
TestHexToColor	plugged/fzf/src/tui/tui_test.go	/^func TestHexToColor(t *testing.T) {$/;"	f	package:tui
TestHistory	plugged/fzf/src/history_test.go	/^func TestHistory(t *testing.T) {$/;"	f	package:fzf
TestInitProfiling	plugged/fzf/src/options_pprof_test.go	/^func TestInitProfiling(t *testing.T) {$/;"	f	package:fzf
TestIrrelevantNth	plugged/fzf/src/options_test.go	/^func TestIrrelevantNth(t *testing.T) {$/;"	f	package:fzf
TestLangmapWithUtf8_ExpectCorrectResult	plugged/ultisnips/test/test_UltiSnipFunc.py	/^class TestLangmapWithUtf8_ExpectCorrectResult(_VimTest):$/;"	c
TestLongString	plugged/fzf/src/algo/algo_test.go	/^func TestLongString(t *testing.T) {$/;"	f	package:algo
TestLotsaNewlines	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestLotsaNewlines(_Base, unittest.TestCase):$/;"	c
TestMaskActionContents	plugged/fzf/src/options_test.go	/^func TestMaskActionContents(t *testing.T) {$/;"	f	package:fzf
TestMax	plugged/fzf/src/util/util_test.go	/^func TestMax(t *testing.T) {$/;"	f	package:util
TestMax16	plugged/fzf/src/util/util_test.go	/^func TestMax16(t *testing.T) {$/;"	f	package:util
TestMax32	plugged/fzf/src/util/util_test.go	/^func TestMax32(t *testing.T) {$/;"	f	package:util
TestMergerSorted	plugged/fzf/src/merger_test.go	/^func TestMergerSorted(t *testing.T) {$/;"	f	package:fzf
TestMergerUnsorted	plugged/fzf/src/merger_test.go	/^func TestMergerUnsorted(t *testing.T) {$/;"	f	package:fzf
TestMin	plugged/fzf/src/util/util_test.go	/^func TestMin(t *testing.T) {$/;"	f	package:util
TestMin32	plugged/fzf/src/util/util_test.go	/^func TestMin32(t *testing.T) {$/;"	f	package:util
TestNextAnsiEscapeSequence	plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence_Fuzz_Modified	plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Modified(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence_Fuzz_Random	plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Random(t *testing.T) {$/;"	f	package:fzf
TestNoSubstring	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestNoSubstring(_Base, unittest.TestCase):$/;"	c
TestNonEmptyLangmapWithSemi_ExpectCorrectResult	plugged/ultisnips/test/test_UltiSnipFunc.py	/^class TestNonEmptyLangmapWithSemi_ExpectCorrectResult(_VimTest):$/;"	c
TestNonEmptyLangmap_ExpectCorrectResult	plugged/ultisnips/test/test_UltiSnipFunc.py	/^class TestNonEmptyLangmap_ExpectCorrectResult(_VimTest):$/;"	c
TestNormalize	plugged/fzf/src/algo/algo_test.go	/^func TestNormalize(t *testing.T) {$/;"	f	package:algo
TestOffsetSort	plugged/fzf/src/result_test.go	/^func TestOffsetSort(t *testing.T) {$/;"	f	package:fzf
TestOnce	plugged/fzf/src/util/util_test.go	/^func TestOnce(t *testing.T) {$/;"	f	package:util
TestOrigTextAndTransformed	plugged/fzf/src/pattern_test.go	/^func TestOrigTextAndTransformed(t *testing.T) {$/;"	f	package:fzf
TestParseAnsiCode	plugged/fzf/src/ansi_test.go	/^func TestParseAnsiCode(t *testing.T) {$/;"	f	package:fzf
TestParseKeys	plugged/fzf/src/options_test.go	/^func TestParseKeys(t *testing.T) {$/;"	f	package:fzf
TestParseKeysWithComma	plugged/fzf/src/options_test.go	/^func TestParseKeysWithComma(t *testing.T) {$/;"	f	package:fzf
TestParsePlaceholder	plugged/fzf/src/terminal_test.go	/^func TestParsePlaceholder(t *testing.T) {$/;"	f	package:fzf
TestParseRange	plugged/fzf/src/tokenizer_test.go	/^func TestParseRange(t *testing.T) {$/;"	f	package:fzf
TestParseSingleActionList	plugged/fzf/src/options_test.go	/^func TestParseSingleActionList(t *testing.T) {$/;"	f	package:fzf
TestParseSingleActionListError	plugged/fzf/src/options_test.go	/^func TestParseSingleActionListError(t *testing.T) {$/;"	f	package:fzf
TestParseTermsEmpty	plugged/fzf/src/pattern_test.go	/^func TestParseTermsEmpty(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtended	plugged/fzf/src/pattern_test.go	/^func TestParseTermsExtended(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtendedExact	plugged/fzf/src/pattern_test.go	/^func TestParseTermsExtendedExact(t *testing.T) {$/;"	f	package:fzf
TestPowershellCommands	plugged/fzf/src/terminal_test.go	/^func TestPowershellCommands(t *testing.T) {$/;"	f	package:fzf
TestPrefixMatch	plugged/fzf/src/algo/algo_test.go	/^func TestPrefixMatch(t *testing.T) {$/;"	f	package:algo
TestPreviewOpts	plugged/fzf/src/options_test.go	/^func TestPreviewOpts(t *testing.T) {$/;"	f	package:fzf
TestQuoteEntry	plugged/fzf/src/terminal_test.go	/^func TestQuoteEntry(t *testing.T) {$/;"	f	package:fzf
TestRankComparison	plugged/fzf/src/result_test.go	/^func TestRankComparison(t *testing.T) {$/;"	f	package:fzf
TestReadFromCommand	plugged/fzf/src/reader_test.go	/^func TestReadFromCommand(t *testing.T) {$/;"	f	package:fzf
TestRealLife	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestRealLife(_Base, unittest.TestCase):$/;"	c
TestRealLife1	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestRealLife1(_Base, unittest.TestCase):$/;"	c
TestRepeatToFill	plugged/fzf/src/util/util_test.go	/^func TestRepeatToFill(t *testing.T) {$/;"	f	package:util
TestReplacePlaceholder	plugged/fzf/src/terminal_test.go	/^func TestReplacePlaceholder(t *testing.T) {$/;"	f	package:fzf
TestResultRank	plugged/fzf/src/result_test.go	/^func TestResultRank(t *testing.T) {$/;"	f	package:fzf
TestRunesWidth	plugged/fzf/src/util/util_test.go	/^func TestRunesWidth(t *testing.T) {$/;"	f	package:util
TestShell	plugged/fzf/test/test_go.rb	/^module TestShell$/;"	m
TestSplitNth	plugged/fzf/src/options_test.go	/^func TestSplitNth(t *testing.T) {$/;"	f	package:fzf
TestStringPtr	plugged/fzf/src/item_test.go	/^func TestStringPtr(t *testing.T) {$/;"	f	package:fzf
TestStringWidth	plugged/fzf/src/util/util_test.go	/^func TestStringWidth(t *testing.T) {$/;"	f	package:util
TestSuffixMatch	plugged/fzf/src/algo/algo_test.go	/^func TestSuffixMatch(t *testing.T) {$/;"	f	package:algo
TestToCharsAscii	plugged/fzf/src/util/chars_test.go	/^func TestToCharsAscii(t *testing.T) {$/;"	f	package:util
TestToggle	plugged/fzf/src/options_test.go	/^func TestToggle(t *testing.T) {$/;"	f	package:fzf
TestTokenize	plugged/fzf/src/tokenizer_test.go	/^func TestTokenize(t *testing.T) {$/;"	f	package:fzf
TestTransform	plugged/fzf/src/tokenizer_test.go	/^func TestTransform(t *testing.T) {$/;"	f	package:fzf
TestTransformIndexOutOfBounds	plugged/fzf/src/tokenizer_test.go	/^func TestTransformIndexOutOfBounds(t *testing.T) {$/;"	f	package:fzf
TestTrimLength	plugged/fzf/src/util/chars_test.go	/^func TestTrimLength(t *testing.T) {$/;"	f	package:util
TestTruncate	plugged/fzf/src/util/util_test.go	/^func TestTruncate(t *testing.T) {$/;"	f	package:util
TestUltiSnipsProblem	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestUltiSnipsProblem(_Base, unittest.TestCase):$/;"	c
TestUnixCommands	plugged/fzf/src/terminal_test.go	/^func TestUnixCommands(t *testing.T) {$/;"	f	package:fzf
TestValidateSign	plugged/fzf/src/options_test.go	/^func TestValidateSign(t *testing.T) {$/;"	f	package:fzf
TestWindowsCommands	plugged/fzf/src/terminal_test.go	/^func TestWindowsCommands(t *testing.T) {$/;"	f	package:fzf
TestWithNewline	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class TestWithNewline(_Base, unittest.TestCase):$/;"	c
TestZsh	plugged/fzf/test/test_go.rb	/^class TestZsh < TestBase$/;"	c	mixin:include:TestShell,include:CompletionTest
Testing	plugged/splitjoin.vim/CONTRIBUTING.md	/^## Testing$/;"	s	chapter:Contributing
Testing	plugged/ultisnips/CONTRIBUTING.md	/^## Testing$/;"	s	chapter:Contributing to UltiSnips
Testing	plugged/vim-gutentags/CONTRIBUTING.md	/^## Testing$/;"	s	chapter:Contributing
Text	plugged/fzf/src/terminal.go	/^	Text  string `json:"text"`$/;"	m	struct:fzf.StatusItem	typeref:typename:string
TextLogError	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class TextLogError(models.Model):$/;"	c
TextLogErrorMatch	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class TextLogErrorMatch(models.Model):$/;"	c
TextLogErrorMetadata	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class TextLogErrorMetadata(models.Model):$/;"	c
TextLogStep	plugged/vim-coiled-snake/tests/issues/test_3.py	/^class TextLogStep(models.Model):$/;"	c
TextObject	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^class TextObject:$/;"	c
TextObjectTransformation	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^class TextObjectTransformation:$/;"	c
TextTabStopAfterMirror_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopAfterMirror_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopAllSurrounded_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopAllSurrounded_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopSimpleMirrorMultilineMirrorInFront_ECR	plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopSimpleMirrorMultilineMirrorInFront_ECR(_VimTest):$/;"	c
TextTabStopSimpleMirrorMultiline_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopSimpleMirrorMultiline_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopSurroundMirror_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopSurroundMirror_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopTextAfterTab_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopTextAfterTab_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopTextBeforeMirror_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopTextBeforeMirror_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopTextBeforeTab_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopTextBeforeTab_ExpectCorrectResult(_VimTest):$/;"	c
TextTabStopTextSurroundedTab_ExpectCorrectResult	plugged/ultisnips/test/test_Mirror.py	/^class TextTabStopTextSurroundedTab_ExpectCorrectResult(_VimTest):$/;"	c
The `g:mta_filetypes` option	plugged/MatchTagAlways/README.md	/^### The `g:mta_filetypes` option$/;"	S	section:Always highlight enclosing tags""Options
The `g:mta_set_default_matchtag_color` option	plugged/MatchTagAlways/README.md	/^### The `g:mta_set_default_matchtag_color` option$/;"	S	section:Always highlight enclosing tags""Options
The `g:mta_use_matchparen_group` option	plugged/MatchTagAlways/README.md	/^### The `g:mta_use_matchparen_group` option$/;"	S	section:Always highlight enclosing tags""Options
Theme	plugged/fzf/src/options.go	/^	Theme        *tui.ColorTheme$/;"	m	struct:fzf.Options	typeref:typename:*tui.ColorTheme
Theme Options	plugged/papercolor-theme/README.md	/^### Theme Options$/;"	S	chapter:🛠️ User Customization
Third-party libraries used	plugged/fzf/BUILD.md	/^Third-party libraries used$/;"	s	chapter:Building fzf
Thrift	plugged/validator.vim/pythonx/lints/thrift.py	/^class Thrift(Validator):$/;"	c
Tips	plugged/completor.vim/README.md	/^Tips$/;"	s	chapter:Completor
Tips	plugged/fzf/README-VIM.md	/^Tips$/;"	s	chapter:FZF Vim integration
Tips	plugged/fzf/README.md	/^Tips$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Tmux	plugged/fzf/src/options.go	/^	Tmux         *tmuxOptions$/;"	m	struct:fzf.Options	typeref:typename:*tmuxOptions
Tmux	plugged/fzf/test/test_go.rb	/^class Tmux$/;"	c
ToChars	plugged/fzf/src/util/chars.go	/^func ToChars(bytes []byte) Chars {$/;"	f	package:util	typeref:typename:Chars
ToKebabCase	plugged/fzf/src/util/util.go	/^func ToKebabCase(s string) string {$/;"	f	package:util	typeref:typename:string
ToRunes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) ToRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
ToString	plugged/fzf/src/ansi.go	/^func (s *ansiState) ToString() string {$/;"	f	struct:fzf.ansiState	typeref:typename:string
ToString	plugged/fzf/src/util/chars.go	/^func (chars *Chars) ToString() string {$/;"	f	struct:util.Chars	typeref:typename:string
Toggle	plugged/fzf/src/options.go	/^func (o *previewOpts) Toggle() {$/;"	f	struct:fzf.previewOpts
ToggleSort	plugged/fzf/src/options.go	/^	ToggleSort   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Toggling between data sources	plugged/fzf/ADVANCED.md	/^### Toggling between data sources$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Toggling with a single key binding	plugged/fzf/ADVANCED.md	/^### Toggling with a single key binding$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Token	plugged/fzf/src/tokenizer.go	/^type Token struct {$/;"	s	package:fzf
Token	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^class Token:$/;"	c
TokenStore	plugged/completor.vim/pythonx/completers/common/buffer.py	/^class TokenStore(object):$/;"	c
Tokenize	plugged/fzf/src/tokenizer.go	/^func Tokenize(text string, delimiter Delimiter) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
Top	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Top() int       { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
Top	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Top() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
Top	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Top() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Top	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Top() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
Top	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Top() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Top	plugged/fzf/src/tui/tui.go	/^	Top() int$/;"	n	interface:tui.Renderer	typeref:typename:int
Top	plugged/fzf/src/tui/tui.go	/^	Top() int$/;"	n	interface:tui.Window	typeref:typename:int
TotalCount	plugged/fzf/src/terminal.go	/^	TotalCount int          `json:"totalCount"`$/;"	m	struct:fzf.Status	typeref:typename:int
Track	plugged/fzf/src/options.go	/^	Track        trackOption$/;"	m	struct:fzf.Options	typeref:typename:trackOption
TrailingNewline_TabStop_EndNL	plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_EndNL(_VimTest):$/;"	c
TrailingNewline_TabStop_EndStartNL	plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_EndStartNL(_VimTest):$/;"	c
TrailingNewline_TabStop_ExtraNL_ECR	plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_ExtraNL_ECR(_VimTest):$/;"	c
TrailingNewline_TabStop_JustNL	plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_JustNL(_VimTest):$/;"	c
TrailingNewline_TabStop_NLInsideStuffBehind	plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_NLInsideStuffBehind(_VimTest):$/;"	c
TrailingNewline_TabStop_NotEndStartNL	plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_NotEndStartNL(_VimTest):$/;"	c
TrailingNewline_TabStop_StartNL	plugged/ultisnips/test/test_Chars.py	/^class TrailingNewline_TabStop_StartNL(_VimTest):$/;"	c
TrailingWhitespaces	plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrailingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
Transform	plugged/fzf/src/tokenizer.go	/^func Transform(tokens []Token, withNth []Range) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
Transformation	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^class Transformation(Mirror, TextObjectTransformation):$/;"	c
TransformationToken	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^class TransformationToken(Token):$/;"	c
TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR	plugged/ultisnips/test/test_Transformation.py	/^class TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR(_VimTest):$/;"	c
TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR	plugged/ultisnips/test/test_Transformation.py	/^class TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR(_VimTest):$/;"	c
TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR	plugged/ultisnips/test/test_Transformation.py	/^class TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR(_VimTest):$/;"	c
TransformationUsingBackspaceToDeleteDefaultValue_ECR	plugged/ultisnips/test/test_Transformation.py	/^class TransformationUsingBackspaceToDeleteDefaultValue_ECR(_VimTest):$/;"	c
Transformation_BackreferenceTwice_ExpectCorrectResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_BackreferenceTwice_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_Backreference_ExpectCorrectResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_Backreference_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CIBothDefinedNegative_ExpectCorrectResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CIBothDefinedNegative_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CIBothDefinedPositive_ExpectCorrectResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CIBothDefinedPositive_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CIEscapedParensinReplace_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CIEscapedParensinReplace_ECR(_VimTest):$/;"	c
Transformation_CINewlines_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CINewlines_ECR(_VimTest):$/;"	c
Transformation_CITabstop_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CITabstop_ECR(_VimTest):$/;"	c
Transformation_CleverTransformLongLower_ExpectCorrectResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CleverTransformLongLower_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CleverTransformLongUpper_ExpectCorrectResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CleverTransformLongUpper_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CleverTransformLowercaseChar_ExpectCorrectResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CleverTransformLowercaseChar_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_CleverTransformUpercaseChar_ExpectCorrectResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_CleverTransformUpercaseChar_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_ConditionalInConditional_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_ConditionalInConditional_ECR(_VimTest):$/;"	c
Transformation_ConditionalInsertRWEllipsis_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_ConditionalInsertRWEllipsis_ECR(_VimTest):$/;"	c
Transformation_ConditionalInsertionSimple_ExpectCorrectResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_ConditionalInsertionSimple_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_ConditionalWithBackslashBeforeDelimiter	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_ConditionalWithBackslashBeforeDelimiter(_VimTest):$/;"	c
Transformation_ConditionalWithBackslashBeforeDelimiter1	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_ConditionalWithBackslashBeforeDelimiter1(_VimTest):$/;"	c
Transformation_ConditionalWithEscapedDelimiter	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_ConditionalWithEscapedDelimiter(_VimTest):$/;"	c
Transformation_InsideTabLeaveAtDefault_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_InsideTabLeaveAtDefault_ECR(_VimTest):$/;"	c
Transformation_InsideTabOvertype_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_InsideTabOvertype_ECR(_VimTest):$/;"	c
Transformation_LowerCaseAsciiResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_LowerCaseAsciiResult(_VimTest):$/;"	c
Transformation_MultipleTransformations_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_MultipleTransformations_ECR(_VimTest):$/;"	c
Transformation_OptionIgnoreCase_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_OptionIgnoreCase_ECR(_VimTest):$/;"	c
Transformation_OptionMultiline_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_OptionMultiline_ECR(_VimTest):$/;"	c
Transformation_OptionReplaceGlobalMatchInReplace_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_OptionReplaceGlobalMatchInReplace_ECR(_VimTest):$/;"	c
Transformation_OptionReplaceGlobal_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_OptionReplaceGlobal_ECR(_VimTest):$/;"	c
Transformation_SimpleCaseAsciiResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_SimpleCaseAsciiResult(_VimTest):$/;"	c
Transformation_SimpleCaseNoTransform_ExpectCorrectResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_SimpleCaseNoTransform_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_SimpleCaseTransformInFrontDefVal_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_SimpleCaseTransformInFrontDefVal_ECR(_VimTest):$/;"	c
Transformation_SimpleCaseTransformInFront_ExpectCorrectResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_SimpleCaseTransformInFront_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_SimpleCase_ExpectCorrectResult	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_SimpleCase_ExpectCorrectResult(_VimTest):$/;"	c
Transformation_TabIsAtEndAndDeleted1_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TabIsAtEndAndDeleted1_ECR(_VimTest):$/;"	c
Transformation_TabIsAtEndAndDeleted_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TabIsAtEndAndDeleted_ECR(_VimTest):$/;"	c
Transformation_TabIsAtEndNoTextLeave_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TabIsAtEndNoTextLeave_ECR(_VimTest):$/;"	c
Transformation_TabIsAtEndNoTextType_ECR	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TabIsAtEndNoTextType_ECR(_VimTest):$/;"	c
Transformation_TestKill_InsertAfter_NoKill	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TestKill_InsertAfter_NoKill(_VimTest):$/;"	c
Transformation_TestKill_InsertBefore_NoKill	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TestKill_InsertBefore_NoKill(_VimTest):$/;"	c
Transformation_TestKill_InsertBeginning_Kill	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TestKill_InsertBeginning_Kill(_VimTest):$/;"	c
Transformation_TestKill_InsertEnd_Kill	plugged/ultisnips/test/test_Transformation.py	/^class Transformation_TestKill_InsertEnd_Kill(_VimTest):$/;"	c
TrimLength	plugged/fzf/src/item.go	/^func (item *Item) TrimLength() uint16 {$/;"	f	struct:fzf.Item	typeref:typename:uint16
TrimLength	plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrimLength() uint16 {$/;"	f	struct:util.Chars	typeref:typename:uint16
TrimSpacesAtEndOfLines	plugged/ultisnips/test/test_Chars.py	/^class TrimSpacesAtEndOfLines(_VimTest):$/;"	c
TrimTrailingWhitespaces	plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrimTrailingWhitespaces() {$/;"	f	struct:util.Chars
Troubleshooting	plugged/vim-coiled-snake/README.md	/^Troubleshooting$/;"	s	chapter:Coiled Snake: Python Folding for Vim
Truncate	plugged/fzf/src/util/util.go	/^func Truncate(input string, limit int) ([]rune, int) {$/;"	f	package:util	typeref:typename:([]rune, int)
TtyIn	plugged/fzf/src/tui/ttyname_unix.go	/^func TtyIn() (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
TtyIn	plugged/fzf/src/tui/ttyname_windows.go	/^func TtyIn() (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
TtyOut	plugged/fzf/src/tui/ttyname_unix.go	/^func TtyOut() (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
TtyOut	plugged/fzf/src/tui/ttyname_windows.go	/^func TtyOut() (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
Tuple syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/tuple_spec.rb	/^describe 'Tuple syntax' do$/;"	d
Turning into a different process	plugged/fzf/README.md	/^### Turning into a different process$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
Type	plugged/fzf/src/tui/tui.go	/^	Type       EventType$/;"	m	struct:tui.Event	typeref:typename:EventType
U	autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  xnoremap <silent> <buffer> U  :call <SID>status_update()<cr>$/;"	m
U	plugged/vim-repeat/autoload/repeat.vim	/^    nmap U <Plug>(RepeatUndoLine)$/;"	m
UNAME_M	plugged/fzf/Makefile	/^UNAME_M := $(shell uname -m)$/;"	m
UNIDECODE_ALERT_RAISED	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^UNIDECODE_ALERT_RAISED = False$/;"	v
UNIDECODE_IMPORTED	plugged/ultisnips/test/util.py	/^    UNIDECODE_IMPORTED = False$/;"	v
UNIDECODE_IMPORTED	plugged/ultisnips/test/util.py	/^    UNIDECODE_IMPORTED = True$/;"	v
UNKNOWN	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    UNKNOWN = 7$/;"	v	class:TextLogStep
UNSETS	plugged/fzf/test/test_go.rb	/^UNSETS = %w[$/;"	C
UPDATED_SOURCE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
USERCANCEL	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    USERCANCEL = 6$/;"	v	class:TextLogStep
UltiSnips	plugged/completor.vim/tests/conftest.py	/^class UltiSnips(object):$/;"	c
UltiSnips	plugged/ultisnips/README.md	/^UltiSnips$/;"	c
UltiSnips#AddFiletypes	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#AddFiletypes(filetypes) abort$/;"	f
UltiSnips#AddSnippetWithPriority	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#AddSnippetWithPriority(trigger, value, description, options, filetype, prior/;"	f
UltiSnips#Anon	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#Anon(value, ...) abort$/;"	f
UltiSnips#CanExpandSnippet	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#CanExpandSnippet() abort$/;"	f
UltiSnips#CanJumpBackwards	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#CanJumpBackwards() abort$/;"	f
UltiSnips#CanJumpForwards	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#CanJumpForwards() abort$/;"	f
UltiSnips#CheckFiletype	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#CheckFiletype() abort$/;"	f
UltiSnips#CursorMoved	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#CursorMoved() abort$/;"	f
UltiSnips#Edit	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#Edit(bang, ...) abort$/;"	f
UltiSnips#ExpandSnippet	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#ExpandSnippet() abort$/;"	f
UltiSnips#ExpandSnippetOrJump	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#ExpandSnippetOrJump() abort$/;"	f
UltiSnips#FileTypeComplete	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#FileTypeComplete(arglead, cmdline, cursorpos) abort$/;"	f
UltiSnips#JumpBackwards	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#JumpBackwards() abort$/;"	f
UltiSnips#JumpForwards	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#JumpForwards() abort$/;"	f
UltiSnips#JumpOrExpandSnippet	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#JumpOrExpandSnippet() abort$/;"	f
UltiSnips#LeavingBuffer	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#LeavingBuffer() abort$/;"	f
UltiSnips#LeavingInsertMode	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#LeavingInsertMode() abort$/;"	f
UltiSnips#ListSnippets	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#ListSnippets() abort$/;"	f
UltiSnips#RefreshSnippets	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#RefreshSnippets() abort$/;"	f
UltiSnips#SaveLastVisualSelection	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#SaveLastVisualSelection() range abort$/;"	f
UltiSnips#SnippetsInCurrentScope	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#SnippetsInCurrentScope(...) abort$/;"	f
UltiSnips#ToggleAutoTrigger	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#ToggleAutoTrigger() abort$/;"	f
UltiSnips#TrackChange	plugged/ultisnips/autoload/UltiSnips.vim	/^function! UltiSnips#TrackChange() abort$/;"	f
UltiSnips#map_keys#MapKeys	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^function! UltiSnips#map_keys#MapKeys() abort$/;"	f
UltiSnipsAddFiletypes	plugged/ultisnips/plugin/UltiSnips.vim	/^command! -nargs=1 UltiSnipsAddFiletypes :call UltiSnips#AddFiletypes(<q-args>)$/;"	c
UltiSnipsEdit	plugged/ultisnips/plugin/UltiSnips.vim	/^command! -bang -nargs=? -complete=customlist,UltiSnips#FileTypeComplete UltiSnipsEdit$/;"	c
UltiSnipsFileSource	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^class UltiSnipsFileSource(SnippetFileSource):$/;"	c
UltiSnipsSnippetDefinition	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/ulti_snips.py	/^class UltiSnipsSnippetDefinition(SnippetDefinition):$/;"	c
UltiSnips_AutoTrigger	plugged/ultisnips/plugin/UltiSnips.vim	/^augroup UltiSnips_AutoTrigger$/;"	a
UltiSnips_Manager	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^UltiSnips_Manager = SnippetManager(  # pylint:disable=invalid-name$/;"	v
Ultisnips	plugged/completor.vim/pythonx/completers/common/ultisnips.py	/^class Ultisnips(Completor):$/;"	c
Ultisnips and neosnippet	plugged/completor.vim/README.md	/^#### Ultisnips and neosnippet$/;"	t	section:Completor""Completers
UmlautsBeforeTriggerAndCharsAfter	plugged/ultisnips/test/test_Chars.py	/^class UmlautsBeforeTriggerAndCharsAfter(_UmlautsBase):$/;"	c
Underline	plugged/fzf/src/tui/dummy.go	/^	Underline     = Attr(1 << 3)$/;"	c	package:tui
Underline	plugged/fzf/src/tui/tcell.go	/^	Underline          = Attr(tcell.AttrUnderline)$/;"	c	package:tui
Undo_ChangesInPlaceholder	plugged/ultisnips/test/test_Editing.py	/^class Undo_ChangesInPlaceholder(_VimTest):$/;"	c
Undo_CompletelyUndoSnippet	plugged/ultisnips/test/test_Editing.py	/^class Undo_CompletelyUndoSnippet(_VimTest):$/;"	c
Undo_RemoveEditInTabstop	plugged/ultisnips/test/test_Editing.py	/^class Undo_RemoveEditInTabstop(_VimTest):$/;"	c
Undo_RemoveMultilineSnippet	plugged/ultisnips/test/test_Editing.py	/^class Undo_RemoveMultilineSnippet(_VimTest):$/;"	c
Undo_RemoveOneSnippetByTime	plugged/ultisnips/test/test_Editing.py	/^class Undo_RemoveOneSnippetByTime(_VimTest):$/;"	c
Undo_RemoveOneSnippetByTime2	plugged/ultisnips/test/test_Editing.py	/^class Undo_RemoveOneSnippetByTime2(_VimTest):$/;"	c
Undo_RemoveWholeSnippet	plugged/ultisnips/test/test_Editing.py	/^class Undo_RemoveWholeSnippet(_VimTest):$/;"	c
Unicode	plugged/fzf/src/options.go	/^	Unicode      bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Unlock	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Unsafe	plugged/fzf/src/options.go	/^	Unsafe       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Unusable	plugged/completor.vim/pythonx/completor/__init__.py	/^class Unusable(object):$/;"	c
Unusable	plugged/validator.vim/pythonx/validator/__init__.py	/^class Unusable(object):$/;"	c
Unwatch	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Unwatch(events ...EventType) {$/;"	f	struct:util.EventBox
Up	plugged/fzf/src/tui/tui.go	/^	Up$/;"	c	package:tui
UpdateCount	plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateCount(cnt int, final bool, failedCommand *string) {$/;"	f	struct:fzf.Terminal
UpdateHeader	plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateHeader(header []string) {$/;"	f	struct:fzf.Terminal
UpdateList	plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateList(merger *Merger) {$/;"	f	struct:fzf.Terminal
UpdateModifiedSnippetWithoutCursorMove1	plugged/ultisnips/test/test_Editing.py	/^class UpdateModifiedSnippetWithoutCursorMove1(_VimTest):$/;"	c
UpdateModifiedSnippetWithoutCursorMove2	plugged/ultisnips/test/test_Editing.py	/^class UpdateModifiedSnippetWithoutCursorMove2(_VimTest):$/;"	c
UpdateProgress	plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateProgress(progress float32) {$/;"	f	struct:fzf.Terminal
Updating the list of processes by pressing CTRL-R	plugged/fzf/ADVANCED.md	/^### Updating the list of processes by pressing CTRL-R$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Upgrading fzf	plugged/fzf/README.md	/^Upgrading fzf$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Usage	plugged/fzf/README.md	/^Usage$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Usage	plugged/fzf/src/options.go	/^const Usage = `fzf is an interactive filter program for any kind of list.$/;"	c	package:fzf
Usage	plugged/splitjoin.vim/README.md	/^## Usage$/;"	s
Usage	plugged/validator.vim/README.md	/^Usage$/;"	s	chapter:Validator
Usage	plugged/vim-coiled-snake/README.md	/^Usage$/;"	s	chapter:Coiled Snake: Python Folding for Vim
Usage	plugged/vim-gutentags/plat/win32/update_gtags.cmd	/^:Usage$/;"	l
Usage	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
Use Tab to select completion	plugged/completor.vim/README.md	/^#### Use Tab to select completion$/;"	t	section:Completor""Tips
Use Tab to trigger completion (disable auto trigger)	plugged/completor.vim/README.md	/^#### Use Tab to trigger completion (disable auto trigger)$/;"	t	section:Completor""Tips
Using Homebrew	plugged/fzf/README.md	/^### Using Homebrew$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using Makefile	plugged/fzf/BUILD.md	/^### Using Makefile$/;"	S	section:Building fzf""Build instructions
Using [vim-plug](https://github.com/junegunn/vim-plug)	plugged/fzf.vim/README.md	/^### Using [vim-plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	S	section:fzf :heart: vim""Installation
Using a plugin manager	plugged/papercolor-theme/README.md	/^### Using a plugin manager$/;"	S	chapter:🔌 Installation
Using fzf as the secondary filter	plugged/fzf/ADVANCED.md	/^### Using fzf as the secondary filter$/;"	S	section:Advanced fzf examples""Ripgrep integration
Using git	plugged/fzf/README.md	/^### Using git$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using the finder	plugged/fzf/README.md	/^### Using the finder$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
VERSION	plugged/fzf/Makefile	/^VERSION        := $(FZF_VERSION)$/;"	m
VERSION	plugged/fzf/Makefile	/^VERSION        := $(shell git describe --abbrev=0 2> \/dev\/null)$/;"	m
VERSION_REGEX	plugged/fzf/Makefile	/^VERSION_REGEX  := $(subst .,\\.,$(VERSION_TRIM))$/;"	m
VERSION_TRIM	plugged/fzf/Makefile	/^VERSION_TRIM   := $(shell sed "s\/-.*\/\/" <<< $(VERSION))$/;"	m
VIM	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^    VIM = Vimrunner.start_gvim$/;"	C
VIM_FILES	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^VIM_FILES = ['placeholder.vim']$/;"	v
Validator	plugged/validator.vim/README.md	/^Validator$/;"	c
Validator	plugged/validator.vim/pythonx/validator/__init__.py	/^class Validator(Base):$/;"	c
ValidatorCheck	plugged/validator.vim/autoload/validator.vim	/^    command! ValidatorCheck call s:check(v:false)$/;"	c
Variable syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/variable_spec.rb	/^describe 'Variable syntax' do$/;"	d
Vars	plugged/completor.vim/tests/conftest.py	/^class Vars(dict):$/;"	c
VerifyVimDict1	plugged/ultisnips/test/test_UltiSnipFunc.py	/^class VerifyVimDict1(_VimTest):$/;"	c
VerifyVimDict2	plugged/ultisnips/test/test_UltiSnipFunc.py	/^class VerifyVimDict2(_VimTest):$/;"	c
VerifyVimDict3	plugged/ultisnips/test/test_UltiSnipFunc.py	/^class VerifyVimDict3(_VimTest):$/;"	c
Version	plugged/fzf/src/options.go	/^	Version      bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Version History	plugged/vim-lastplace/README.md	/^## Version History$/;"	s	chapter:vim-lastplace v4.6.0
Vim	README.md	/^## Vim$/;"	s
Vim	plugged/completor.vim/tests/conftest.py	/^class Vim(object):$/;"	c
Vim	plugged/splitjoin.vim/spec/support/vim.rb	/^  module Vim$/;"	m	module:Support
Vim functions	plugged/fzf.vim/README.md	/^#### Vim functions$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Vim plugin	plugged/fzf/README.md	/^Vim plugin$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Vim-airline support	plugged/papercolor-theme/README.md	/^### Vim-airline support$/;"	S	chapter:🛠️ User Customization
Vim/Neovim plugin	plugged/fzf/README.md	/^### Vim\/Neovim plugin$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
VimBuffer	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^class VimBuffer:$/;"	c
VimBufferProxy	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^class VimBufferProxy(vim_helper.VimBuffer):$/;"	c
VimEncoder	plugged/completor.vim/pythonx/completers/lsp/models.py	/^class VimEncoder(json.JSONEncoder):$/;"	c
VimError	plugged/completor.vim/tests/conftest.py	/^class VimError(Exception):$/;"	c
VimInterface	plugged/ultisnips/test/vim_interface.py	/^class VimInterface(TempFileManager):$/;"	c
VimInterfaceTmux	plugged/ultisnips/test/vim_interface.py	/^class VimInterfaceTmux(VimInterface):$/;"	c
VimInterfaceTmuxNeovim	plugged/ultisnips/test/vim_interface.py	/^class VimInterfaceTmuxNeovim(VimInterfaceTmux):$/;"	c
VimInterfaceWindows	plugged/ultisnips/test/vim_interface.py	/^class VimInterfaceWindows(VimInterface):$/;"	c
VimLCode	plugged/ultisnips/pythonx/UltiSnips/text_objects/viml_code.py	/^class VimLCode(NoneditableTextObject):$/;"	c
VimLCodeToken	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^class VimLCodeToken(Token):$/;"	c
VimLParserLint	plugged/validator.vim/pythonx/lints/vim/vimlparser.py	/^class VimLParserLint(Validator):$/;"	c
VimPosition	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^class VimPosition(Position):$/;"	c
VimState	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^class VimState:$/;"	c
VimTestCase	plugged/ultisnips/test/vim_test_case.py	/^class VimTestCase(unittest.TestCase, TempFileManager):$/;"	c
VimVint	plugged/validator.vim/pythonx/lints/vim/vint.py	/^class VimVint(Validator):$/;"	c
VirtualEdit	plugged/ultisnips/test/test_Fixes.py	/^class VirtualEdit(_VimTest):$/;"	c
Visible	plugged/fzf/src/options.go	/^func (o *previewOpts) Visible() bool {$/;"	f	struct:fzf.previewOpts	typeref:typename:bool
Visual	plugged/ultisnips/pythonx/UltiSnips/text_objects/visual.py	/^class Visual(NoneditableTextObject, TextObjectTransformation):$/;"	c
VisualContentPreserver	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^class VisualContentPreserver:$/;"	c
VisualToken	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^class VisualToken(Token):$/;"	c
VisualTransformationWithDefault_ExpandWithVisual	plugged/ultisnips/test/test_Visual.py	/^class VisualTransformationWithDefault_ExpandWithVisual(_VimTest):$/;"	c
VisualTransformationWithDefault_ExpandWithoutVisual	plugged/ultisnips/test/test_Visual.py	/^class VisualTransformationWithDefault_ExpandWithoutVisual(_VimTest):$/;"	c
VisualTransformation_InDefaultText_LineSelect_NoOverwrite	plugged/ultisnips/test/test_Visual.py	/^class VisualTransformation_InDefaultText_LineSelect_NoOverwrite(_VimTest):$/;"	c
VisualTransformation_InDefaultText_LineSelect_Overwrite	plugged/ultisnips/test/test_Visual.py	/^class VisualTransformation_InDefaultText_LineSelect_Overwrite(_VimTest):$/;"	c
VisualTransformation_LineSelect_Simple	plugged/ultisnips/test/test_Visual.py	/^class VisualTransformation_LineSelect_Simple(_VimTest):$/;"	c
VisualTransformation_SelectOneWord	plugged/ultisnips/test/test_Visual.py	/^class VisualTransformation_SelectOneWord(_VimTest):$/;"	c
VisualWithDefaultWithSlashes_ExpandWithoutVisual	plugged/ultisnips/test/test_Visual.py	/^class VisualWithDefaultWithSlashes_ExpandWithoutVisual(_VimTest):$/;"	c
VisualWithDefault_ExpandWithVisual	plugged/ultisnips/test/test_Visual.py	/^class VisualWithDefault_ExpandWithVisual(_VimTest):$/;"	c
VisualWithDefault_ExpandWithoutVisual	plugged/ultisnips/test/test_Visual.py	/^class VisualWithDefault_ExpandWithoutVisual(_VimTest):$/;"	c
Visual_CrossOneLine	plugged/ultisnips/test/test_Visual.py	/^class Visual_CrossOneLine(_VimTest):$/;"	c
Visual_ExpandTwice	plugged/ultisnips/test/test_Visual.py	/^class Visual_ExpandTwice(_VimTest):$/;"	c
Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite	plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite(_VimTest):$/;"	c
Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite	plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite(_VimTest):$/;"	c
Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1	plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1(_VimTest):$/;"	c
Visual_InDefaultText_IndentSpacesToTabstop_Overwrite	plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_IndentSpacesToTabstop_Overwrite(_VimTest):$/;"	c
Visual_InDefaultText_LineSelect_NoOverwrite	plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_LineSelect_NoOverwrite(_VimTest):$/;"	c
Visual_InDefaultText_LineSelect_Overwrite	plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_LineSelect_Overwrite(_VimTest):$/;"	c
Visual_InDefaultText_SelectOneWord	plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_SelectOneWord(_VimTest):$/;"	c
Visual_InDefaultText_SelectOneWord_NoOverwrite	plugged/ultisnips/test/test_Visual.py	/^class Visual_InDefaultText_SelectOneWord_NoOverwrite(_VimTest):$/;"	c
Visual_LineSelect_CheckIndentSimple	plugged/ultisnips/test/test_Visual.py	/^class Visual_LineSelect_CheckIndentSimple(_VimTest):$/;"	c
Visual_LineSelect_CheckIndentTwice	plugged/ultisnips/test/test_Visual.py	/^class Visual_LineSelect_CheckIndentTwice(_VimTest):$/;"	c
Visual_LineSelect_CheckIndentWithTS_NoOverwrite	plugged/ultisnips/test/test_Visual.py	/^class Visual_LineSelect_CheckIndentWithTS_NoOverwrite(_VimTest):$/;"	c
Visual_LineSelect_DedentLine	plugged/ultisnips/test/test_Visual.py	/^class Visual_LineSelect_DedentLine(_VimTest):$/;"	c
Visual_LineSelect_Simple	plugged/ultisnips/test/test_Visual.py	/^class Visual_LineSelect_Simple(_VimTest):$/;"	c
Visual_LineSelect_WithTabStop	plugged/ultisnips/test/test_Visual.py	/^class Visual_LineSelect_WithTabStop(_VimTest):$/;"	c
Visual_NoVisualSelection_Ignore	plugged/ultisnips/test/test_Visual.py	/^class Visual_NoVisualSelection_Ignore(_VimTest):$/;"	c
Visual_SelectOneWord	plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWord(_VimTest):$/;"	c
Visual_SelectOneWordExclusive	plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWordExclusive(_VimTest):$/;"	c
Visual_SelectOneWordInclusive	plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWordInclusive(_VimTest):$/;"	c
Visual_SelectOneWordWithTabstop_TillEndOfLine	plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWordWithTabstop_TillEndOfLine(_VimTest):$/;"	c
Visual_SelectOneWord_Inword	plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWord_Inword(_VimTest):$/;"	c
Visual_SelectOneWord_ProblemAfterTab	plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWord_ProblemAfterTab(_VimTest):$/;"	c
Visual_SelectOneWord_TillEndOfLine	plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWord_TillEndOfLine(_VimTest):$/;"	c
Visual_SelectOneWord_TwiceVisual	plugged/ultisnips/test/test_Visual.py	/^class Visual_SelectOneWord_TwiceVisual(_VimTest):$/;"	c
W	vimrc	/^command W :execute ':silent w !sudo tee % > \/dev\/null' | :edit!$/;"	c
WIN_ESCAPES	plugged/ultisnips/test/vim_interface.py	/^    WIN_ESCAPES = ["+", "^", "%", "~", "[", "]", "<", ">", "(", ")"]$/;"	v	class:VimInterfaceWindows
WIN_REPLACES	plugged/ultisnips/test/vim_interface.py	/^    WIN_REPLACES = [$/;"	v	class:VimInterfaceWindows
Wait	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Wait(callback func(*Events)) {$/;"	f	struct:util.EventBox
WaitFor	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) WaitFor(event EventType) {$/;"	f	struct:util.EventBox
WalkerOpts	plugged/fzf/src/options.go	/^	WalkerOpts   walkerOpts$/;"	m	struct:fzf.Options	typeref:typename:walkerOpts
WalkerRoot	plugged/fzf/src/options.go	/^	WalkerRoot   string$/;"	m	struct:fzf.Options	typeref:typename:string
WalkerSkip	plugged/fzf/src/options.go	/^	WalkerSkip   []string$/;"	m	struct:fzf.Options	typeref:typename:[]string
Watch	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Watch(events ...EventType) {$/;"	f	struct:util.EventBox
What?	plugged/vim-gutentags/README.md	/^## What?$/;"	s	chapter:Gutentags
Why you should use fzf on Vim	plugged/fzf.vim/README.md	/^Why you should use fzf on Vim$/;"	s	chapter:fzf :heart: vim
Why?	plugged/vim-gutentags/README.md	/^## Why?$/;"	s	chapter:Gutentags
Width	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Width() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Width	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Width() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Width	plugged/fzf/src/tui/tui.go	/^	Width() int$/;"	n	interface:tui.Window	typeref:typename:int
Window	plugged/fzf/src/tui/tui.go	/^type Window interface {$/;"	i	package:tui
Windows packages	plugged/fzf/README.md	/^### Windows packages$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
WithAttr	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) WithAttr(attr Attr) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
WithNth	plugged/fzf/src/options.go	/^	WithNth      []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
WithShell	plugged/fzf/src/options.go	/^	WithShell    string$/;"	m	struct:fzf.Options	typeref:typename:string
Wrap	plugged/fzf/src/options.go	/^	Wrap         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
WrapSign	plugged/fzf/src/options.go	/^	WrapSign     *string$/;"	m	struct:fzf.Options	typeref:typename:*string
WriteTemporaryFile	plugged/fzf/src/functions.go	/^func WriteTemporaryFile(data []string, printSep string) string {$/;"	f	package:fzf	typeref:typename:string
Writing	plugged/vim-gutentags/CONTRIBUTING.md	/^## Writing$/;"	s	chapter:Contributing
X	autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
X	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) X() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
X	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) X() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
X	plugged/fzf/src/tui/tui.go	/^	X      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
X	plugged/fzf/src/tui/tui.go	/^	X() int$/;"	n	interface:tui.Window	typeref:typename:int
X	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
X	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^    nnoremap <silent> <buffer> X :call <SID>revert()<cr>$/;"	m
XX	plugged/vim-coiled-snake/tests/issues/test_7.py	/^class XX:$/;"	c
Y	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Y() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Y	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Y() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Y	plugged/fzf/src/tui/tui.go	/^	Y      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
Y	plugged/fzf/src/tui/tui.go	/^	Y() int$/;"	n	interface:tui.Window	typeref:typename:int
Zero	plugged/fzf/src/tui/tui.go	/^	Zero$/;"	c	package:tui
Zsh	plugged/fzf/src/options.go	/^	Zsh          bool$/;"	m	struct:fzf.Options	typeref:typename:bool
ZshLint	plugged/validator.vim/pythonx/lints/zsh/zsh.py	/^class ZshLint(Validator):$/;"	c
[<cr>	vimrc	/^inoremap [<cr> [<cr>]<esc>O$/;"	m
[License](LICENSE)	plugged/fzf/README-VIM.md	/^[License](LICENSE)$/;"	s	chapter:FZF Vim integration
[License](LICENSE)	plugged/fzf/README.md	/^[License](LICENSE)$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
[Playpen][pp] integration	plugged/splitjoin.vim/spec/support/rust.vim/README.md	/^### [Playpen][pp] integration$/;"	S	section:rust.vim""Features
[Vim8 native plugins](https://vimhelp.org/repeat.txt.html#packages)	plugged/vim-coiled-snake/README.md	/^### [Vim8 native plugins](https:\/\/vimhelp.org\/repeat.txt.html#packages)$/;"	S	section:Coiled Snake: Python Folding for Vim""Installation
[[	autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[[	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^nnoremap <silent> <buffer> [[ :call rust#Jump('n', 'Back')<CR>$/;"	m
[[	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^onoremap <silent> <buffer> [[ :call rust#Jump('o', 'Back')<CR>$/;"	m
[[	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^xnoremap <silent> <buffer> [[ :call rust#Jump('v', 'Back')<CR>$/;"	m
[[	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> [[ ':silent keeppatterns ?'.b:block_begin.'<CR>'$/;"	m
[[	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> [[ ':silent keeppatterns ?'.b:block_begin.'<CR>'$/;"	m
[[	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[[	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> [[ :silent! call <SID>section('b')<cr>$/;"	m
[]	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> [] ':silent keeppatterns ?'.b:block_end  .'<CR>'$/;"	m
[]	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> [] ':silent keeppatterns ?'.b:block_end  .'<CR>'$/;"	m
[pathogen](https://github.com/tpope/vim-pathogen)	plugged/vim-coiled-snake/README.md	/^### [pathogen](https:\/\/github.com\/tpope\/vim-pathogen)$/;"	S	section:Coiled Snake: Python Folding for Vim""Installation
[vim-plug](https://github.com/junegunn/vim-plug)	plugged/vim-coiled-snake/README.md	/^### [vim-plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	S	section:Coiled Snake: Python Folding for Vim""Installation
\x21	plugged/vim-vinegar/plugin/vinegar.vim	/^  nmap <buffer> ! .!$/;"	m
\x21	plugged/vim-vinegar/plugin/vinegar.vim	/^  xmap <buffer> ! .!$/;"	m
][	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> ][ ':silent keeppatterns \/'.b:block_end  .'<CR>'$/;"	m
][	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> ][ ':silent keeppatterns \/'.b:block_end  .'<CR>'$/;"	m
]]	autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
]]	plugged/fzf/shell/completion.bash	/^  if [[ "$(type -t _fzf_comprun 2>&1)" = function ]]; then$/;"	f
]]	plugged/fzf/shell/completion.zsh	/^  if [[ "$(type _fzf_comprun 2>&1)" =~ function ]]; then$/;"	f
]]	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^nnoremap <silent> <buffer> ]] :call rust#Jump('n', 'Forward')<CR>$/;"	m
]]	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^onoremap <silent> <buffer> ]] :call rust#Jump('o', 'Forward')<CR>$/;"	m
]]	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^xnoremap <silent> <buffer> ]] :call rust#Jump('v', 'Forward')<CR>$/;"	m
]]	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^nnoremap <buffer> <silent> <expr> ]] ':silent keeppatterns \/'.b:block_begin.'<CR>'$/;"	m
]]	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^onoremap <buffer> <silent> <expr> ]] ':silent keeppatterns \/'.b:block_begin.'<CR>'$/;"	m
]]	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
]]	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> ]] :silent! call <SID>section('')<cr>$/;"	m
]q	vimrc	/^nnoremap ]q :cnext<cr>zz$/;"	m
_	plugged/fzf/src/actiontype_string.go	/^func _() {$/;"	f	package:fzf
_	plugged/fzf/src/tui/eventtype_string.go	/^func _() {$/;"	f	package:tui
_AddFuncBase	plugged/ultisnips/test/test_UltiSnipFunc.py	/^class _AddFuncBase(_VimTest):$/;"	c
_AnonBase	plugged/ultisnips/test/test_AnonymousExpansion.py	/^class _AnonBase(_VimTest):$/;"	c
_Base	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class _Base:$/;"	c
_BaseGuessing	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^class _BaseGuessing:$/;"	c
_CONDITIONAL	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^_CONDITIONAL = re.compile(r"\\(\\?(\\d+):", re.DOTALL)$/;"	v
_CleverReplace	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^class _CleverReplace:$/;"	c
_DOLLAR	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^_DOLLAR = re.compile(r"\\$(\\d+)", re.DOTALL)$/;"	v
_DebugFilter	plugged/validator.vim/pythonx/validator/utils.py	/^class _DebugFilter(object):$/;"	c
_ES_Base	plugged/ultisnips/test/test_Selection.py	/^class _ES_Base(_VimTest):$/;"	c
_EventType_index	plugged/fzf/src/tui/eventtype_string.go	/^var _EventType_index = [...]uint16{0, 4, 9, 14, 19, 24, 29, 34, 39, 44, 47, 52, 57, 62, 67, 72, /;"	v	package:tui
_EventType_name	plugged/fzf/src/tui/eventtype_string.go	/^const _EventType_name = "RuneCtrlACtrlBCtrlCCtrlDCtrlECtrlFCtrlGCtrlHTabCtrlJCtrlKCtrlLCtrlMCtrl/;"	c	package:tui
_ExpandTabs	plugged/ultisnips/test/test_Format.py	/^class _ExpandTabs(_VimTest):$/;"	c
_FormatoptionsBase	plugged/ultisnips/test/test_Format.py	/^class _FormatoptionsBase(_VimTest):$/;"	c
_INDENT	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    _INDENT = re.compile(r"^[ \\t]*")$/;"	v	class:SnippetDefinition
_LONG_CASEFOLDINGS	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^_LONG_CASEFOLDINGS = re.compile(r"\\\\([UL].*?)\\\\E", re.DOTALL)$/;"	v
_ListAllSnippets	plugged/ultisnips/test/test_ListSnippets.py	/^class _ListAllSnippets(_VimTest):$/;"	c
_MPBase	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^class _MPBase:$/;"	c
_MultiLineDefault	plugged/ultisnips/test/test_Chars.py	/^class _MultiLineDefault(_VimTest):$/;"	c
_MultiWord_SnippetOptions_ExpandWordSnippets	plugged/ultisnips/test/test_SnippetOptions.py	/^class _MultiWord_SnippetOptions_ExpandWordSnippets(_VimTest):$/;"	c
_MultipleMatches	plugged/ultisnips/test/test_MultipleMatches.py	/^class _MultipleMatches(_VimTest):$/;"	c
_No_Tab_Expand	plugged/ultisnips/test/test_SnippetOptions.py	/^class _No_Tab_Expand(_VimTest):$/;"	c
_ONE_CHAR_CASE_SWITCH	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^_ONE_CHAR_CASE_SWITCH = re.compile(r"\\\\([ul].)", re.DOTALL)$/;"	v
_OS_Base	plugged/ultisnips/test/test_Selection.py	/^class _OS_Base(_VimTest):$/;"	c
_ParseSnippets_MultiWord	plugged/ultisnips/test/test_ParseSnippets.py	/^class _ParseSnippets_MultiWord(_VimTest):$/;"	c
_ParseSnippets_MultiWord_RE	plugged/ultisnips/test/test_ParseSnippets.py	/^class _ParseSnippets_MultiWord_RE(_VimTest):$/;"	c
_Placeholder	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^_Placeholder = namedtuple("_FrozenPlaceholder", ["current_text", "start", "end"])$/;"	v
_REPLACE_NON_WS	plugged/ultisnips/pythonx/UltiSnips/text_objects/visual.py	/^_REPLACE_NON_WS = re.compile(r"[^ \\t]")$/;"	v
_Regex_Self	plugged/ultisnips/test/test_SnippetOptions.py	/^class _Regex_Self(_VimTest):$/;"	c
_SelectModeMappings	plugged/ultisnips/test/test_Selection.py	/^class _SelectModeMappings(_VimTest):$/;"	c
_SimpleExpands	plugged/ultisnips/test/test_Expand.py	/^class _SimpleExpands(_VimTest):$/;"	c
_SnippetOptions_ExpandWordSnippets	plugged/ultisnips/test/test_SnippetOptions.py	/^class _SnippetOptions_ExpandWordSnippets(_VimTest):$/;"	c
_SnippetUtilCursor	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^class _SnippetUtilCursor:$/;"	c
_TABS	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    _TABS = re.compile(r"^\\t*")$/;"	v	class:SnippetDefinition
_TOKEN_TO_TEXTOBJECT	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/snipmate.py	/^_TOKEN_TO_TEXTOBJECT = {$/;"	v
_TOKEN_TO_TEXTOBJECT	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/ulti_snips.py	/^_TOKEN_TO_TEXTOBJECT = {$/;"	v
_TabExpand_RealWorld	plugged/ultisnips/test/test_SnippetOptions.py	/^class _TabExpand_RealWorld:$/;"	c
_Tabs	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^class _Tabs:$/;"	c
_TextIterator	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^class _TextIterator:$/;"	c
_UmlautsBase	plugged/ultisnips/test/test_Chars.py	/^class _UmlautsBase(_VimTest):$/;"	c
_Vim	plugged/completor.vim/pythonx/completor/_vim.py	/^class _Vim(object):$/;"	c
_VimCursor	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^class _VimCursor(NoneditableTextObject):$/;"	c
_VimTest	plugged/ultisnips/test/test_AnonymousExpansion.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Autocommands.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Autotrigger.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Chars.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Choices.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Completion.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_ContextSnippets.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Editing.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Expand.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Fixes.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Folding.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Format.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Interpolation.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_ListSnippets.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Mirror.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Movement.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_MultipleMatches.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_ParseSnippets.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Plugin.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Recursive.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Selection.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_SnipMate.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_SnippetActions.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_SnippetOptions.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_SnippetPriorities.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_TabStop.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Transformation.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_UltiSnipFunc.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VimTest	plugged/ultisnips/test/test_Visual.py	/^from test.vim_test_case import VimTestCase as _VimTest$/;"	x	nameref:unknown:VimTestCase
_VisualContent	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^_VisualContent = namedtuple("_VisualContent", ["mode", "text"])$/;"	v
__ALLOWED_TOKENS	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/snipmate.py	/^__ALLOWED_TOKENS = [$/;"	v
__ALLOWED_TOKENS	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/ulti_snips.py	/^__ALLOWED_TOKENS = [$/;"	v
__ALLOWED_TOKENS_IN_TABSTOPS	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/snipmate.py	/^__ALLOWED_TOKENS_IN_TABSTOPS = [$/;"	v
__WHITESPACE_SPLIT	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^__WHITESPACE_SPLIT = re.compile(r"\\s")$/;"	v
__add__	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __add__(self, pos):$/;"	m	class:Position
__add__	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def __add__(self, value):$/;"	m	class:SnippetUtil
__bool__	plugged/MatchTagAlways/python/mta_core.py	/^    def __bool__( self ):$/;"	m	class:Tag
__contains__	plugged/validator.vim/pythonx/validator/__init__.py	/^    def __contains__(self, ft):$/;"	m	class:Validator
__delitem__	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __delitem__(self, key):$/;"	m	class:VimBufferProxy
__enter__	plugged/completor.vim/pythonx/completor/__init__.py	/^    def __enter__(self):$/;"	m	class:_ft_context
__enter__	plugged/completor.vim/pythonx/completor/utils.py	/^    def __enter__(self):$/;"	m	class:_highlight
__eq__	plugged/MatchTagAlways/python/mta_core.py	/^  def __eq__( self, other ):$/;"	m	class:Tag
__eq__	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __eq__(self, other):$/;"	m	class:Position
__exit__	plugged/completor.vim/pythonx/completor/__init__.py	/^    def __exit__(self, et, ev, tb):$/;"	m	class:_ft_context
__exit__	plugged/completor.vim/pythonx/completor/utils.py	/^    def __exit__(self, et, ev, tb):$/;"	m	class:_highlight
__filetype__	plugged/validator.vim/pythonx/lints/cpp.py	/^    __filetype__ = "cpp"$/;"	v	class:Cpp	file:
__filetype__	plugged/validator.vim/pythonx/lints/css.py	/^    __filetype__ = 'css'$/;"	v	class:Css	file:
__filetype__	plugged/validator.vim/pythonx/lints/cython.py	/^    __filetype__ = "cython"$/;"	v	class:Cython	file:
__filetype__	plugged/validator.vim/pythonx/lints/go/gofmt.py	/^    __filetype__ = "go"$/;"	v	class:GoFmtLint	file:
__filetype__	plugged/validator.vim/pythonx/lints/go/golangci.py	/^    __filetype__ = 'go'$/;"	v	class:Golangci	file:
__filetype__	plugged/validator.vim/pythonx/lints/go/golint.py	/^    __filetype__ = "go"$/;"	v	class:GolintLint	file:
__filetype__	plugged/validator.vim/pythonx/lints/go/gometalinter.py	/^    __filetype__ = 'go'$/;"	v	class:Gometalinter	file:
__filetype__	plugged/validator.vim/pythonx/lints/javascript/eslint.py	/^    __filetype__ = "javascript"$/;"	v	class:EsLint	file:
__filetype__	plugged/validator.vim/pythonx/lints/javascript/jscs.py	/^    __filetype__ = "javascript"$/;"	v	class:Jscs	file:
__filetype__	plugged/validator.vim/pythonx/lints/javascript/jshint.py	/^    __filetype__ = "javascript"$/;"	v	class:Jshint	file:
__filetype__	plugged/validator.vim/pythonx/lints/javascript/standard.py	/^    __filetype__ = 'javascript'$/;"	v	class:Standard	file:
__filetype__	plugged/validator.vim/pythonx/lints/json.py	/^    __filetype__ = "json"$/;"	v	class:Json	file:
__filetype__	plugged/validator.vim/pythonx/lints/lua/luac.py	/^    __filetype__ = 'lua'$/;"	v	class:LuaCLint	file:
__filetype__	plugged/validator.vim/pythonx/lints/lua/luacheck.py	/^    __filetype__ = 'lua'$/;"	v	class:LuacheckLint	file:
__filetype__	plugged/validator.vim/pythonx/lints/perl/perl.py	/^    __filetype__ = "perl"$/;"	v	class:PerlLint	file:
__filetype__	plugged/validator.vim/pythonx/lints/perl/perlcritic.py	/^    __filetype__ = "perl"$/;"	v	class:PerlCriticLint	file:
__filetype__	plugged/validator.vim/pythonx/lints/php.py	/^    __filetype__ = "php"$/;"	v	class:Php	file:
__filetype__	plugged/validator.vim/pythonx/lints/python/pyflakes.py	/^    __filetype__ = "python"$/;"	v	class:PyFlakes	file:
__filetype__	plugged/validator.vim/pythonx/lints/rst/rst2pseudoxml.py	/^    __filetype__ = "rst"$/;"	v	class:RST2PseudoXMLLint	file:
__filetype__	plugged/validator.vim/pythonx/lints/ruby/rubocop.py	/^    __filetype__ = 'ruby'$/;"	v	class:Rubocop	file:
__filetype__	plugged/validator.vim/pythonx/lints/ruby/ruby.py	/^    __filetype__ = "ruby"$/;"	v	class:Ruby	file:
__filetype__	plugged/validator.vim/pythonx/lints/rust.py	/^    __filetype__ = 'rust'$/;"	v	class:Cargo	file:
__filetype__	plugged/validator.vim/pythonx/lints/sh/sh.py	/^    __filetype__ = "sh"$/;"	v	class:ShLint	file:
__filetype__	plugged/validator.vim/pythonx/lints/sh/shellcheck.py	/^    __filetype__ = "sh"$/;"	v	class:ShellcheckLint	file:
__filetype__	plugged/validator.vim/pythonx/lints/thrift.py	/^    __filetype__ = 'thrift'$/;"	v	class:Thrift	file:
__filetype__	plugged/validator.vim/pythonx/lints/vim/vimlparser.py	/^    __filetype__ = 'vim'$/;"	v	class:VimLParserLint	file:
__filetype__	plugged/validator.vim/pythonx/lints/vim/vint.py	/^    __filetype__ = 'vim'$/;"	v	class:VimVint	file:
__filetype__	plugged/validator.vim/pythonx/lints/zsh/zsh.py	/^    __filetype__ = "zsh"$/;"	v	class:ZshLint	file:
__filetype__	plugged/validator.vim/pythonx/validator/__init__.py	/^    __filetype__ = Unusable()$/;"	v	class:Validator	file:
__filetype__	plugged/validator.vim/tests/test_load.py	/^    __filetype__ = 'linter1'$/;"	v	class:Linter1	file:
__filetype__	plugged/validator.vim/tests/test_load.py	/^    __filetype__ = 'linter2'$/;"	v	class:Linter2	file:
__filetype__	plugged/validator.vim/tests/test_validator.py	/^    __filetype__ = 'no-name'$/;"	v	class:NoName	file:
__fzf_cd__	plugged/fzf/shell/key-bindings.bash	/^__fzf_cd__() {$/;"	f
__fzf_comprun	plugged/fzf/shell/completion.bash	/^__fzf_comprun() {$/;"	f
__fzf_comprun	plugged/fzf/shell/completion.zsh	/^__fzf_comprun() {$/;"	f
__fzf_defaults	plugged/fzf/shell/completion.bash	/^__fzf_defaults() {$/;"	f
__fzf_defaults	plugged/fzf/shell/completion.zsh	/^__fzf_defaults() {$/;"	f
__fzf_defaults	plugged/fzf/shell/key-bindings.bash	/^__fzf_defaults() {$/;"	f
__fzf_defaults	plugged/fzf/shell/key-bindings.zsh	/^__fzf_defaults() {$/;"	f
__fzf_defc	plugged/fzf/shell/completion.bash	/^__fzf_defc() {$/;"	f
__fzf_extract_command	plugged/fzf/shell/completion.zsh	/^__fzf_extract_command() {$/;"	f
__fzf_generic_path_completion	plugged/fzf/shell/completion.bash	/^__fzf_generic_path_completion() {$/;"	f
__fzf_generic_path_completion	plugged/fzf/shell/completion.zsh	/^__fzf_generic_path_completion() {$/;"	f
__fzf_history__	plugged/fzf/shell/key-bindings.bash	/^  __fzf_history__() {$/;"	f
__fzf_list_hosts	plugged/fzf/shell/completion.bash	/^  __fzf_list_hosts() {$/;"	f
__fzf_list_hosts	plugged/fzf/shell/completion.zsh	/^  __fzf_list_hosts() {$/;"	f
__fzf_orig_completion	plugged/fzf/shell/completion.bash	/^__fzf_orig_completion() {$/;"	f
__fzf_orig_completion_get_orig_func	plugged/fzf/shell/completion.bash	/^__fzf_orig_completion_get_orig_func() {$/;"	f
__fzf_orig_completion_instantiate	plugged/fzf/shell/completion.bash	/^__fzf_orig_completion_instantiate() {$/;"	f
__fzf_select	plugged/fzf/shell/key-bindings.zsh	/^__fzf_select() {$/;"	f
__fzf_select__	plugged/fzf/shell/key-bindings.bash	/^__fzf_select__() {$/;"	f
__fzfcmd	plugged/fzf/shell/key-bindings.bash	/^__fzfcmd() {$/;"	f
__fzfcmd	plugged/fzf/shell/key-bindings.zsh	/^__fzfcmd() {$/;"	f
__get__	plugged/completor.vim/pythonx/completor/__init__.py	/^    def __get__(self, inst, owner):$/;"	m	class:Unusable
__get__	plugged/completor.vim/tests/conftest.py	/^    def __get__(self, inst, owner):$/;"	m	class:Vars
__get__	plugged/validator.vim/pythonx/validator/__init__.py	/^    def __get__(self, inst, owner):$/;"	m	class:Unusable
__getattr__	plugged/completor.vim/pythonx/completor/_vim.py	/^    def __getattr__(self, attr):$/;"	m	class:_Vim
__getitem__	plugged/completor.vim/pythonx/completor/_vim.py	/^        def __getitem__(self, key):$/;"	m	class:_patch_nvim.Bindeval
__getitem__	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __getitem__(self, key):$/;"	m	class:VimBufferProxy
__getitem__	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __getitem__(self, index):$/;"	m	class:Position
__getitem__	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def __getitem__(self, index):$/;"	m	class:_SnippetUtilCursor
__getitem__	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def __getitem__(self, no):$/;"	m	class:_Tabs
__getitem__	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^    def __getitem__(self, idx):$/;"	m	class:VimBuffer
__getitem__	plugged/validator.vim/pythonx/validator/__init__.py	/^    def __getitem__(self, ft):$/;"	m	class:Validator
__getslice__	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __getslice__(self, i, j):$/;"	m	class:VimBufferProxy
__init__	plugged/MatchTagAlways/python/mta_core.py	/^  def __init__( self, match_object ):$/;"	m	class:Tag
__init__	plugged/completor.vim/pythonx/completers/common/__init__.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Common
__init__	plugged/completor.vim/pythonx/completers/common/buffer.py	/^    def __init__(self):$/;"	m	class:TokenStore
__init__	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Clang
__init__	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Lsp
__init__	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Rename
__init__	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def __init__(self, conf):$/;"	m	class:DidChangeConfiguration
__init__	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def __init__(self, ppid, workspace):$/;"	m	class:Initialize
__init__	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def __init__(self, query=""):$/;"	m	class:Symbol
__init__	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def __init__(self, uri):$/;"	m	class:Format
__init__	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def __init__(self, uri, action=None):$/;"	m	class:CodeAction
__init__	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def __init__(self, uri, language_id, version, text):$/;"	m	class:DidOpen
__init__	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def __init__(self, uri, line, offset):$/;"	m	class:Completion
__init__	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def __init__(self, uri, version, text):$/;"	m	class:DidChange
__init__	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def __init__(self, uri, version, text):$/;"	m	class:DidSave
__init__	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:Jedi
__init__	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^    def __init__(self, jedi):$/;"	m	class:JediProcessor
__init__	plugged/completor.vim/pythonx/completor/__init__.py	/^    def __init__(self):$/;"	m	class:Completor
__init__	plugged/completor.vim/pythonx/completor/__init__.py	/^    def __init__(self, ft, input_data):$/;"	m	class:_ft_context
__init__	plugged/completor.vim/pythonx/completor/_vim.py	/^        def __init__(self, data):$/;"	m	class:_patch_nvim.Bindeval
__init__	plugged/completor.vim/pythonx/completor/utils.py	/^    def __init__(self, severity):$/;"	m	class:_highlight
__init__	plugged/completor.vim/tests/conftest.py	/^    def __init__(self):$/;"	m	class:Vim
__init__	plugged/completor.vim/tests/conftest.py	/^    def __init__(self, number, name=''):$/;"	m	class:Buffer
__init__	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __init__(self, snippets_stack, vstate):$/;"	m	class:VimBufferProxy
__init__	plugged/ultisnips/pythonx/UltiSnips/indent_util.py	/^    def __init__(self):$/;"	m	class:IndentUtil
__init__	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __init__(self, line, col):$/;"	m	class:Position
__init__	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^    def __init__(self, host, port):$/;"	m	class:RemotePDB
__init__	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def __init__($/;"	m	class:SnippetDefinition
__init__	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def __init__(self, cursor):$/;"	m	class:_SnippetUtilCursor
__init__	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/snipmate.py	/^    def __init__(self, trigger, value, description, location):$/;"	m	class:SnipMateSnippetDefinition
__init__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __init__(self, gen, indent):$/;"	m	class:Token
__init__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __init__(self, text, offset):$/;"	m	class:_TextIterator
__init__	plugged/ultisnips/pythonx/UltiSnips/snippet/source/base.py	/^    def __init__(self):$/;"	m	class:SnippetSource
__init__	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/base.py	/^    def __init__(self):$/;"	m	class:SnippetFileSource
__init__	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/base.py	/^    def __init__(self, filename, line_index, msg):$/;"	m	class:SnippetSyntaxError
__init__	plugged/ultisnips/pythonx/UltiSnips/snippet/source/snippet_dictionary.py	/^    def __init__(self):$/;"	m	class:SnippetDictionary
__init__	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def __init__(self, expand_trigger, forward_trigger, backward_trigger):$/;"	m	class:SnippetManager
__init__	plugged/ultisnips/pythonx/UltiSnips/text.py	/^    def __init__(self, text):$/;"	m	class:LineIterator
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def __init__($/;"	m	class:TextObject
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:EditableTextObject
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/choices.py	/^    def __init__(self, parent, token: ChoicesToken):$/;"	m	class:Choices
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/mirror.py	/^    def __init__(self, parent, tabstop, token):$/;"	m	class:Mirror
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:SnippetUtilForAction
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def __init__(self, initial_indent, vmode, vtext, context, parent):$/;"	m	class:SnippetUtil
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def __init__(self, parent, token):$/;"	m	class:PythonCode
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def __init__(self, to):$/;"	m	class:_Tabs
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/shell_code.py	/^    def __init__(self, parent, token):$/;"	m	class:ShellCode
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^    def __init__($/;"	m	class:SnippetInstance
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^    def __init__(self, parent):$/;"	m	class:_VimCursor
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/tabstop.py	/^    def __init__(self, parent, token, start=None, end=None):$/;"	m	class:TabStop
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^    def __init__(self, expression):$/;"	m	class:_CleverReplace
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^    def __init__(self, parent, ts, token):$/;"	m	class:Transformation
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^    def __init__(self, token):$/;"	m	class:TextObjectTransformation
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/viml_code.py	/^    def __init__(self, parent, token):$/;"	m	class:VimLCode
__init__	plugged/ultisnips/pythonx/UltiSnips/text_objects/visual.py	/^    def __init__(self, parent, token):$/;"	m	class:Visual
__init__	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def __init__(self):$/;"	m	class:VimPosition
__init__	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def __init__(self):$/;"	m	class:VimState
__init__	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def __init__(self):$/;"	m	class:VisualContentPreserver
__init__	plugged/ultisnips/rplugin/python3/deoplete/sources/ultisnips.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	plugged/ultisnips/test/vim_interface.py	/^    def __init__(self):$/;"	m	class:VimInterfaceWindows
__init__	plugged/ultisnips/test/vim_interface.py	/^    def __init__(self, name=""):$/;"	m	class:TempFileManager
__init__	plugged/ultisnips/test/vim_interface.py	/^    def __init__(self, vim_executable, name):$/;"	m	class:VimInterface
__init__	plugged/ultisnips/test/vim_interface.py	/^    def __init__(self, vim_executable, session):$/;"	m	class:VimInterfaceTmux
__init__	plugged/ultisnips/test/vim_interface.py	/^    def __init__(self, vim_executable, session):$/;"	m	class:VimInterfaceTmuxNeovim
__init__	plugged/ultisnips/test/vim_test_case.py	/^    def __init__(self, *args, **kwargs):$/;"	m	class:VimTestCase
__init__	plugged/validator.vim/pythonx/validator/__init__.py	/^    def __init__(cls, name, bases, attrs):$/;"	m	class:Meta
__iter__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __iter__(self):$/;"	m	class:_TextIterator
__iter__	plugged/ultisnips/pythonx/UltiSnips/snippet/source/snippet_dictionary.py	/^    def __iter__(self):$/;"	m	class:SnippetDictionary
__iter__	plugged/ultisnips/pythonx/UltiSnips/text.py	/^    def __iter__(self):$/;"	m	class:LineIterator
__le__	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __le__(self, other):$/;"	m	class:Position
__le__	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def __le__(self, other):$/;"	m	class:TextObject
__len__	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __len__(self):$/;"	m	class:VimBufferProxy
__len__	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def __len__(self):$/;"	m	class:_SnippetUtilCursor
__len__	plugged/ultisnips/pythonx/UltiSnips/snippet/source/snippet_dictionary.py	/^    def __len__(self):$/;"	m	class:SnippetDictionary
__len__	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^    def __len__(self):$/;"	m	class:VimBuffer
__lshift__	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def __lshift__(self, other):$/;"	m	class:SnippetUtil
__lt__	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __lt__(self, other):$/;"	m	class:Position
__lt__	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def __lt__(self, other):$/;"	m	class:TextObject
__ne__	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __ne__(self, other):$/;"	m	class:Position
__new__	plugged/completor.vim/pythonx/completor/__init__.py	/^    def __new__(mcls, name, bases, attrs):$/;"	m	class:Meta
__new__	plugged/completor.vim/tests/conftest.py	/^        def __new__(self, **kwargs):$/;"	m	class:Vim.Dictionary
__next__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __next__(self):$/;"	m	class:_TextIterator
__next__	plugged/ultisnips/pythonx/UltiSnips/text.py	/^    def __next__(self):$/;"	m	class:LineIterator
__nonzero__	plugged/MatchTagAlways/python/mta_core.py	/^    def __nonzero__( self ):$/;"	m	class:Tag
__repr__	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __repr__(self):$/;"	m	class:Position
__repr__	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def __repr__(self):$/;"	m	class:SnippetDefinition
__repr__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __repr__(self):$/;"	m	class:ChoicesToken
__repr__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __repr__(self):$/;"	m	class:EndOfTextToken
__repr__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __repr__(self):$/;"	m	class:EscapeCharToken
__repr__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __repr__(self):$/;"	m	class:MirrorToken
__repr__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __repr__(self):$/;"	m	class:PythonCodeToken
__repr__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __repr__(self):$/;"	m	class:ShellCodeToken
__repr__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __repr__(self):$/;"	m	class:TabStopToken
__repr__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __repr__(self):$/;"	m	class:TransformationToken
__repr__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __repr__(self):$/;"	m	class:VimLCodeToken
__repr__	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def __repr__(self):$/;"	m	class:VisualToken
__repr__	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def __repr__(self):$/;"	m	class:TextObject
__repr__	plugged/ultisnips/pythonx/UltiSnips/text_objects/choices.py	/^    def __repr__(self):$/;"	m	class:Choices
__repr__	plugged/ultisnips/pythonx/UltiSnips/text_objects/tabstop.py	/^    def __repr__(self):$/;"	m	class:TabStop
__rshift__	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def __rshift__(self, other):$/;"	m	class:SnippetUtil
__set__	plugged/completor.vim/tests/conftest.py	/^    def __set__(self, inst, value):$/;"	m	class:Vars
__setitem__	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __setitem__(self, key, value):$/;"	m	class:VimBufferProxy
__setitem__	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def __setitem__(self, index, value):$/;"	m	class:_SnippetUtilCursor
__setitem__	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def __setitem__(self, no, value):$/;"	m	class:_Tabs
__setitem__	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^    def __setitem__(self, idx, text):$/;"	m	class:VimBuffer
__setslice__	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def __setslice__(self, i, j, text):$/;"	m	class:VimBufferProxy
__str__	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def __str__(self):$/;"	m	class:_SnippetUtilCursor
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:BugJobMap
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:Bugscache
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:BuildPlatform
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:ClassifiedFailure
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:Commit
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:FailureLine
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:Group
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:Job
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:JobDetail
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:JobGroup
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:JobLog
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:JobNote
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:JobType
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:MachinePlatform
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:NamedModel
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:OptionCollection
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:Push
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:Repository
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:RunnableJob
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:TextLogError
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:TextLogErrorMatch
__str__	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def __str__(self):$/;"	m	class:TextLogErrorMetadata
__sub__	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def __sub__(self, pos):$/;"	m	class:Position
_actionType_index	plugged/fzf/src/actiontype_string.go	/^var _actionType_index = [...]uint16{0, 9, 17, 25, 35, 42, 50, 68, 76, 85, 102, 123, 138, 159, 18/;"	v	package:fzf
_actionType_name	plugged/fzf/src/actiontype_string.go	/^const _actionType_name = "actIgnoreactStartactClickactInvalidactCharactMouseactBeginningOfLineac/;"	c	package:fzf
_action_context	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _action_context(self):$/;"	m	class:SnippetManager
_add_child	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _add_child(self, child):$/;"	m	class:EditableTextObject
_api	plugged/completor.vim/pythonx/completor/api.py	/^def _api(func):$/;"	f
_api	plugged/validator.vim/pythonx/validator/api.py	/^def _api(func):$/;"	f
_apply_change	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def _apply_change(self, change):$/;"	m	class:VimBufferProxy
_arg_cache	plugged/completor.vim/pythonx/completor/__init__.py	/^_arg_cache = {}$/;"	v
_ask_snippets	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^def _ask_snippets(snippets):$/;"	f
_ask_user	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^def _ask_user(a, formatted):$/;"	f
_before_test	plugged/ultisnips/test/test_Fixes.py	/^    def _before_test(self):$/;"	m	class:NonUnicodeDataInUnnamedRegister
_before_test	plugged/ultisnips/test/test_Plugin.py	/^    def _before_test(self):$/;"	m	class:Plugin_SuperTab_SimpleTest
_before_test	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    def _before_test(self):$/;"	m	class:TestLangmapWithUtf8_ExpectCorrectResult
_before_test	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    def _before_test(self):$/;"	m	class:TestNonEmptyLangmapWithSemi_ExpectCorrectResult
_before_test	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    def _before_test(self):$/;"	m	class:_AddFuncBase
_before_test	plugged/ultisnips/test/vim_test_case.py	/^    def _before_test(self):$/;"	m	class:VimTestCase
_black_cmd	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    def _black_cmd(self):$/;"	m	class:Jedi
_bytes	plugged/completor.vim/pythonx/completor/_vim.py	/^def _bytes(data):$/;"	f
_cache	plugged/validator.vim/pythonx/validator/__init__.py	/^    _cache = {}$/;"	v	class:Validator
_cached	plugged/completor.vim/pythonx/completor/_vim.py	/^def _cached(f):$/;"	f
_calc_end	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^def _calc_end(text, start):$/;"	f
_can_expand	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _can_expand(self, autotrigger_only=False):$/;"	m	class:SnippetManager
_check_filetype	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _check_filetype(self, ft):$/;"	m	class:SnippetManager
_check_if_still_inside_snippet	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _check_if_still_inside_snippet(self):$/;"	m	class:SnippetManager
_check_version	plugged/ultisnips/test/vim_interface.py	/^    def _check_version(self):$/;"	m	class:VimInterfaceTmux
_child_has_moved	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _child_has_moved(self, idx, pivot, diff):$/;"	m	class:EditableTextObject
_chomp	plugged/ultisnips/pythonx/UltiSnips/text_objects/shell_code.py	/^def _chomp(string):$/;"	f
_colorToAttribute	plugged/fzf/src/tui/tcell.go	/^	_colorToAttribute = []tcell.Color{$/;"	v	package:tui
_complete_cmd	plugged/completor.vim/pythonx/completers/go.py	/^    def _complete_cmd(self):$/;"	m	class:Go
_conf	plugged/completor.vim/pythonx/completor/_log.py	/^_conf = {$/;"	v
_context_match	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def _context_match(self, visual_content, before):$/;"	m	class:SnippetDefinition
_create	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^    def _create(cls):$/;"	m	class:RemotePDB
_create_file	plugged/ultisnips/test/vim_test_case.py	/^    def _create_file(self, file_path, content):$/;"	m	class:VimTestCase
_create_transformations	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/ulti_snips.py	/^def _create_transformations(all_tokens, seen_ts):$/;"	f
_ctx	plugged/completor.vim/pythonx/completor/__init__.py	/^_ctx = threading.local()$/;"	v
_current_snippet	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _current_snippet(self):$/;"	m	class:SnippetManager
_current_snippet_is_done	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _current_snippet_is_done(self):$/;"	m	class:SnippetManager
_cursor_moved	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _cursor_moved(self):$/;"	m	class:SnippetManager
_def_cmd	plugged/completor.vim/pythonx/completers/go.py	/^    def _def_cmd(self):$/;"	m	class:Go
_del_child	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _del_child(self, child):$/;"	m	class:EditableTextObject
_dir	plugged/completor.vim/pythonx/completor/_log.py	/^_dir = os.path.dirname(__file__)$/;"	v
_dir	plugged/validator.vim/pythonx/validator/utils.py	/^_dir = os.path.dirname(__file__)$/;"	v
_disable_edits	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def _disable_edits(self):$/;"	m	class:VimBufferProxy
_do_complete	plugged/completor.vim/pythonx/completor/__init__.py	/^    def _do_complete(self, data):$/;"	m	class:Completor
_do_edit	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _do_edit(self, cmd, ctab=None):$/;"	m	class:EditableTextObject
_do_edit	plugged/ultisnips/pythonx/UltiSnips/text_objects/choices.py	/^    def _do_edit(self, cmd, ctab=None):$/;"	m	class:Choices
_do_parse	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/base.py	/^    def _do_parse(parent, text, allowed_tokens):$/;"	f	function:tokenize_snippet_text	file:
_do_print	plugged/ultisnips/pythonx/UltiSnips/debug.py	/^    def _do_print(text_object, indent=""):$/;"	f	function:echo_to_hierarchy	file:
_do_snippet	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _do_snippet(self, snippet, before):$/;"	m	class:SnippetManager
_doc_cmd	plugged/completor.vim/pythonx/completers/go.py	/^    def _doc_cmd(self):$/;"	m	class:Go
_echohl	plugged/completor.vim/pythonx/completor/utils.py	/^    def _echohl(self, group):$/;"	m	class:_highlight
_editable_children	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _editable_children(self):$/;"	m	class:EditableTextObject
_enable_edits	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def _enable_edits(self):$/;"	m	class:VimBufferProxy
_ensure_classification	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def _ensure_classification(self):$/;"	m	class:JobNote
_eval	plugged/validator.vim/tests/conftest.py	/^def _eval(v):$/;"	f
_eval_code	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def _eval_code(self, code, additional_locals={}, compiled_code=None):$/;"	m	class:SnippetDefinition
_execute_action	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def _execute_action($/;"	m	class:SnippetDefinition
_exited	plugged/completor.vim/pythonx/completor/__init__.py	/^    _exited = False$/;"	v	class:Completor
_extra_vim_config	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_AnonBase
_extra_vim_config	plugged/ultisnips/test/test_Autocommands.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:Autocommands
_extra_vim_config	plugged/ultisnips/test/test_Autotrigger.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:Autotrigger_GlobalDisable
_extra_vim_config	plugged/ultisnips/test/test_Autotrigger.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:Autotrigger_GlobalDisableThenToggle
_extra_vim_config	plugged/ultisnips/test/test_Expand.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:SimpleExpandExpandOrJump_Ambiguity
_extra_vim_config	plugged/ultisnips/test/test_Expand.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:SimpleExpandExpandOrJump_Expand
_extra_vim_config	plugged/ultisnips/test/test_Expand.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:SimpleExpandJumpOrExpand_Ambiguity
_extra_vim_config	plugged/ultisnips/test/test_Expand.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:SimpleExpandJumpOrExpand_Expand
_extra_vim_config	plugged/ultisnips/test/test_Expand.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:SimpleExpandNewLineAndBackspae_ExpectCorrectResult
_extra_vim_config	plugged/ultisnips/test/test_Expand.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:SimpleExpand_DoNotClobberDefaultRegister
_extra_vim_config	plugged/ultisnips/test/test_Fixes.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:ShiftWidthZero
_extra_vim_config	plugged/ultisnips/test/test_Fixes.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:VirtualEdit
_extra_vim_config	plugged/ultisnips/test/test_Folding.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:FoldingEnabled_SnippetWithFold_ExpectNoFolding
_extra_vim_config	plugged/ultisnips/test/test_Folding.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PerlSyntaxFold
_extra_vim_config	plugged/ultisnips/test/test_Format.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:ProperIndenting_AutoIndentAndNewline_ECR
_extra_vim_config	plugged/ultisnips/test/test_Format.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
_extra_vim_config	plugged/ultisnips/test/test_Format.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_ExpandTabs
_extra_vim_config	plugged/ultisnips/test/test_Format.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_FormatoptionsBase
_extra_vim_config	plugged/ultisnips/test/test_Interpolation.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PythonCode_IndentEtSw
_extra_vim_config	plugged/ultisnips/test/test_Interpolation.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PythonCode_IndentEtSwOffset
_extra_vim_config	plugged/ultisnips/test/test_Interpolation.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PythonCode_IndentNoetSwTs
_extra_vim_config	plugged/ultisnips/test/test_Interpolation.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:PythonCode_OptExists
_extra_vim_config	plugged/ultisnips/test/test_ListSnippets.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:ListAllAvailable_Disabled_ExpectCorrectResult
_extra_vim_config	plugged/ultisnips/test/test_Movement.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:CursorMovement_BS_InEditMode
_extra_vim_config	plugged/ultisnips/test/test_Plugin.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:Plugin_SuperTab_SimpleTest
_extra_vim_config	plugged/ultisnips/test/test_Selection.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_ES_Base
_extra_vim_config	plugged/ultisnips/test/test_Selection.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_OS_Base
_extra_vim_config	plugged/ultisnips/test/test_Selection.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:_SelectModeMappings
_extra_vim_config	plugged/ultisnips/test/test_SnipMate.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:snipMate_Disabled
_extra_vim_config	plugged/ultisnips/test/test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_ET
_extra_vim_config	plugged/ultisnips/test/test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_ET_Leading_Spaces
_extra_vim_config	plugged/ultisnips/test/test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_ET_SW
_extra_vim_config	plugged/ultisnips/test/test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_ET_SW_TS
_extra_vim_config	plugged/ultisnips/test/test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_No_TS
_extra_vim_config	plugged/ultisnips/test/test_SnippetOptions.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:No_Tab_Expand_RealWorld
_extra_vim_config	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:AddNewSnippetSource
_extra_vim_config	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:TestNonEmptyLangmap_ExpectCorrectResult
_extra_vim_config	plugged/ultisnips/test/test_Visual.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:Visual_SelectOneWordExclusive
_extra_vim_config	plugged/ultisnips/test/vim_test_case.py	/^    def _extra_vim_config(self, vim_config):$/;"	m	class:VimTestCase
_file	plugged/completor.vim/pythonx/completor/_log.py	/^_file = os.path.join(os.path.dirname(_dir), 'completor.log')$/;"	v
_file_to_edit	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _file_to_edit(self, requested_ft, bang):$/;"	m	class:SnippetManager
_find_closing_brace	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^def _find_closing_brace(string, start_pos):$/;"	f
_find_recursive	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^        def _find_recursive(obj):$/;"	f	member:SnippetInstance.update_textobjects	file:
_format	plugged/completor.vim/pythonx/completers/go.py	/^    def _format(self):$/;"	m	class:Go
_format	plugged/completor.vim/pythonx/completers/rust.py	/^    def _format(self):$/;"	m	class:Racer
_ft_context	plugged/completor.vim/pythonx/completor/__init__.py	/^class _ft_context(object):$/;"	c
_fzf_alias_completion	plugged/fzf/shell/completion.bash	/^_fzf_alias_completion() {$/;"	f
_fzf_complete	plugged/fzf/shell/completion.bash	/^_fzf_complete() {$/;"	f
_fzf_complete	plugged/fzf/shell/completion.zsh	/^_fzf_complete() {$/;"	f
_fzf_complete_export	plugged/fzf/shell/completion.zsh	/^_fzf_complete_export() {$/;"	f
_fzf_complete_kill	plugged/fzf/shell/completion.bash	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill	plugged/fzf/shell/completion.zsh	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill_post	plugged/fzf/shell/completion.zsh	/^_fzf_complete_kill_post() {$/;"	f
_fzf_complete_ssh	plugged/fzf/shell/completion.bash	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_ssh	plugged/fzf/shell/completion.zsh	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_telnet	plugged/fzf/shell/completion.zsh	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_unalias	plugged/fzf/shell/completion.zsh	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unset	plugged/fzf/shell/completion.zsh	/^_fzf_complete_unset() {$/;"	f
_fzf_dir_completion	plugged/fzf/shell/completion.bash	/^_fzf_dir_completion() {$/;"	f
_fzf_dir_completion	plugged/fzf/shell/completion.zsh	/^_fzf_dir_completion() {$/;"	f
_fzf_feed_fifo	plugged/fzf/shell/completion.zsh	/^_fzf_feed_fifo() {$/;"	f
_fzf_file_completion	plugged/fzf/shell/completion.bash	/^_fzf_file_completion() {$/;"	f
_fzf_handle_dynamic_completion	plugged/fzf/shell/completion.bash	/^_fzf_handle_dynamic_completion() {$/;"	f
_fzf_host_completion	plugged/fzf/shell/completion.bash	/^_fzf_host_completion() {$/;"	f
_fzf_opts_completion	plugged/fzf/shell/completion.bash	/^_fzf_opts_completion() {$/;"	f
_fzf_path_completion	plugged/fzf/shell/completion.bash	/^_fzf_path_completion() {$/;"	f
_fzf_path_completion	plugged/fzf/shell/completion.zsh	/^_fzf_path_completion() {$/;"	f
_fzf_proc_completion	plugged/fzf/shell/completion.bash	/^_fzf_proc_completion() {$/;"	f
_fzf_proc_completion_post	plugged/fzf/shell/completion.bash	/^_fzf_proc_completion_post() {$/;"	f
_fzf_setup_completion	plugged/fzf/shell/completion.bash	/^_fzf_setup_completion() {$/;"	f
_fzf_statusline	plugged/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
_fzf_var_completion	plugged/fzf/shell/completion.bash	/^_fzf_var_completion() {$/;"	f
_gen_action_args	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def _gen_action_args(self, action, args):$/;"	m	class:Lsp
_gen_ale_completions	plugged/completor.vim/pythonx/completers/ale.py	/^def _gen_ale_completions(input_data):$/;"	f
_gen_archive	plugged/completor.vim/pythonx/completers/go.py	/^    def _gen_archive(self):$/;"	m	class:Go
_gen_args	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^    def _gen_args(self):$/;"	m	class:Clang
_gen_complete_args	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^    def _gen_complete_args(self):$/;"	m	class:Clang
_gen_definition_args	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^    def _gen_definition_args(self):$/;"	m	class:Clang
_get_all_snippet_files_for	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/base.py	/^    def _get_all_snippet_files_for(self, ft):$/;"	m	class:SnippetFileSource
_get_all_snippet_files_for	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^    def _get_all_snippet_files_for(self, ft):$/;"	m	class:SnipMateFileSource
_get_all_snippet_files_for	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^    def _get_all_snippet_files_for(self, ft):$/;"	m	class:UltiSnipsFileSource
_get_choices_placeholder	plugged/ultisnips/pythonx/UltiSnips/text_objects/choices.py	/^    def _get_choices_placeholder(self) -> str:$/;"	m	class:Choices	typeref:typename:str
_get_diff	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def _get_diff(self, start, end, new_value):$/;"	m	class:VimBufferProxy
_get_existing_deep_extends	plugged/ultisnips/pythonx/UltiSnips/snippet/source/base.py	/^    def _get_existing_deep_extends(self, base_filetypes):$/;"	m	class:SnippetSource
_get_filters	plugged/validator.vim/pythonx/validator/__init__.py	/^def _get_filters(ft):$/;"	f
_get_line_diff	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def _get_line_diff(self, line_number, before, after):$/;"	m	class:VimBufferProxy
_get_next_tab	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _get_next_tab(self, number):$/;"	m	class:EditableTextObject
_get_pos	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def _get_pos(name):$/;"	f
_get_potential_snippet_filenames_to_edit	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^def _get_potential_snippet_filenames_to_edit($/;"	f	typeref:typename:Set[str]
_get_prev_tab	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _get_prev_tab(self, number):$/;"	m	class:EditableTextObject
_get_tabstop	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _get_tabstop(self, requester, number):$/;"	m	class:EditableTextObject
_get_tabstop	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^    def _get_tabstop(self, requester, no):$/;"	m	class:SnippetInstance
_get_text	plugged/ultisnips/pythonx/UltiSnips/text_objects/mirror.py	/^    def _get_text(self):$/;"	m	class:Mirror
_get_text	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^    def _get_text(self):$/;"	m	class:Transformation
_get_tmp	plugged/ultisnips/pythonx/UltiSnips/text_objects/shell_code.py	/^def _get_tmp():$/;"	f
_get_type	plugged/validator.vim/pythonx/validator/__init__.py	/^def _get_type(msg):$/;"	f
_get_unescaped_choice_item	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def _get_unescaped_choice_item(self, escaped_choice_item):$/;"	m	class:ChoicesToken
_handle_failure	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _handle_failure(self, trigger, pass_through=False):$/;"	m	class:SnippetManager
_handle_snippet_or_global	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^def _handle_snippet_or_global($/;"	f
_highlight	plugged/completor.vim/pythonx/completor/utils.py	/^class _highlight(object):$/;"	c
_initialResize	plugged/fzf/src/tui/tcell.go	/^	_initialResize   bool = true$/;"	v	package:tui	typeref:typename:bool
_inject_vim_files	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^def _inject_vim_files():$/;"	f
_is_comment	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    def _is_comment(self):$/;"	m	class:Jedi
_is_pos_zero	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def _is_pos_zero(pos):$/;"	f
_jedi_cmd	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    def _jedi_cmd(self, action):$/;"	m	class:Jedi
_jump	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _jump(self, jump_direction: JumpDirection):$/;"	m	class:SnippetManager
_leaving_buffer	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _leaving_buffer(self):$/;"	m	class:SnippetManager
_leaving_insert_mode	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _leaving_insert_mode(self):$/;"	m	class:SnippetManager
_link_file	plugged/ultisnips/test/vim_test_case.py	/^    def _link_file(self, source, relative_destination):$/;"	m	class:VimTestCase
_load	plugged/completor.vim/pythonx/completor/__init__.py	/^def _load(ft):$/;"	f
_load	plugged/completor.vim/pythonx/completor/api.py	/^from . import load_completer, load as _load, vim, set_current_completer, \\$/;"	x	nameref:unknown:load
_load_snippets_for	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/base.py	/^    def _load_snippets_for(self, ft):$/;"	m	class:SnippetFileSource
_log_filter	plugged/completor.vim/pythonx/completor/_log.py	/^_log_filter = {}$/;"	v
_make_debug_exception	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def _make_debug_exception(self, e, code=""):$/;"	m	class:SnippetDefinition
_move	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _move(self, pivot, diff):$/;"	m	class:EditableTextObject
_move	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _move(self, pivot, diff):$/;"	m	class:TextObject
_multi_char_case_change	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^        def _multi_char_case_change(match):$/;"	f	member:_CleverReplace.replace	file:
_needs_update	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/base.py	/^    def _needs_update(self, ft):$/;"	m	class:SnippetFileSource
_one_char_case_change	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^        def _one_char_case_change(match):$/;"	f	member:_CleverReplace.replace	file:
_parse	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:ChoicesToken
_parse	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:EscapeCharToken
_parse	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:MirrorToken
_parse	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:PythonCodeToken
_parse	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:ShellCodeToken
_parse	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:TabStopToken
_parse	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:Token
_parse	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:TransformationToken
_parse	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:VimLCodeToken
_parse	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def _parse(self, stream, indent):$/;"	m	class:VisualToken
_parse_number	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^def _parse_number(stream):$/;"	f
_parse_snippet	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^def _parse_snippet(line, lines, filename):$/;"	f
_parse_snippet_file	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/base.py	/^    def _parse_snippet_file(self, filedata, filename):$/;"	m	class:SnippetFileSource
_parse_snippet_file	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^    def _parse_snippet_file(self, filedata, filename):$/;"	m	class:SnipMateFileSource
_parse_snippet_file	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^def _parse_snippet_file(content, full_filename):$/;"	f
_parse_snippet_file	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^    def _parse_snippet_file(self, filedata, filename):$/;"	m	class:UltiSnipsFileSource
_parse_snippets	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/base.py	/^    def _parse_snippets(self, ft, filename):$/;"	m	class:SnippetFileSource
_parse_snippets_file	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^def _parse_snippets_file(data, filename):$/;"	f
_parse_snippets_file	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^def _parse_snippets_file(data, filename):$/;"	f
_parse_till_closing_brace	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^def _parse_till_closing_brace(stream):$/;"	f
_parse_till_unescaped_char	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^def _parse_till_unescaped_char(stream, chars):$/;"	f
_pat	plugged/completor.vim/pythonx/completers/common/filename.py	/^    def _pat(p):$/;"	f	function:find	file:
_patch_nvim	plugged/completor.vim/pythonx/completor/_vim.py	/^def _patch_nvim(vim):$/;"	f
_path	plugged/completor.vim/pythonx/completers/common/filename.py	/^    def _path(self, base):$/;"	m	class:Filename
_place_initial_text	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^        def _place_initial_text(obj):$/;"	f	member:SnippetInstance.replace_initial_text	file:
_pm	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^    def _pm(self, tb):$/;"	m	class:RemotePDB
_precompile_globals	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def _precompile_globals(self):$/;"	m	class:SnippetDefinition
_prevMouseButton	plugged/fzf/src/tui/tcell.go	/^	_prevMouseButton tcell.ButtonMask$/;"	v	package:tui	typeref:typename:tcell.ButtonMask
_re_match	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def _re_match(self, trigger):$/;"	m	class:SnippetDefinition
_read_args	plugged/completor.vim/pythonx/completor/__init__.py	/^def _read_args(path):$/;"	f
_read_args	plugged/validator.vim/pythonx/validator/__init__.py	/^def _read_args(path):$/;"	f
_read_text_file	plugged/ultisnips/test/vim_interface.py	/^def _read_text_file(filename):$/;"	f
_refresh_snippets	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _refresh_snippets(self):$/;"	m	class:SnippetManager
_regex_map	plugged/validator.vim/pythonx/validator/__init__.py	/^    _regex_map = {}$/;"	v	class:Validator
_registry	plugged/validator.vim/pythonx/validator/__init__.py	/^    _registry = collections.defaultdict(dict)$/;"	v	class:Validator
_reinit	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _reinit(self):$/;"	m	class:SnippetManager
_replace_conditional	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^def _replace_conditional(match, string):$/;"	f
_replace_text	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^def _replace_text(buf, start, end, text):$/;"	f
_report_exception	plugged/ultisnips/pythonx/UltiSnips/err_to_scratch_buffer.py	/^def _report_exception(self, msg, e):$/;"	f
_reset	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def _reset(self, cur):$/;"	m	class:SnippetUtil
_resolve_ft	plugged/completor.vim/pythonx/completor/__init__.py	/^def _resolve_ft(ft):$/;"	f
_run_shell_command	plugged/ultisnips/pythonx/UltiSnips/text_objects/shell_code.py	/^def _run_shell_command(cmd, tmpdir):$/;"	f
_rv_changed	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def _rv_changed(self):$/;"	m	class:SnippetUtil
_save_last_visual_selection	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _save_last_visual_selection(self):$/;"	m	class:SnippetManager
_screen	plugged/fzf/src/tui/tcell.go	/^	_screen          tcell.Screen$/;"	v	package:tui	typeref:typename:tcell.Screen
_select_and_create_file_to_edit	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^def _select_and_create_file_to_edit(potentials: Set[str]) -> str:$/;"	f	typeref:typename:str
_send	plugged/ultisnips/test/vim_interface.py	/^    def _send(self, s):$/;"	m	class:VimInterfaceTmux
_serialized_components	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def _serialized_components(self):$/;"	m	class:FailureLine
_set_pos	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def _set_pos(name, pos):$/;"	f
_setup_inner_state	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _setup_inner_state(self):$/;"	m	class:SnippetManager
_shouldHidden	plugged/completor.vim/pythonx/completers/lsp/action.py	/^def _shouldHidden(line):$/;"	f
_show_user_warning	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^def _show_user_warning(msg):$/;"	f
_shutdown	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^    def _shutdown(self):$/;"	m	class:RemotePDB
_snip_quote	plugged/ultisnips/test/test_Chars.py	/^def _snip_quote(qt):$/;"	f
_snipmate_files_for	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^def _snipmate_files_for(ft):$/;"	f
_snips	plugged/completor.vim/tests/conftest.py	/^    def _snips(self, base, other):$/;"	m	class:UltiSnips
_snips	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _snips(self, before, partial, autotrigger_only=False):$/;"	m	class:SnippetManager
_splitRegex	plugged/fzf/src/pattern.go	/^var _splitRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
_split_conditional	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^def _split_conditional(string):$/;"	f
_splitall	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/snipmate.py	/^def _splitall(path):$/;"	f
_statement	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^    def _statement(self, c, args):$/;"	m	class:JediProcessor
_teardown_inner_state	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _teardown_inner_state(self):$/;"	m	class:SnippetManager
_text	plugged/completor.vim/pythonx/completor/__init__.py	/^    def _text(ft):$/;"	m	class:_ft_context
_thread_run	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^        def _thread_run():$/;"	f	member:RemotePDB.pm	file:
_toggle_autotrigger	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _toggle_autotrigger(self):$/;"	m	class:SnippetManager
_track_change	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _track_change(self):$/;"	m	class:SnippetManager
_transform	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^    def _transform(self, text):$/;"	m	class:TextObjectTransformation
_try_expand	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def _try_expand(self, autotrigger_only=False):$/;"	m	class:SnippetManager
_type_map	plugged/validator.vim/pythonx/validator/__init__.py	/^    _type_map = {$/;"	v	class:Validator
_unicode	plugged/completor.vim/pythonx/completor/__init__.py	/^def _unicode(text):$/;"	f
_unmap_select_mode_mapping	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def _unmap_select_mode_mapping():$/;"	f
_update	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _update(self, done, buf):$/;"	m	class:EditableTextObject
_update	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _update(self, done, buf):$/;"	m	class:NoneditableTextObject
_update	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def _update(self, done, buf):$/;"	m	class:TextObject
_update	plugged/ultisnips/pythonx/UltiSnips/text_objects/choices.py	/^    def _update(self, done, buf):$/;"	m	class:Choices
_update	plugged/ultisnips/pythonx/UltiSnips/text_objects/mirror.py	/^    def _update(self, done, buf):$/;"	m	class:Mirror
_update	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def _update(self, done, buf):$/;"	m	class:PythonCode
_update	plugged/ultisnips/pythonx/UltiSnips/text_objects/shell_code.py	/^    def _update(self, done, buf):$/;"	m	class:ShellCode
_update	plugged/ultisnips/pythonx/UltiSnips/text_objects/viml_code.py	/^    def _update(self, done, buf):$/;"	m	class:VimLCode
_update	plugged/ultisnips/pythonx/UltiSnips/text_objects/visual.py	/^    def _update(self, done, buf):$/;"	m	class:Visual
_update_failure_type	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def _update_failure_type(self):$/;"	m	class:JobNote
_utf8	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^def _utf8(b):$/;"	f
_validator	plugged/validator.vim/pythonx/validator/__init__.py	/^_validator = Validator()$/;"	v
_vim_dec	plugged/ultisnips/pythonx/UltiSnips/compatibility.py	/^def _vim_dec(string):$/;"	f
_vim_enc	plugged/ultisnips/pythonx/UltiSnips/compatibility.py	/^def _vim_enc(bytearray):$/;"	f
_vim_line_with_eol	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^        _vim_line_with_eol = lambda ln: vim_helper.buf[ln] + "\\n"$/;"	f	member:VisualContentPreserver.conserve	file:
_words_for_line	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^def _words_for_line(trigger, before, num_words=None):$/;"	f
_yapf_cmd	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    def _yapf_cmd(self):$/;"	m	class:Jedi
`--filter` will not block when sort is disabled	plugged/fzf/CHANGELOG.md	/^#### `--filter` will not block when sort is disabled$/;"	t	subsection:CHANGELOG""0.9.4""Improvements
`--height`	plugged/fzf/ADVANCED.md	/^### `--height`$/;"	S	section:Advanced fzf examples""Display modes
`--height` mode	plugged/fzf/README.md	/^#### `--height` mode$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage""Display modes
`--tmux`	plugged/fzf/ADVANCED.md	/^### `--tmux`$/;"	S	section:Advanced fzf examples""Display modes
`--tmux` mode	plugged/fzf/README.md	/^#### `--tmux` mode$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage""Display modes
`:FZF[!]`	plugged/fzf/README-VIM.md	/^`:FZF[!]`$/;"	s	chapter:FZF Vim integration
`MtaJumpToOtherTag`	plugged/MatchTagAlways/README.md	/^### `MtaJumpToOtherTag`$/;"	S	section:Always highlight enclosing tags""Comands
`fzf#run`	plugged/fzf/README-VIM.md	/^`fzf#run`$/;"	s	chapter:FZF Vim integration
`fzf#wrap`	plugged/fzf/README-VIM.md	/^`fzf#wrap`$/;"	s	chapter:FZF Vim integration
`mix format` Integration	plugged/splitjoin.vim/spec/support/vim-elixir/README.md	/^### `mix format` Integration$/;"	S	section:vim-elixir""Notes/Caveats
a	plugged/fzf/src/terminal.go	/^	a string$/;"	m	struct:fzf.action	typeref:typename:string
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^            a <- b$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        a <- 1:10$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        a <- 2:11$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        a <- b$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    a <- b$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^a <- b$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^a <- theta1$A %>%$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            a <- b$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        a <- 1:10$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        a <- 2:11$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        a <- b$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    a <- b$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^a <- b$/;"	g
a	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^a <- theta1$A %>%$/;"	g
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = "First Line\\nSecond Line"$/;"	v	class:TestWithNewline
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = "Vorne hallo Hinten"$/;"	v	class:TestCheapDelete
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = "Vorne hallo Hinten"$/;"	v	class:TestRealLife1
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = "hallo Blah mitte=sdfdsfsd\\nhallo kjsdhfjksdhfkjhsdfkh mittekjshdkfhkhsdfdsf"$/;"	v	class:TestCrash
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = "hallo End Beginning"$/;"	v	class:TestRealLife
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = "hi first line\\nsecond line first line\\nsecond line world"$/;"	v	class:MultiLine
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = "stdin.h"$/;"	v	class:MatchIsTooCheap
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a = "this is it this is it this is it"$/;"	v	class:TestUltiSnipsProblem
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = "", ""$/;"	v	class:TestEmptyString
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = "Hello", "Hello\\nWorld\\nWorld\\nWorld"$/;"	v	class:TestLotsaNewlines
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = "abc", "def"$/;"	v	class:TestNoSubstring
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = "abcdef", "abcdef"$/;"	v	class:TestAllMatch
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = "hasomelongertextbl", "hol"$/;"	v	class:TestCommonCharacters
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ["Hello  World"], ["Hello   World"]$/;"	v	class:TestGuessing_InsertOneChar
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ["Hello  World"], ["Hello   World"]$/;"	v	class:TestGuessing_InsertOneChar1
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ["Hello  World"], ["Hello World"]$/;"	v	class:TestGuessing_BackspaceOneChar
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ["Hello  World"], ["Hello World"]$/;"	v	class:TestGuessing_DeleteOneChar
a	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a: List[str] = []$/;"	v	class:TestGuessing_Noop0	typeref:typename:List[str]
a	plugged/vim-coiled-snake/tests/corner_cases/quoted_paren.py	/^a = """("""$/;"	v
a	plugged/vim-coiled-snake/tests/corner_cases/quoted_paren.py	/^a = "("$/;"	v
a	plugged/vim-coiled-snake/tests/corner_cases/quoted_paren.py	/^a = "\\"("$/;"	v
a	plugged/vim-coiled-snake/tests/corner_cases/quoted_paren.py	/^a = "\\\\\\"("$/;"	v
a	plugged/vim-coiled-snake/tests/corner_cases/quoted_paren.py	/^a = '''('''$/;"	v
a	plugged/vim-coiled-snake/tests/corner_cases/quoted_paren.py	/^a = '('$/;"	v
a	plugged/vim-coiled-snake/tests/corner_cases/quoted_paren.py	/^a = '\\'('$/;"	v
a	plugged/vim-coiled-snake/tests/corner_cases/quoted_paren.py	/^a = '\\\\\\'('$/;"	v
aS	plugged/ultisnips/ftplugin/snippets.vim	/^onoremap <silent><buffer> aS :<C-U>call <SID>UltiSnippetTextObj(0)<CR>$/;"	m
aS	plugged/ultisnips/ftplugin/snippets.vim	/^xnoremap <silent><buffer> aS :<C-U>call <SID>UltiSnippetTextObj(0)<CR>$/;"	m
abolish.vim	plugged/vim-abolish/README.markdown	/^# abolish.vim$/;"	c
aboveOrBelow	plugged/fzf/src/options.go	/^func (a previewOpts) aboveOrBelow() bool {$/;"	f	struct:fzf.previewOpts	typeref:typename:bool
abstract	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        abstract = True$/;"	v	class:NamedModel.Meta
actAbort	plugged/fzf/src/terminal.go	/^	actAbort$/;"	c	package:fzf
actAccept	plugged/fzf/src/terminal.go	/^	actAccept$/;"	c	package:fzf
actAcceptNonEmpty	plugged/fzf/src/terminal.go	/^	actAcceptNonEmpty$/;"	c	package:fzf
actAcceptOrPrintQuery	plugged/fzf/src/terminal.go	/^	actAcceptOrPrintQuery$/;"	c	package:fzf
actBackwardChar	plugged/fzf/src/terminal.go	/^	actBackwardChar$/;"	c	package:fzf
actBackwardDeleteChar	plugged/fzf/src/terminal.go	/^	actBackwardDeleteChar$/;"	c	package:fzf
actBackwardDeleteCharEof	plugged/fzf/src/terminal.go	/^	actBackwardDeleteCharEof$/;"	c	package:fzf
actBackwardKillWord	plugged/fzf/src/terminal.go	/^	actBackwardKillWord$/;"	c	package:fzf
actBackwardWord	plugged/fzf/src/terminal.go	/^	actBackwardWord$/;"	c	package:fzf
actBecome	plugged/fzf/src/terminal.go	/^	actBecome$/;"	c	package:fzf
actBeginningOfLine	plugged/fzf/src/terminal.go	/^	actBeginningOfLine$/;"	c	package:fzf
actCancel	plugged/fzf/src/terminal.go	/^	actCancel$/;"	c	package:fzf
actChangeBorderLabel	plugged/fzf/src/terminal.go	/^	actChangeBorderLabel$/;"	c	package:fzf
actChangeHeader	plugged/fzf/src/terminal.go	/^	actChangeHeader$/;"	c	package:fzf
actChangeMulti	plugged/fzf/src/terminal.go	/^	actChangeMulti$/;"	c	package:fzf
actChangePreview	plugged/fzf/src/terminal.go	/^	actChangePreview$/;"	c	package:fzf
actChangePreviewLabel	plugged/fzf/src/terminal.go	/^	actChangePreviewLabel$/;"	c	package:fzf
actChangePreviewWindow	plugged/fzf/src/terminal.go	/^	actChangePreviewWindow$/;"	c	package:fzf
actChangePrompt	plugged/fzf/src/terminal.go	/^	actChangePrompt$/;"	c	package:fzf
actChangeQuery	plugged/fzf/src/terminal.go	/^	actChangeQuery$/;"	c	package:fzf
actChar	plugged/fzf/src/terminal.go	/^	actChar$/;"	c	package:fzf
actClearQuery	plugged/fzf/src/terminal.go	/^	actClearQuery$/;"	c	package:fzf
actClearScreen	plugged/fzf/src/terminal.go	/^	actClearScreen$/;"	c	package:fzf
actClearSelection	plugged/fzf/src/terminal.go	/^	actClearSelection$/;"	c	package:fzf
actClick	plugged/fzf/src/terminal.go	/^	actClick$/;"	c	package:fzf
actClose	plugged/fzf/src/terminal.go	/^	actClose$/;"	c	package:fzf
actDeleteChar	plugged/fzf/src/terminal.go	/^	actDeleteChar$/;"	c	package:fzf
actDeleteCharEof	plugged/fzf/src/terminal.go	/^	actDeleteCharEof$/;"	c	package:fzf
actDeselect	plugged/fzf/src/terminal.go	/^	actDeselect$/;"	c	package:fzf
actDeselectAll	plugged/fzf/src/terminal.go	/^	actDeselectAll$/;"	c	package:fzf
actDisableSearch	plugged/fzf/src/terminal.go	/^	actDisableSearch$/;"	c	package:fzf
actDown	plugged/fzf/src/terminal.go	/^	actDown$/;"	c	package:fzf
actEnableSearch	plugged/fzf/src/terminal.go	/^	actEnableSearch$/;"	c	package:fzf
actEndOfLine	plugged/fzf/src/terminal.go	/^	actEndOfLine$/;"	c	package:fzf
actExecute	plugged/fzf/src/terminal.go	/^	actExecute$/;"	c	package:fzf
actExecuteMulti	plugged/fzf/src/terminal.go	/^	actExecuteMulti \/\/ Deprecated$/;"	c	package:fzf
actExecuteSilent	plugged/fzf/src/terminal.go	/^	actExecuteSilent$/;"	c	package:fzf
actFatal	plugged/fzf/src/terminal.go	/^	actFatal$/;"	c	package:fzf
actFirst	plugged/fzf/src/terminal.go	/^	actFirst$/;"	c	package:fzf
actForwardChar	plugged/fzf/src/terminal.go	/^	actForwardChar$/;"	c	package:fzf
actForwardWord	plugged/fzf/src/terminal.go	/^	actForwardWord$/;"	c	package:fzf
actHalfPageDown	plugged/fzf/src/terminal.go	/^	actHalfPageDown$/;"	c	package:fzf
actHalfPageUp	plugged/fzf/src/terminal.go	/^	actHalfPageUp$/;"	c	package:fzf
actHideHeader	plugged/fzf/src/terminal.go	/^	actHideHeader$/;"	c	package:fzf
actHidePreview	plugged/fzf/src/terminal.go	/^	actHidePreview$/;"	c	package:fzf
actIgnore	plugged/fzf/src/terminal.go	/^	actIgnore actionType = iota$/;"	c	package:fzf	typeref:type:actionType
actInvalid	plugged/fzf/src/terminal.go	/^	actInvalid$/;"	c	package:fzf
actJump	plugged/fzf/src/terminal.go	/^	actJump$/;"	c	package:fzf
actJumpAccept	plugged/fzf/src/terminal.go	/^	actJumpAccept \/\/ XXX Deprecated in favor of jump:accept binding$/;"	c	package:fzf
actKillLine	plugged/fzf/src/terminal.go	/^	actKillLine$/;"	c	package:fzf
actKillWord	plugged/fzf/src/terminal.go	/^	actKillWord$/;"	c	package:fzf
actLast	plugged/fzf/src/terminal.go	/^	actLast$/;"	c	package:fzf
actMouse	plugged/fzf/src/terminal.go	/^	actMouse$/;"	c	package:fzf
actNextHistory	plugged/fzf/src/terminal.go	/^	actNextHistory$/;"	c	package:fzf
actNextSelected	plugged/fzf/src/terminal.go	/^	actNextSelected$/;"	c	package:fzf
actOffsetDown	plugged/fzf/src/terminal.go	/^	actOffsetDown$/;"	c	package:fzf
actOffsetMiddle	plugged/fzf/src/terminal.go	/^	actOffsetMiddle$/;"	c	package:fzf
actOffsetUp	plugged/fzf/src/terminal.go	/^	actOffsetUp$/;"	c	package:fzf
actPageDown	plugged/fzf/src/terminal.go	/^	actPageDown$/;"	c	package:fzf
actPageUp	plugged/fzf/src/terminal.go	/^	actPageUp$/;"	c	package:fzf
actPosition	plugged/fzf/src/terminal.go	/^	actPosition$/;"	c	package:fzf
actPrevHistory	plugged/fzf/src/terminal.go	/^	actPrevHistory$/;"	c	package:fzf
actPrevSelected	plugged/fzf/src/terminal.go	/^	actPrevSelected$/;"	c	package:fzf
actPreview	plugged/fzf/src/terminal.go	/^	actPreview$/;"	c	package:fzf
actPreviewBottom	plugged/fzf/src/terminal.go	/^	actPreviewBottom$/;"	c	package:fzf
actPreviewDown	plugged/fzf/src/terminal.go	/^	actPreviewDown$/;"	c	package:fzf
actPreviewHalfPageDown	plugged/fzf/src/terminal.go	/^	actPreviewHalfPageDown$/;"	c	package:fzf
actPreviewHalfPageUp	plugged/fzf/src/terminal.go	/^	actPreviewHalfPageUp$/;"	c	package:fzf
actPreviewPageDown	plugged/fzf/src/terminal.go	/^	actPreviewPageDown$/;"	c	package:fzf
actPreviewPageUp	plugged/fzf/src/terminal.go	/^	actPreviewPageUp$/;"	c	package:fzf
actPreviewTop	plugged/fzf/src/terminal.go	/^	actPreviewTop$/;"	c	package:fzf
actPreviewUp	plugged/fzf/src/terminal.go	/^	actPreviewUp$/;"	c	package:fzf
actPrint	plugged/fzf/src/terminal.go	/^	actPrint$/;"	c	package:fzf
actPrintQuery	plugged/fzf/src/terminal.go	/^	actPrintQuery \/\/ XXX Deprecated (not very useful, just use --print-query)$/;"	c	package:fzf
actPut	plugged/fzf/src/terminal.go	/^	actPut$/;"	c	package:fzf
actRebind	plugged/fzf/src/terminal.go	/^	actRebind$/;"	c	package:fzf
actRefreshPreview	plugged/fzf/src/terminal.go	/^	actRefreshPreview$/;"	c	package:fzf
actReload	plugged/fzf/src/terminal.go	/^	actReload$/;"	c	package:fzf
actReloadSync	plugged/fzf/src/terminal.go	/^	actReloadSync$/;"	c	package:fzf
actReplaceQuery	plugged/fzf/src/terminal.go	/^	actReplaceQuery$/;"	c	package:fzf
actSelect	plugged/fzf/src/terminal.go	/^	actSelect$/;"	c	package:fzf
actSelectAll	plugged/fzf/src/terminal.go	/^	actSelectAll$/;"	c	package:fzf
actShowHeader	plugged/fzf/src/terminal.go	/^	actShowHeader$/;"	c	package:fzf
actShowPreview	plugged/fzf/src/terminal.go	/^	actShowPreview$/;"	c	package:fzf
actSigStop	plugged/fzf/src/terminal.go	/^	actSigStop$/;"	c	package:fzf
actStart	plugged/fzf/src/terminal.go	/^	actStart$/;"	c	package:fzf
actToggle	plugged/fzf/src/terminal.go	/^	actToggle$/;"	c	package:fzf
actToggleAll	plugged/fzf/src/terminal.go	/^	actToggleAll$/;"	c	package:fzf
actToggleDown	plugged/fzf/src/terminal.go	/^	actToggleDown$/;"	c	package:fzf
actToggleHeader	plugged/fzf/src/terminal.go	/^	actToggleHeader$/;"	c	package:fzf
actToggleIn	plugged/fzf/src/terminal.go	/^	actToggleIn$/;"	c	package:fzf
actToggleOut	plugged/fzf/src/terminal.go	/^	actToggleOut$/;"	c	package:fzf
actTogglePreview	plugged/fzf/src/terminal.go	/^	actTogglePreview$/;"	c	package:fzf
actTogglePreviewWrap	plugged/fzf/src/terminal.go	/^	actTogglePreviewWrap$/;"	c	package:fzf
actToggleSearch	plugged/fzf/src/terminal.go	/^	actToggleSearch$/;"	c	package:fzf
actToggleSort	plugged/fzf/src/terminal.go	/^	actToggleSort$/;"	c	package:fzf
actToggleTrack	plugged/fzf/src/terminal.go	/^	actToggleTrack$/;"	c	package:fzf
actToggleTrackCurrent	plugged/fzf/src/terminal.go	/^	actToggleTrackCurrent$/;"	c	package:fzf
actToggleUp	plugged/fzf/src/terminal.go	/^	actToggleUp$/;"	c	package:fzf
actToggleWrap	plugged/fzf/src/terminal.go	/^	actToggleWrap$/;"	c	package:fzf
actTrackCurrent	plugged/fzf/src/terminal.go	/^	actTrackCurrent$/;"	c	package:fzf
actTransform	plugged/fzf/src/terminal.go	/^	actTransform$/;"	c	package:fzf
actTransformBorderLabel	plugged/fzf/src/terminal.go	/^	actTransformBorderLabel$/;"	c	package:fzf
actTransformHeader	plugged/fzf/src/terminal.go	/^	actTransformHeader$/;"	c	package:fzf
actTransformPreviewLabel	plugged/fzf/src/terminal.go	/^	actTransformPreviewLabel$/;"	c	package:fzf
actTransformPrompt	plugged/fzf/src/terminal.go	/^	actTransformPrompt$/;"	c	package:fzf
actTransformQuery	plugged/fzf/src/terminal.go	/^	actTransformQuery$/;"	c	package:fzf
actUnbind	plugged/fzf/src/terminal.go	/^	actUnbind$/;"	c	package:fzf
actUnixLineDiscard	plugged/fzf/src/terminal.go	/^	actUnixLineDiscard$/;"	c	package:fzf
actUnixWordRubout	plugged/fzf/src/terminal.go	/^	actUnixWordRubout$/;"	c	package:fzf
actUntrackCurrent	plugged/fzf/src/terminal.go	/^	actUntrackCurrent$/;"	c	package:fzf
actUp	plugged/fzf/src/terminal.go	/^	actUp$/;"	c	package:fzf
actYank	plugged/fzf/src/terminal.go	/^	actYank$/;"	c	package:fzf
action	plugged/fzf/src/terminal.go	/^type action struct {$/;"	s	package:fzf
action	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    action = models.CharField(max_length=11, choices=ACTION_CHOICES)$/;"	v	class:FailureLine
actionChannel	plugged/fzf/src/server.go	/^	actionChannel chan []*action$/;"	m	struct:fzf.httpServer	typeref:typename:chan []*action
actionNameRegexp	plugged/fzf/src/options.go	/^	actionNameRegexp *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
actionType	plugged/fzf/src/terminal.go	/^type actionType int$/;"	t	package:fzf	typeref:typename:int
activePreviewOpts	plugged/fzf/src/terminal.go	/^	activePreviewOpts  *previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:*previewOpts
active_status	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    active_status = models.CharField(max_length=7, blank=True, default='active', db_index=True)$/;"	v	class:Repository
adapter_to_string	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp adapter_to_string(Ecto.Adapters.MySQL), do: "mysql"$/;"	f	module:LoadRepos	access:private
adapter_to_string	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp adapter_to_string(Ecto.Adapters.Postgres), do: "postgres"$/;"	f	module:LoadRepos	access:private
adapter_to_string	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp adapter_to_string(mod), do: raise("Unknown adapter #{inspect(mod)}")$/;"	f	module:LoadRepos	access:private
add_buffer_filetypes	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def add_buffer_filetypes(self, filetypes: str):$/;"	m	class:SnippetManager
add_snippet	plugged/ultisnips/pythonx/UltiSnips/snippet/source/added.py	/^    def add_snippet(self, ft, snippet):$/;"	m	class:AddedSnippetsSource
add_snippet	plugged/ultisnips/pythonx/UltiSnips/snippet/source/snippet_dictionary.py	/^    def add_snippet(self, snippet):$/;"	m	class:SnippetDictionary
add_snippet	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def add_snippet($/;"	m	class:SnippetManager
adjustMarginAndPadding	plugged/fzf/src/terminal.go	/^func (t *Terminal) adjustMarginAndPadding() (int, int, [4]int, [4]int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(int, int, [4]int, [4]int)
akey	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    akey = "'te{}stâ'".format('"')$/;"	v	class:VerifyVimDict2
akey	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    akey = '"te{}stâ"'.format("'")$/;"	v	class:VerifyVimDict3
algo	plugged/fzf/src/algo/algo.go	/^package algo$/;"	p
algo	plugged/fzf/src/algo/algo_test.go	/^package algo$/;"	p
algo	plugged/fzf/src/algo/normalize.go	/^package algo$/;"	p
all	plugged/fzf/Makefile	/^all: target\/$(BINARY)$/;"	t
allItems	plugged/fzf/src/terminal.go	/^	allItems   []*Item$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:[]*Item
allItems	plugged/fzf/src/terminal_test.go	/^	allItems []*Item$/;"	m	struct:fzf.give	typeref:typename:[]*Item
alloc16	plugged/fzf/src/algo/algo.go	/^func alloc16(offset int, slab *util.Slab, size int) (int, []int16) {$/;"	f	package:algo	typeref:typename:(int, []int16)
alloc32	plugged/fzf/src/algo/algo.go	/^func alloc32(offset int, slab *util.Slab, size int) (int, []int32) {$/;"	f	package:algo	typeref:typename:(int, []int32)
alphabetical	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/ecto_queries_spec.rb	/^  def alphabetical(query) do$/;"	f	method:smth.do_query
alternative	plugged/fzf/src/options.go	/^	alternative *previewOpts$/;"	m	struct:fzf.previewOpts	typeref:typename:*previewOpts
anonFuncb1d136150400	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^       function(i) {$/;"	f
anonFuncb1d136150700	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    ns <- tryCatch(asNamespace(pkg), hasNoNamespaceError = function(e) NULL)$/;"	f	function:"::"
anonFuncb1d136150c00	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^            function(current, new, i) {$/;"	f	function:data.frame
anonFuncb1d136150d00	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        else function(current, new, i) {$/;"	f	function:data.frame
anonFuncb1d136150e00	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    tryCatch(expr, error = function(e) {$/;"	f	function:try
anonFunce36e773c0400	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    function(i) {$/;"	f
anonFunce36e773c0700	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    ns <- tryCatch(asNamespace(pkg), hasNoNamespaceError = function(e) NULL)$/;"	f	function:"::"
anonFunce36e773c0c00	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            function(current, new, i) {$/;"	f	function:data.frame
anonFunce36e773c0d00	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        else function(current, new, i) {$/;"	f	function:data.frame
anonFunce36e773c0e00	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    tryCatch(expr, error = function(e) {$/;"	f	function:try
anonListb1d136150307	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    structure(list(name = name, exit = NULL, handler = handler,$/;"	L	function:makeRestart
anonListe36e773c0307	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    structure(list(name = name, exit = NULL, handler = handler,$/;"	L	function:makeRestart
anonVecb1d136150206	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    maes$tipom <- factor(maes$tipom, levels = c(1, 2), labels = c("Casada", "Solteira"))$/;"	c
anonVece36e773c0206	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    maes$tipom <- factor(maes$tipom, levels = c(1, 2), labels = c("Casada", "Solteira"))$/;"	c
ansi	plugged/fzf/src/terminal.go	/^	ansi               bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
ansiBenchmarkString	plugged/fzf/src/ansi_test.go	/^const ansiBenchmarkString = "\\x1b[38;5;81m\\x1b[01;31m\\x1b[Kkernel\/\\x1b[0m\\x1b[38:5:81mbpf\//;"	c	package:fzf
ansiLabelPrinter	plugged/fzf/src/terminal.go	/^func (t *Terminal) ansiLabelPrinter(str string, color *tui.ColorPair, fill bool) (labelPrinter, /;"	f	struct:fzf.Terminal	typeref:typename:(labelPrinter, int)
ansiOffset	plugged/fzf/src/ansi.go	/^type ansiOffset struct {$/;"	s	package:fzf
ansiRegexReference	plugged/fzf/src/ansi_test.go	/^var ansiRegexReference = regexp.MustCompile("(?:\\x1b[\\\\[()][0-9;:]*[a-zA-Z@]|\\x1b][0-9][;:][/;"	v	package:fzf
ansiState	plugged/fzf/src/ansi.go	/^type ansiState struct {$/;"	s	package:fzf
any_include?	plugged/fzf/test/test_go.rb	/^          def any_include?(val)$/;"	f	method:Tmux.until
apiKey	plugged/fzf/src/server.go	/^	apiKey        []byte$/;"	m	struct:fzf.httpServer	typeref:typename:[]byte
append	plugged/fzf/src/history.go	/^func (h *History) append(line string) error {$/;"	f	struct:fzf.History	typeref:typename:error
append	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def append(self, line, line_number=-1):$/;"	m	class:VimBufferProxy
append_line	plugged/fzf/install	/^append_line() {$/;"	f
architecture	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    architecture = models.CharField(max_length=25, blank=True, db_index=True)$/;"	v	class:BuildPlatform
architecture	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    architecture = models.CharField(max_length=25, blank=True, db_index=True)$/;"	v	class:MachinePlatform
areaColumns	plugged/fzf/src/terminal.go	/^	areaColumns        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
areaLines	plugged/fzf/src/terminal.go	/^	areaLines          int$/;"	m	struct:fzf.Terminal	typeref:typename:int
arglist	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        arglist <- formals(mm[i])$/;"	g
arglist	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        arglist <- formals(mm[i])$/;"	g
argnames	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^            argnames <- names(arglist)$/;"	g
argnames	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            argnames <- names(arglist)$/;"	g
args	plugged/fzf/src/util/util_unix.go	/^	args    []string$/;"	m	struct:util.Executor	typeref:typename:[]string
args	plugged/fzf/src/util/util_windows.go	/^	args      []string$/;"	m	struct:util.Executor	typeref:typename:[]string
args	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = ""$/;"	v	class:_AnonBase
args	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple $1 expand $1 $0"'$/;"	v	class:Anon_NoTrigger_Multi
args	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple $1 expand $1 $0", "abc"'$/;"	v	class:Anon_Trigger_Multi
args	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple expand"'$/;"	v	class:Anon_NoTrigger_AfterSpace
args	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple expand"'$/;"	v	class:Anon_NoTrigger_Simple
args	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple expand", ".*abc", "desc", "r"'$/;"	v	class:Anon_Trigger_Opts
args	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple expand", "abc"'$/;"	v	class:Anon_Trigger_Simple
args	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = '"simple expand", "abc"'$/;"	v	class:Anon_Trigger_Twice
args	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = r"':latex:\\`$1\\`$0'"$/;"	v	class:Anon_NoTrigger_BeginningOfLine
args	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    args = r"':latex:\\`$1\\`$0'"$/;"	v	class:Anon_NoTrigger_FirstCharOfLine
args	plugged/ultisnips/test/test_Autocommands.py	/^    args = ""$/;"	v	class:Autocommands
args	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    args = ""$/;"	v	class:_AddFuncBase
args	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    args = '".*test", "simple expand", "desc", "r", "all", 0'$/;"	v	class:AddFunc_Opt
args	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    args = '"test", "simple expand", "desc", "", "all", 0'$/;"	v	class:AddFunc_Simple
args	plugged/validator.vim/pythonx/lints/css.py	/^    args = '--format=compact'$/;"	v	class:Css
args	plugged/validator.vim/pythonx/lints/cython.py	/^    args = "--warning-extra"$/;"	v	class:Cython
args	plugged/validator.vim/pythonx/lints/go/gofmt.py	/^    args = "-l -e -d"$/;"	v	class:GoFmtLint
args	plugged/validator.vim/pythonx/lints/go/golangci.py	/^    args = '--out-format line-number'$/;"	v	class:Golangci
args	plugged/validator.vim/pythonx/lints/go/golint.py	/^    args = ''$/;"	v	class:GolintLint
args	plugged/validator.vim/pythonx/lints/go/gometalinter.py	/^    args = '--fast'$/;"	v	class:Gometalinter
args	plugged/validator.vim/pythonx/lints/javascript/eslint.py	/^    args = "-f compact --no-color"$/;"	v	class:EsLint
args	plugged/validator.vim/pythonx/lints/javascript/jscs.py	/^    args = "-r inline"$/;"	v	class:Jscs
args	plugged/validator.vim/pythonx/lints/javascript/jshint.py	/^    args = "--verbose"$/;"	v	class:Jshint
args	plugged/validator.vim/pythonx/lints/javascript/standard.py	/^    args = '--stdin'$/;"	v	class:Standard
args	plugged/validator.vim/pythonx/lints/json.py	/^    args = "-q -c"$/;"	v	class:Json
args	plugged/validator.vim/pythonx/lints/lua/luac.py	/^    args = '-p'$/;"	v	class:LuaCLint
args	plugged/validator.vim/pythonx/lints/lua/luacheck.py	/^    args = '--no-color'$/;"	v	class:LuacheckLint
args	plugged/validator.vim/pythonx/lints/perl/perl.py	/^    args = "-cw"$/;"	v	class:PerlLint
args	plugged/validator.vim/pythonx/lints/perl/perlcritic.py	/^    args = "--gentle --quiet --nocolor"$/;"	v	class:PerlCriticLint
args	plugged/validator.vim/pythonx/lints/php.py	/^    args = "-l"$/;"	v	class:Php
args	plugged/validator.vim/pythonx/lints/python/pyflakes.py	/^    args = "--filename=*"$/;"	v	class:PyFlakes
args	plugged/validator.vim/pythonx/lints/rst/rst2pseudoxml.py	/^    args = "--report=2"$/;"	v	class:RST2PseudoXMLLint
args	plugged/validator.vim/pythonx/lints/ruby/rubocop.py	/^    args = '-f s -c .rubocop.yml'$/;"	v	class:Rubocop
args	plugged/validator.vim/pythonx/lints/ruby/ruby.py	/^    args = "-c -w"$/;"	v	class:Ruby
args	plugged/validator.vim/pythonx/lints/rust.py	/^    args = 'check --color never'$/;"	v	class:Cargo
args	plugged/validator.vim/pythonx/lints/sh/sh.py	/^    args = "-n"$/;"	v	class:ShLint
args	plugged/validator.vim/pythonx/lints/sh/shellcheck.py	/^    args = "-x -f gcc"$/;"	v	class:ShellcheckLint
args	plugged/validator.vim/pythonx/lints/vim/vimlparser.py	/^    args = ''$/;"	v	class:VimLParserLint
args	plugged/validator.vim/pythonx/lints/vim/vint.py	/^    args = '-w --no-color'$/;"	v	class:VimVint
args	plugged/validator.vim/pythonx/lints/zsh/zsh.py	/^    args = "-n"$/;"	v	class:ZshLint
args	plugged/validator.vim/pythonx/validator/__init__.py	/^    args = ''$/;"	v	class:Validator
args	plugged/validator.vim/tests/test_validator.py	/^    args = "-a -b -c -d"$/;"	v	class:NoName
args=	plugged/fzf/bin/fzf-tmux	/^args=()$/;"	f
args=	plugged/fzf/shell/completion.bash	/^    args=()$/;"	f
args=	plugged/fzf/shell/completion.zsh	/^    args=()$/;"	f
args_file	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^    args_file = ['.clang_complete', '.clang']$/;"	v	class:Clang
args_file	plugged/validator.vim/pythonx/lints/cpp.py	/^    args_file = ".clang-tidy-config"$/;"	v	class:Cpp
args_option	plugged/validator.vim/pythonx/validator/__init__.py	/^    args_option = None$/;"	v	class:Validator
args_option	plugged/validator.vim/tests/test_validator.py	/^    args_option = binary_option = 'no_name'$/;"	v	class:NoName
argument lists	plugged/splitjoin.vim/spec/plugin/rust_spec.rb	/^  describe "argument lists" do$/;"	d
arr	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^              arr = mean(arr <- delay, na.rm = TRUE),$/;"	g
arr	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    select(arr <- delay, dep <- delay) %>%$/;"	g
arr	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^              arr = mean(arr <- delay, na.rm = TRUE),$/;"	g
arr	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    select(arr <- delay, dep <- delay) %>%$/;"	g
arrays	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "arrays" do$/;"	d
arrays	plugged/splitjoin.vim/spec/plugin/rust_spec.rb	/^  describe "arrays" do$/;"	d
arrays	plugged/splitjoin.vim/spec/plugin/yaml_spec.rb	/^  describe "arrays" do$/;"	d
as.array	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^as.array <- function(x, ...)$/;"	f
as.array	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^as.array <- function(x, ...)$/;"	f
as.function.default	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^as.function.default <- function (x, envir = parent.frame(), ...)$/;"	f
as.function.default	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^as.function.default <- function (x, envir = parent.frame(), ...)$/;"	f
asTcellColor	plugged/fzf/src/tui/tcell.go	/^func asTcellColor(color Color) tcell.Color {$/;"	f	package:tui	typeref:typename:tcell.Color
asciiCharClasses	plugged/fzf/src/algo/algo.go	/^	asciiCharClasses [unicode.MaxASCII + 1]charClass$/;"	v	package:algo	typeref:typename:[unicode.MaxASCII + 1]charClass
asciiFuzzyIndex	plugged/fzf/src/algo/algo.go	/^func asciiFuzzyIndex(input *util.Chars, pattern []rune, caseSensitive bool) (int, int) {$/;"	f	package:algo	typeref:typename:(int, int)
ask	plugged/fzf/install	/^ask() {$/;"	f
ask	plugged/fzf/uninstall	/^ask() {$/;"	f
ask_and_schedule	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        defp ask_and_schedule(producers, from) do$/;"	f	module:RateLimiter	access:private
assert	plugged/fzf/src/merger_test.go	/^func assert(t *testing.T, cond bool, msg ...string) {$/;"	f	package:fzf
assert	plugged/fzf/src/tui/tcell_test.go	/^func assert(t *testing.T, context string, got interface{}, want interface{}) bool {$/;"	f	package:tui	typeref:typename:bool
assertMatch	plugged/fzf/src/algo/algo_test.go	/^func assertMatch(t *testing.T, fun Algo, caseSensitive, forward bool, input, pattern string, sid/;"	f	package:algo
assertMatch2	plugged/fzf/src/algo/algo_test.go	/^func assertMatch2(t *testing.T, fun Algo, caseSensitive, normalize, forward bool, input, pattern/;"	f	package:algo
assert_block	plugged/fzf/test/test_go.rb	/^  def assert_block(expected, lines)$/;"	f	class:TestGoFZF
assert_equal	plugged/fzf/test/test_go.rb	/^  def assert_equal(expected, actual)$/;"	f	class:TestBase
assert_equal_org	plugged/fzf/test/test_go.rb	/^  alias assert_equal_org assert_equal$/;"	a	class:TestBase
assert_file_contents	plugged/splitjoin.vim/spec/support/vim.rb	/^    def assert_file_contents(string)$/;"	f	module:Support.Vim
assert_split_join	plugged/splitjoin.vim/spec/plugin/go_spec.rb	/^    def assert_split_join(initial, split_expected, join_expected)$/;"	f
ast_pat	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^ast_pat = re.compile($/;"	v
at	plugged/fzf/src/terminal.go	/^	at   time.Time$/;"	m	struct:fzf.selectedItem	typeref:typename:time.Time
atExitFuncs	plugged/fzf/src/util/atexit.go	/^var atExitFuncs []func()$/;"	v	package:util	typeref:typename:[]func()
atof	plugged/fzf/src/options.go	/^func atof(str string) (float64, error) {$/;"	f	package:fzf	typeref:typename:(float64, error)
atoi	plugged/fzf/src/options.go	/^func atoi(str string) (int, error) {$/;"	f	package:fzf	typeref:typename:(int, error)
atoi	plugged/fzf/src/tui/light.go	/^func atoi(s string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
attr	plugged/fzf/src/ansi.go	/^	attr tui.Attr$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Attr
attr	plugged/fzf/src/tui/tui.go	/^	attr Attr$/;"	m	struct:tui.ColorPair	typeref:typename:Attr
attr.all.equal	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^attr.all.equal <- function(target, current,$/;"	f
attr.all.equal	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^attr.all.equal <- function(target, current,$/;"	f
attrCodes	plugged/fzf/src/tui/light.go	/^func attrCodes(attr Attr) []string {$/;"	f	package:tui	typeref:typename:[]string
author	plugged/splitjoin.vim/spec/support/vim-elm-syntax/addon-info.json	/^  "author": "andys8 <andys8@users.noreply.github.com>",$/;"	s
author	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    author = models.CharField(max_length=150)$/;"	v	class:Commit
author	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    author = models.CharField(max_length=150)$/;"	v	class:Push
auto	plugged/fzf/src/options.go	/^	auto    bool$/;"	m	struct:fzf.heightSpec	typeref:typename:bool
auto_save	plugged/vim-auto-save/plugin/AutoSave.vim	/^augroup auto_save$/;"	a
autoclassify_status	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    autoclassify_status = models.IntegerField(choices=AUTOCLASSIFY_STATUSES, default=PENDING)$/;"	v	class:Job
avgNumLines	plugged/fzf/src/terminal.go	/^func (t *Terminal) avgNumLines() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
awkBlack	plugged/fzf/src/tokenizer.go	/^	awkBlack$/;"	c	package:fzf
awkNil	plugged/fzf/src/tokenizer.go	/^	awkNil = iota$/;"	c	package:fzf
awkTokenizer	plugged/fzf/src/tokenizer.go	/^func awkTokenizer(input string) ([]string, int) {$/;"	f	package:fzf	typeref:typename:([]string, int)
awkWhite	plugged/fzf/src/tokenizer.go	/^	awkWhite$/;"	c	package:fzf
b	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        b <- 2:10$/;"	g
b	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        b <- 2:10$/;"	g
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = "", ""$/;"	v	class:TestEmptyString
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = "Hello", "Hello\\nWorld\\nWorld\\nWorld"$/;"	v	class:TestLotsaNewlines
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = "abc", "def"$/;"	v	class:TestNoSubstring
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = "abcdef", "abcdef"$/;"	v	class:TestAllMatch
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = "hasomelongertextbl", "hol"$/;"	v	class:TestCommonCharacters
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ["Hello  World"], ["Hello   World"]$/;"	v	class:TestGuessing_InsertOneChar
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ["Hello  World"], ["Hello   World"]$/;"	v	class:TestGuessing_InsertOneChar1
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ["Hello  World"], ["Hello World"]$/;"	v	class:TestGuessing_BackspaceOneChar
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    a, b = ["Hello  World"], ["Hello World"]$/;"	v	class:TestGuessing_DeleteOneChar
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = "Vorne Hinten"$/;"	v	class:TestCheapDelete
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = "Vorne hallo  Hinten"$/;"	v	class:TestRealLife1
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = "hallo Blah mitte=sdfdsfsd\\nhallo b mittekjshdkfhkhsdfdsf"$/;"	v	class:TestCrash
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = "hallo End t"$/;"	v	class:TestRealLife
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = "hi first line\\nsecond line k world"$/;"	v	class:MultiLine
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = "n"$/;"	v	class:TestWithNewline
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = "s"$/;"	v	class:MatchIsTooCheap
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b = "this is it a this is it"$/;"	v	class:TestUltiSnipsProblem
b	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    b: List[str] = []$/;"	v	class:TestGuessing_Noop0	typeref:typename:List[str]
b:AutoPairs	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^    let b:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '`':'`'}$/;"	v
b:block_begin	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^let b:block_begin = '\\<\\(do$\\|fn\\>\\)'$/;"	v
b:block_end	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^let b:block_end = '\\<end\\>'$/;"	v
b:browsefilter	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/r.vim	/^  let b:browsefilter = "R Source Files (*.R)\\t*.R\\n" .$/;"	v
b:browsefilter	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rhelp.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rr/;"	v
b:browsefilter	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rmd.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rr/;"	v
b:browsefilter	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rnoweb.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rr/;"	v
b:browsefilter	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rrst.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rr/;"	v
b:coiled_snake_should_fold	plugged/vim-coiled-snake/ftplugin/python/coiledsnake.vim	/^let b:coiled_snake_should_fold = 1$/;"	v
b:coiled_snake_should_fold	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/ftplugin/python/coiledsnake.vim	/^let b:coiled_snake_should_fold = 1$/;"	v
b:coiled_snake_should_fold	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/ftplugin/python/coiledsnake.vim	/^let b:coiled_snake_should_fold = 1$/;"	v
b:coiled_snake_should_fold	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/ftplugin/python/coiledsnake.vim	/^let b:coiled_snake_should_fold = 1$/;"	v
b:current_syntax	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/r.vim	/^let b:current_syntax="r"$/;"	v
b:current_syntax	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rhelp.vim	/^let   b:current_syntax = "rhelp"$/;"	v
b:current_syntax	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^  let b:current_syntax = "rmd"$/;"	v
b:current_syntax	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^let b:current_syntax = "rmd"$/;"	v
b:current_syntax	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rnoweb.vim	/^let   b:current_syntax = "rnoweb"$/;"	v
b:current_syntax	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rrst.vim	/^let b:current_syntax = "rrst"$/;"	v
b:current_syntax	plugged/splitjoin.vim/spec/support/rust.vim/syntax/rust.vim	/^let b:current_syntax = "rust"$/;"	v
b:current_syntax	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^let b:current_syntax = 'eelixir'$/;"	v
b:current_syntax	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/elixir.vim	/^let b:current_syntax = "elixir"$/;"	v
b:current_syntax	plugged/splitjoin.vim/spec/support/vim-elm-syntax/syntax/elm.vim	/^let b:current_syntax = 'elm'$/;"	v
b:current_syntax	plugged/splitjoin.vim/spec/support/vim-javascript/syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	plugged/ultisnips/syntax/snippets.vim	/^let b:current_syntax = "snippets"$/;"	v
b:current_syntax	plugged/ultisnips/syntax/snippets_snipmate.vim	/^let b:current_syntax = "snippets"$/;"	v
b:current_syntax	plugged/vim-fugitive/syntax/fugitive.vim	/^let b:current_syntax = "fugitive"$/;"	v
b:current_syntax	plugged/vim-fugitive/syntax/fugitiveblame.vim	/^let b:current_syntax = "fugitiveblame"$/;"	v
b:current_syntax_embed	plugged/splitjoin.vim/spec/support/rust.vim/syntax/rust.vim	/^    let b:current_syntax_embed = 1$/;"	v
b:did_after_plugin_ultisnips_after	plugged/ultisnips/after/plugin/UltiSnips_after.vim	/^let b:did_after_plugin_ultisnips_after = 1$/;"	v
b:did_autoload_ultisnips	plugged/ultisnips/autoload/UltiSnips.vim	/^let b:did_autoload_ultisnips = 1$/;"	v
b:did_autoload_ultisnips_map_keys	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^let b:did_autoload_ultisnips_map_keys = 1$/;"	v
b:did_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/r.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rhelp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rmd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rnoweb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rrst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/ultisnips/ftplugin/snippets.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-fugitive/ftplugin/fugitiveblame.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rhelp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rmd.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rnoweb.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rrst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/splitjoin.vim/spec/support/rust.vim/indent/rust.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/splitjoin.vim/spec/support/vim-elixir/indent/eelixir.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/splitjoin.vim/spec/support/vim-elixir/indent/elixir.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/splitjoin.vim/spec/support/vim-elm-syntax/indent/elm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^let b:did_indent = 1$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^leex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.leex\\|\\.eeli/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'elixir'$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'javascript'$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'text'$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = 'yaml'$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = g:eelixir_default_subtype$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^eex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(&filetype,'^leex\\.\\zs\\w\\+')$/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^    let b:eelixir_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.eex\\|\\.leex\\|\\.eeli/;"	v
b:eelixir_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^  let b:eelixir_subtype = matchstr(s:lines,'eelixir_subtype=\\zs\\w\\+')$/;"	v
b:eelixir_subtype_indentexpr	plugged/splitjoin.vim/spec/support/vim-elixir/indent/eelixir.vim	/^let b:eelixir_subtype_indentexpr = &l:indentexpr$/;"	v
b:loaded_lastplace_plugin	plugged/vim-lastplace/plugin/vim-lastplace.vim	/^let b:loaded_lastplace_plugin = 1$/;"	v
b:match_ignorecase	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	plugged/ultisnips/ftplugin/snippets.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_skip	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^let b:match_skip = 's:comment\\|string\\|rustCharacter\\|rustArrow'$/;"	v
b:match_words	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^  let b:match_words = '\\:\\@<!\\<\\%(do\\|fn\\)\\:\\@!\\>' .$/;"	v
b:match_words	plugged/ultisnips/ftplugin/snippets.vim	/^  let b:match_words = s:set_match_words()$/;"	v
b:rust_last_args	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^    let b:rust_last_args = []$/;"	v
b:rust_last_rustc_args	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^    let b:rust_last_rustc_args = []$/;"	v
b:rust_original_delimitMate_excluded_regions	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^        let b:rust_original_delimitMate_excluded_regions = b:delimitMate_excluded_regions$/;"	v
b:rust_set_conceallevel	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^    let b:rust_set_conceallevel=1$/;"	v
b:rust_set_foldmethod	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^    let b:rust_set_foldmethod=1$/;"	v
b:rust_set_style	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^    let b:rust_set_style = 1$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/c/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/clojure/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/coffee/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/cs/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/css/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/cue/splitjoin.vim	/^      let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/elixir/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/elm/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/eruby/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/go/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/haml/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/handlebars/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/html/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/htmldjango/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/java/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/javascript/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/json/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/jsx/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/less/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/lua/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/perl/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/php/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/python/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/r/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/ruby/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/rust/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/scss/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/sh/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/snakemake/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/tex/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/tsx/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/vim/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/vue/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/xml/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/yaml/splitjoin.vim	/^  let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_join_callbacks	plugged/splitjoin.vim/ftplugin/zsh/splitjoin.vim	/^let b:splitjoin_join_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/c/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/clojure/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/coffee/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/cs/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/css/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/cue/splitjoin.vim	/^      let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/elixir/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/elm/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/eruby/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/go/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/haml/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/handlebars/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/html/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/htmldjango/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/java/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/javascript/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/json/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/jsx/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/less/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/lua/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/perl/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/php/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/python/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/r/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/ruby/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/rust/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/scss/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/sh/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/snakemake/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/tex/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/tsx/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/vim/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/vue/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/xml/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/yaml/splitjoin.vim	/^  let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_split_callbacks	plugged/splitjoin.vim/ftplugin/zsh/splitjoin.vim	/^let b:splitjoin_split_callbacks = [$/;"	v
b:splitjoin_trailing_comma	plugged/splitjoin.vim/ftplugin/json/splitjoin.vim	/^let b:splitjoin_trailing_comma = 0$/;"	v
b:surround_35	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_35 = "<%# \\r %>"$/;"	v
b:surround_45	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_45 = "<% \\r %>"$/;"	v
b:surround_5	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_5 = "<% \\r %>\\n<% end %>"$/;"	v
b:surround_61	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let b:surround_61 = "<%= \\r %>"$/;"	v
b:ultisnips_override_snipmate	plugged/ultisnips/syntax/snippets_snipmate.vim	/^let b:ultisnips_override_snipmate = 1$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/r.vim	/^let b:undo_ftplugin = "setl cms< com< fo< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rhelp.vim	/^let b:undo_ftplugin = "setl isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rmd.vim	/^  let b:undo_ftplugin .= " | setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rmd.vim	/^  let b:undo_ftplugin = "setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rnoweb.vim	/^  let b:undo_ftplugin .= " | setl isk< sua< com< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rnoweb.vim	/^  let b:undo_ftplugin = "setl isk< sua< com< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rrst.vim	/^  let b:undo_ftplugin .= " | setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rrst.vim	/^  let b:undo_ftplugin = "setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^let b:undo_ftplugin = "$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^let b:undo_ftplugin = "setl cms< " .$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/elixir.vim	/^let b:undo_ftplugin = 'setlocal sw< sts< et< isk< com< cms< path< inex< sua< def< fo<'.$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/vim-javascript/after/ftplugin/javascript.vim	/^  let b:undo_ftplugin .= ' | setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	plugged/splitjoin.vim/spec/support/vim-javascript/after/ftplugin/javascript.vim	/^  let b:undo_ftplugin = 'setlocal iskeyword< suffixesadd<'$/;"	v
b:undo_ftplugin	plugged/ultisnips/ftplugin/snippets.vim	/^let b:undo_ftplugin = "$/;"	v
b:undo_ftplugin	plugged/vim-coiled-snake/ftplugin/python/coiledsnake.vim	/^    let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	plugged/vim-coiled-snake/ftplugin/python/coiledsnake.vim	/^let b:undo_ftplugin = 'unlet b:coiled_snake_should_fold' . b:undo_ftplugin$/;"	v
b:undo_ftplugin	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/ftplugin/python/coiledsnake.vim	/^    let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/ftplugin/python/coiledsnake.vim	/^let b:undo_ftplugin = 'unlet b:coiled_snake_should_fold' . b:undo_ftplugin$/;"	v
b:undo_ftplugin	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/ftplugin/python/coiledsnake.vim	/^    let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/ftplugin/python/coiledsnake.vim	/^let b:undo_ftplugin = 'unlet b:coiled_snake_should_fold' . b:undo_ftplugin$/;"	v
b:undo_ftplugin	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/ftplugin/python/coiledsnake.vim	/^    let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/ftplugin/python/coiledsnake.vim	/^let b:undo_ftplugin = 'unlet b:coiled_snake_should_fold' . b:undo_ftplugin$/;"	v
b:undo_indent	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
bam	plugged/vim-coiled-snake/tests/issues/test_7.py	/^    def bam(self):$/;"	m	class:Foo
bar	plugged/fzf/src/terminal.go	/^	bar        []bool$/;"	m	struct:fzf.previewer	typeref:typename:[]bool
bar	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^          def bar do$/;"	f	method:bar
bar	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^          def bar do$/;"	f	method:bar.bar
bar	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^          def bar() do$/;"	f
bar	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^          def bar() do$/;"	f	method:bar
bar	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^          def bar(), do: :bar$/;"	f
bar	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^          def bar(foo) do$/;"	f	method:bar.bar
bar	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^          def bar(foo) do$/;"	f	method:bar.bar.bar
bar	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^          def bar(foo), do: :bar$/;"	f	method:bar.bar
bar	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^          def bar, do: :bar$/;"	f	method:bar
bar	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^bar = function() …$/;"	f
bar	plugged/vim-coiled-snake/tests/corner_cases/inline_list_addition.py	/^def bar():$/;"	f
bar	plugged/vim-coiled-snake/tests/corner_cases/line_continuation.py	/^bar = 3$/;"	v
bar	plugged/vim-coiled-snake/tests/corner_cases/paren_between_strs.py	/^def bar():$/;"	f
bar	plugged/vim-coiled-snake/tests/corner_cases/quoted_paren.py	/^def bar():$/;"	f
bar	plugged/vim-coiled-snake/tests/easy/class.py	/^    def bar():$/;"	m	class:Foo
bar	plugged/vim-coiled-snake/tests/easy/data_struct.py	/^bar = 1$/;"	v
bar	plugged/vim-coiled-snake/tests/issues/dummy_repo_16/test_16.py	/^def bar():$/;"	f
bar	plugged/vim-coiled-snake/tests/issues/test_7.py	/^    def bar(self):$/;"	m	class:Foo
bar	plugged/vim-coiled-snake/tests/issues/test_7.py	/^def bar():$/;"	f
bar	plugged/vim-coiled-snake/tests/test_blocks.py	/^    def bar():$/;"	m	class:Foo
bar	plugged/vim-coiled-snake/tests/test_blocks.py	/^def bar():$/;"	f
baseGenerics	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        baseGenerics <- c("Math", "Ops", "Summary", "Complex",$/;"	c	function:foo
baseGenerics	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        baseGenerics <- c("Math", "Ops", "Summary", "Complex",$/;"	c	function:foo
basename	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def basename(self):  # pylint:disable=no-self-use$/;"	m	class:SnippetUtil
bash	plugged/fzf/test/test_go.rb	/^    def bash$/;"	S	class:Shell
bashCompletion	plugged/fzf/main.go	/^var bashCompletion []byte$/;"	v	package:main	typeref:typename:[]byte
bashKeyBindings	plugged/fzf/main.go	/^var bashKeyBindings []byte$/;"	v	package:main	typeref:typename:[]byte
basicMatch	plugged/fzf/src/pattern.go	/^func (p *Pattern) basicMatch(item *Item, withPos bool, slab *util.Slab) (Offset, int, *[]int) {$/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
bax	plugged/vim-coiled-snake/tests/easy/docstring.py	/^def bax():$/;"	f
baz	plugged/vim-coiled-snake/tests/test_blocks.py	/^    def baz():$/;"	m	class:Foo
becomeSuffix	plugged/fzf/src/proxy.go	/^const becomeSuffix = ".become"$/;"	c	package:fzf
begin	plugged/fzf/src/tokenizer.go	/^	begin int$/;"	m	struct:fzf.Range	typeref:typename:int
bench	plugged/fzf/Makefile	/^bench:$/;"	t
best_classification	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    best_classification = models.ForeignKey("ClassifiedFailure",$/;"	v	class:FailureLine
best_classification	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    best_classification = models.ForeignKey(ClassifiedFailure,$/;"	v	class:TextLogErrorMetadata
best_is_verified	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    best_is_verified = models.BooleanField(default=False)$/;"	v	class:FailureLine
best_is_verified	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    best_is_verified = models.BooleanField(default=False)$/;"	v	class:TextLogErrorMetadata
bg	plugged/fzf/src/ansi.go	/^	bg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
bg	plugged/fzf/src/tui/light.go	/^	bg       Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
bg	plugged/fzf/src/tui/tui.go	/^	bg   Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
bin/fzf	plugged/fzf/Makefile	/^bin\/fzf: target\/$(BINARY) | bin$/;"	t
binary	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/numbers_spec.rb	/^  describe 'binary' do$/;"	d
binary	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/strings_spec.rb	/^  describe 'binary' do$/;"	d
binary	plugged/validator.vim/pythonx/validator/__init__.py	/^    def binary(self):$/;"	m	class:Validator
binary_option	plugged/validator.vim/pythonx/lints/cpp.py	/^    binary_option = "clang_tidy"$/;"	v	class:Cpp
binary_option	plugged/validator.vim/pythonx/validator/__init__.py	/^    binary_option = None$/;"	v	class:Validator
bindeval	plugged/completor.vim/pythonx/completor/_vim.py	/^    def bindeval(value):$/;"	f	function:_patch_nvim	file:
bindeval	plugged/completor.vim/tests/conftest.py	/^    def bindeval(self, category):$/;"	m	class:Vim
bindeval	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def bindeval(text):$/;"	f
blah	plugged/MatchTagAlways/test.html	/^    <div style=">" id="blah">$/;"	I
blah	plugged/MatchTagAlways/test.html	/^<div style="stuff" id="blah">$/;"	I
blockDuration	plugged/fzf/src/terminal.go	/^const blockDuration = 1 * time.Second$/;"	c	package:fzf
blocks	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "blocks" do$/;"	d
bm	plugged/splitjoin.vim/spec/support/vim-elixir/bin/test_indent	/^def bm$/;"	f
bonusAt	plugged/fzf/src/algo/algo.go	/^func bonusAt(input *util.Chars, idx int) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusBoundary	plugged/fzf/src/algo/algo.go	/^	bonusBoundary = scoreMatch \/ 2$/;"	c	package:algo
bonusBoundaryDelimiter	plugged/fzf/src/algo/algo.go	/^	bonusBoundaryDelimiter int16 = bonusBoundary + 1$/;"	v	package:algo	typeref:typename:int16
bonusBoundaryWhite	plugged/fzf/src/algo/algo.go	/^	bonusBoundaryWhite int16 = bonusBoundary + 2$/;"	v	package:algo	typeref:typename:int16
bonusCamel123	plugged/fzf/src/algo/algo.go	/^	bonusCamel123 = bonusBoundary + scoreGapExtension$/;"	c	package:algo
bonusConsecutive	plugged/fzf/src/algo/algo.go	/^	bonusConsecutive = -(scoreGapStart + scoreGapExtension)$/;"	c	package:algo
bonusFirstCharMultiplier	plugged/fzf/src/algo/algo.go	/^	bonusFirstCharMultiplier = 2$/;"	c	package:algo
bonusFor	plugged/fzf/src/algo/algo.go	/^func bonusFor(prevClass charClass, class charClass) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusMatrix	plugged/fzf/src/algo/algo.go	/^	bonusMatrix [charNumber + 1][charNumber + 1]int16$/;"	v	package:algo	typeref:typename:[charNumber + 1][charNumber + 1]int16
bonusNonWord	plugged/fzf/src/algo/algo.go	/^	bonusNonWord = scoreMatch \/ 2$/;"	c	package:algo
border	plugged/fzf/src/options.go	/^	border      tui.BorderShape$/;"	m	struct:fzf.previewOpts	typeref:typename:tui.BorderShape
border	plugged/fzf/src/terminal.go	/^	border             tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
border	plugged/fzf/src/tui/light.go	/^	border   BorderStyle$/;"	m	struct:tui.LightWindow	typeref:typename:BorderStyle
borderLabel	plugged/fzf/src/terminal.go	/^	borderLabel        labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
borderLabelLen	plugged/fzf/src/terminal.go	/^	borderLabelLen     int$/;"	m	struct:fzf.Terminal	typeref:typename:int
borderLabelOpts	plugged/fzf/src/terminal.go	/^	borderLabelOpts    labelOpts$/;"	m	struct:fzf.Terminal	typeref:typename:labelOpts
borderLines	plugged/fzf/src/terminal.go	/^func borderLines(shape tui.BorderShape) int {$/;"	f	package:fzf	typeref:typename:int
borderShape	plugged/fzf/src/terminal.go	/^	borderShape        tui.BorderShape$/;"	m	struct:fzf.Terminal	typeref:typename:tui.BorderShape
borderStyle	plugged/fzf/src/tui/tcell.go	/^	borderStyle BorderStyle$/;"	m	struct:tui.TcellWindow	typeref:typename:BorderStyle
borderWidth	plugged/fzf/src/terminal.go	/^	borderWidth        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
bottom	plugged/fzf/src/options.go	/^	bottom bool$/;"	m	struct:fzf.labelOpts	typeref:typename:bool
bottom	plugged/fzf/src/tui/tui.go	/^	bottom      rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
bottomLeft	plugged/fzf/src/tui/tui.go	/^	bottomLeft  rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
bottomRight	plugged/fzf/src/tui/tui.go	/^	bottomRight rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
bquote	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    function(expr, where=parent.frame())$/;"	f
bquote	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^bquote <- function(expr, where=parent.frame())$/;"	f
bquote	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    function(expr, where=parent.frame())$/;"	f
bquote	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^bquote <- function(expr, where=parent.frame())$/;"	f
branch	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    branch = models.CharField(max_length=50, null=True, db_index=True)$/;"	v	class:Repository
breakpoint	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^    def breakpoint(cls, host=None, port=None):$/;"	m	class:RemotePDB
buf	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^buf = VimBuffer()  # pylint:disable=invalid-name$/;"	v
buffer	plugged/fzf/src/tui/light.go	/^	buffer        []byte$/;"	m	struct:tui.LightRenderer	typeref:typename:[]byte
buffer	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def buffer(self):$/;"	m	class:SnippetUtil
buffer_maps	plugged/ultisnips/test/test_Selection.py	/^    buffer_maps = ("", "")$/;"	v	class:_SelectModeMappings
buffer_maps	plugged/ultisnips/test/test_Selection.py	/^    buffer_maps = ("H", "blah")$/;"	v	class:SelectModeMappings_BufferLocalMappings_ECR
bug	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def bug(self):$/;"	m	class:ClassifiedFailure
bug_id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    bug_id = models.PositiveIntegerField(db_index=True)$/;"	v	class:BugJobMap
bug_number	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    bug_number = models.PositiveIntegerField(blank=True, null=True, unique=True)$/;"	v	class:ClassifiedFailure
bug_suggestions	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def bug_suggestions(self):$/;"	m	class:TextLogError
build	plugged/fzf/Makefile	/^build:$/;"	t
buildCacheKey	plugged/fzf/src/pattern.go	/^func (p *Pattern) buildCacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
buildLists	plugged/fzf/src/merger_test.go	/^func buildLists(partiallySorted bool) ([][]Result, []Result) {$/;"	f	package:fzf	typeref:typename:([][]Result, []Result)
buildPattern	plugged/fzf/src/pattern_test.go	/^func buildPattern(fuzzy bool, fuzzyAlgo algo.Algo, extended bool, caseMode Case, normalize bool,/;"	f	package:fzf	typeref:typename:*Pattern
buildPlusList	plugged/fzf/src/terminal.go	/^func (t *Terminal) buildPlusList(template string, forcePlus bool) (bool, []*Item) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, []*Item)
buildResult	plugged/fzf/src/result.go	/^func buildResult(item *Item, offsets []Offset, score int) Result {$/;"	f	package:fzf	typeref:typename:Result
build_architecture	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    build_architecture = models.CharField(max_length=25, db_index=True)$/;"	v	class:ReferenceDataSignatures
build_command	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/pipeline_spec.rb	/^    def build_command(input, output) do$/;"	f	method:test.test.build_command.build_command.build_command
build_command	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/pipeline_spec.rb	/^  def build_command(input, output) do$/;"	f	method:test.test
build_command	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/pipeline_spec.rb	/^  def build_command(input, output) do$/;"	f	method:test.test.build_command
build_command	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/pipeline_spec.rb	/^  def build_command(input, output) do$/;"	f	method:test.test.build_command.build_command
build_os_name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    build_os_name = models.CharField(max_length=25, db_index=True)$/;"	v	class:ReferenceDataSignatures
build_platform	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    build_platform = models.CharField(max_length=100, db_index=True)$/;"	v	class:ReferenceDataSignatures
build_platform	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    build_platform = models.ForeignKey(BuildPlatform, on_delete=models.CASCADE)$/;"	v	class:RunnableJob
build_platform	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    build_platform = models.ForeignKey(BuildPlatform, on_delete=models.CASCADE, related_name='jo/;"	v	class:Job
build_system_type	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    build_system_type = models.CharField(max_length=25)$/;"	v	class:RunnableJob
build_system_type	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    build_system_type = models.CharField(max_length=25, blank=True, db_index=True)$/;"	v	class:ReferenceDataSignatures
bumpMajor	plugged/fzf/src/core.go	/^func (r *revision) bumpMajor() {$/;"	f	struct:fzf.revision
bumpMinor	plugged/fzf/src/core.go	/^func (r *revision) bumpMinor() {$/;"	f	struct:fzf.revision
by	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        by = really_long_by_statement]$/;"	g
by	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    by = really_long_by_statement]$/;"	g
by semicolon	plugged/splitjoin.vim/spec/plugin/sh_spec.rb	/^  describe "by semicolon" do$/;"	d
byBegin	plugged/fzf/src/options.go	/^	byBegin$/;"	c	package:fzf
byChunk	plugged/fzf/src/options.go	/^	byChunk$/;"	c	package:fzf
byEnd	plugged/fzf/src/options.go	/^	byEnd$/;"	c	package:fzf
byLength	plugged/fzf/src/options.go	/^	byLength$/;"	c	package:fzf
byScore	plugged/fzf/src/options.go	/^	byScore criterion = iota$/;"	c	package:fzf	typeref:type:criterion
byTimeOrder	plugged/fzf/src/terminal.go	/^type byTimeOrder []selectedItem$/;"	t	package:fzf	typeref:typename:[]selectedItem
by_bug	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def by_bug(self, bug_id):$/;"	m	class:FailuresQuerySet
byte2col	plugged/ultisnips/pythonx/UltiSnips/compatibility.py	/^def byte2col(line, nbyte):$/;"	f
byteString	plugged/fzf/src/functions.go	/^func byteString(data []byte) string {$/;"	f	package:fzf	typeref:typename:string
c	plugged/splitjoin.vim/spec/plugin/c_spec.rb	/^describe "c" do$/;"	d
c	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        c <- d$/;"	g
c	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        c <- d$/;"	g
c	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def c(self):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
c	plugged/vim-coiled-snake/tests/corner_cases/one_line_class.py	/^c = 1$/;"	v
c/c++	plugged/completor.vim/README.md	/^#### c\/c++$/;"	t	section:Completor""Completers
c/c++ practices (without using lsp)	plugged/completor.vim/README.md	/^#### c\/c++ practices (without using lsp)$/;"	t	section:Completor""Tips
cS	plugged/vim-surround/plugin/surround.vim	/^  nmap cS  <Plug>CSurround$/;"	m
cache	plugged/fzf/src/cache.go	/^	cache map[*Chunk]*queryCache$/;"	m	struct:fzf.ChunkCache	typeref:typename:map[*Chunk]*queryCache
cache	plugged/fzf/src/chunklist.go	/^	cache  *ChunkCache$/;"	m	struct:fzf.ChunkList	typeref:typename:*ChunkCache
cache	plugged/fzf/src/matcher.go	/^	cache          *ChunkCache$/;"	m	struct:fzf.Matcher	typeref:typename:*ChunkCache
cache	plugged/fzf/src/pattern.go	/^	cache         *ChunkCache$/;"	m	struct:fzf.Pattern	typeref:typename:*ChunkCache
cacheKey	plugged/fzf/src/pattern.go	/^	cacheKey      string$/;"	m	struct:fzf.Pattern	typeref:typename:string
cacheable	plugged/fzf/src/merger.go	/^func (mg *Merger) cacheable() bool {$/;"	f	struct:fzf.Merger	typeref:typename:bool
cacheable	plugged/fzf/src/pattern.go	/^	cacheable     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
cached_compile	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^def cached_compile(*args):$/;"	f
calculateScore	plugged/fzf/src/algo/algo.go	/^func calculateScore(caseSensitive bool, normalize bool, text *util.Chars, pattern []rune, sidx i/;"	f	package:algo	typeref:typename:(int, *[]int)
calculateSize	plugged/fzf/src/terminal.go	/^func calculateSize(base int, size sizeSpec, occupied int, minSize int, pad int) int {$/;"	f	package:fzf	typeref:typename:int
calculate_hash	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def calculate_hash(options):$/;"	m	class:OptionCollection
call	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^                 call <- conditionCall(e)$/;"	v	function:try.anonFuncb1d136150e00
call	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            call <- conditionCall(e)$/;"	v	function:try.anonFunce36e773c0e00
call	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/variable_spec.rb	/^      def call(:pop, _, [h|stack]) do$/;"	f
canPreview	plugged/fzf/src/terminal.go	/^func (t *Terminal) canPreview() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
can_expand	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def can_expand(self, autotrigger_only=False):$/;"	m	class:SnippetManager
can_jump	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def can_jump(self, direction):$/;"	m	class:SnippetManager
can_jump_backwards	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def can_jump_backwards(self):$/;"	m	class:SnippetManager
can_jump_forwards	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def can_jump_forwards(self):$/;"	m	class:SnippetManager
cancelPreview	plugged/fzf/src/terminal.go	/^func (t *Terminal) cancelPreview() {$/;"	f	struct:fzf.Terminal
capture	plugged/fzf/test/test_go.rb	/^  def capture$/;"	f	class:Tmux
cargo#Load	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#Load()$/;"	f
cargo#bench	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#bench(args)$/;"	f
cargo#build	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#build(args)$/;"	f
cargo#check	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#check(args)$/;"	f
cargo#clean	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#clean(args)$/;"	f
cargo#cmd	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#cmd(args) abort$/;"	f
cargo#doc	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#doc(args)$/;"	f
cargo#init	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#init(args)$/;"	f
cargo#install	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#install(args)$/;"	f
cargo#nearestCargo	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#nearestCargo(is_getcwd) abort$/;"	f
cargo#nearestRootCargo	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#nearestRootCargo(is_getcwd) abort$/;"	f
cargo#nearestWorkspaceCargo	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#nearestWorkspaceCargo(is_getcwd) abort$/;"	f
cargo#new	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#new(args)$/;"	f
cargo#publish	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#publish(args)$/;"	f
cargo#quickfix#CmdPost	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo/quickfix.vim	/^function! cargo#quickfix#CmdPost() abort$/;"	f
cargo#quickfix#CmdPre	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo/quickfix.vim	/^function! cargo#quickfix#CmdPre() abort$/;"	f
cargo#run	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#run(args)$/;"	f
cargo#runtarget	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#runtarget(args)$/;"	f
cargo#search	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#search(args)$/;"	f
cargo#test	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#test(args)$/;"	f
cargo#update	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! cargo#update(args)$/;"	f
caseInsensitive	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      caseInsensitive: true$/;"	p	class:complete.query
caseSensitive	plugged/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
caseSensitive	plugged/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.term	typeref:typename:bool
cases	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "cases" do$/;"	d
ch	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      end: {line: line, ch: col},$/;"	p	class:complete.query.end
changeHeader	plugged/fzf/src/terminal.go	/^func (t *Terminal) changeHeader(header string) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
change_request	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def change_request(self):$/;"	m	class:Lsp
changed	plugged/fzf/src/terminal.go	/^	changed bool$/;"	m	struct:fzf.searchRequest	typeref:typename:bool
channelTimeout	plugged/fzf/src/server.go	/^	channelTimeout   = 2 * time.Second$/;"	c	package:fzf
charClass	plugged/fzf/src/algo/algo.go	/^type charClass int$/;"	t	package:algo	typeref:typename:int
charClassOf	plugged/fzf/src/algo/algo.go	/^func charClassOf(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charClassOfNonAscii	plugged/fzf/src/algo/algo.go	/^func charClassOfNonAscii(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charDelimiter	plugged/fzf/src/algo/algo.go	/^	charDelimiter$/;"	c	package:algo
charLetter	plugged/fzf/src/algo/algo.go	/^	charLetter$/;"	c	package:algo
charLower	plugged/fzf/src/algo/algo.go	/^	charLower$/;"	c	package:algo
charNonWord	plugged/fzf/src/algo/algo.go	/^	charNonWord$/;"	c	package:algo
charNumber	plugged/fzf/src/algo/algo.go	/^	charNumber$/;"	c	package:algo
charUpper	plugged/fzf/src/algo/algo.go	/^	charUpper$/;"	c	package:algo
charWhite	plugged/fzf/src/algo/algo.go	/^	charWhite charClass = iota$/;"	c	package:algo	typeref:type:charClass
checkAscii	plugged/fzf/src/util/chars.go	/^func checkAscii(bytes []byte) (bool, int) {$/;"	f	package:util	typeref:typename:(bool, int)
check_binary	plugged/fzf/install	/^check_binary() {$/;"	f
check_binary	plugged/fzf/install.ps1	/^function check_binary () {$/;"	f
check_subseq	plugged/completor.vim/pythonx/completor/utils.py	/^def check_subseq(src, target):$/;"	f
checker	plugged/validator.vim/pythonx/lints/cpp.py	/^    checker = "clang-tidy"$/;"	v	class:Cpp
checker	plugged/validator.vim/pythonx/lints/css.py	/^    checker = 'csslint'$/;"	v	class:Css
checker	plugged/validator.vim/pythonx/lints/cython.py	/^    checker = "cython"$/;"	v	class:Cython
checker	plugged/validator.vim/pythonx/lints/go/gofmt.py	/^    checker = "gofmt"$/;"	v	class:GoFmtLint
checker	plugged/validator.vim/pythonx/lints/go/golangci.py	/^    checker = 'golangci-lint'$/;"	v	class:Golangci
checker	plugged/validator.vim/pythonx/lints/go/golint.py	/^    checker = 'golint'$/;"	v	class:GolintLint
checker	plugged/validator.vim/pythonx/lints/go/gometalinter.py	/^    checker = 'gometalinter'$/;"	v	class:Gometalinter
checker	plugged/validator.vim/pythonx/lints/javascript/eslint.py	/^    checker = "eslint"$/;"	v	class:EsLint
checker	plugged/validator.vim/pythonx/lints/javascript/jscs.py	/^    checker = "jscs"$/;"	v	class:Jscs
checker	plugged/validator.vim/pythonx/lints/javascript/jshint.py	/^    checker = "jshint"$/;"	v	class:Jshint
checker	plugged/validator.vim/pythonx/lints/javascript/standard.py	/^    checker = 'standard'$/;"	v	class:Standard
checker	plugged/validator.vim/pythonx/lints/json.py	/^    checker = "jsonlint"$/;"	v	class:Json
checker	plugged/validator.vim/pythonx/lints/lua/luac.py	/^    checker = 'luac'$/;"	v	class:LuaCLint
checker	plugged/validator.vim/pythonx/lints/lua/luacheck.py	/^    checker = 'luacheck'$/;"	v	class:LuacheckLint
checker	plugged/validator.vim/pythonx/lints/perl/perl.py	/^    checker = "perl"$/;"	v	class:PerlLint
checker	plugged/validator.vim/pythonx/lints/perl/perlcritic.py	/^    checker = "perlcritic"$/;"	v	class:PerlCriticLint
checker	plugged/validator.vim/pythonx/lints/php.py	/^    checker = "php"$/;"	v	class:Php
checker	plugged/validator.vim/pythonx/lints/python/pyflakes.py	/^    checker = "flake8"$/;"	v	class:PyFlakes
checker	plugged/validator.vim/pythonx/lints/rst/rst2pseudoxml.py	/^    checker = 'rst2pseudoxml' if platform.system() == 'Windows' else 'rst2pseudoxml.py'$/;"	v	class:RST2PseudoXMLLint
checker	plugged/validator.vim/pythonx/lints/ruby/rubocop.py	/^    checker = 'rubocop'$/;"	v	class:Rubocop
checker	plugged/validator.vim/pythonx/lints/ruby/ruby.py	/^    checker = "ruby"$/;"	v	class:Ruby
checker	plugged/validator.vim/pythonx/lints/rust.py	/^    checker = 'cargo'$/;"	v	class:Cargo
checker	plugged/validator.vim/pythonx/lints/sh/sh.py	/^    checker = "sh"$/;"	v	class:ShLint
checker	plugged/validator.vim/pythonx/lints/sh/shellcheck.py	/^    checker = "shellcheck"$/;"	v	class:ShellcheckLint
checker	plugged/validator.vim/pythonx/lints/thrift.py	/^    checker = 'thrift'$/;"	v	class:Thrift
checker	plugged/validator.vim/pythonx/lints/vim/vimlparser.py	/^    checker = 'vimlparser'$/;"	v	class:VimLParserLint
checker	plugged/validator.vim/pythonx/lints/vim/vint.py	/^    checker = 'vint'$/;"	v	class:VimVint
checker	plugged/validator.vim/pythonx/lints/zsh/zsh.py	/^    checker = "zsh"$/;"	v	class:ZshLint
checker	plugged/validator.vim/pythonx/validator/__init__.py	/^    checker = Unusable()$/;"	v	class:Validator
checker	plugged/validator.vim/tests/test_load.py	/^    checker = 'checker1'$/;"	v	class:Linter1
checker	plugged/validator.vim/tests/test_load.py	/^    checker = 'checker2'$/;"	v	class:Linter2
checker	plugged/validator.vim/tests/test_validator.py	/^    checker = "ls"$/;"	v	class:NoName
children	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def children(self):$/;"	m	class:EditableTextObject
chunkSize	plugged/fzf/src/constants.go	/^	chunkSize int = 100$/;"	c	package:fzf	typeref:typename:int
chunks	plugged/fzf/src/chunklist.go	/^	chunks []*Chunk$/;"	m	struct:fzf.ChunkList	typeref:typename:[]*Chunk
chunks	plugged/fzf/src/matcher.go	/^	chunks   []*Chunk$/;"	m	struct:fzf.MatchRequest	typeref:typename:[]*Chunk
chunks	plugged/fzf/src/merger.go	/^	chunks   *[]*Chunk$/;"	m	struct:fzf.Merger	typeref:typename:*[]*Chunk
classified_failure	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    classified_failure = models.ForeignKey(ClassifiedFailure,$/;"	v	class:TextLogErrorMatch
clean	plugged/fzf/Makefile	/^clean:$/;"	t
cleanExit	plugged/fzf/src/terminal.go	/^	cleanExit          bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
cleanse	plugged/fzf/src/tui/light.go	/^func cleanse(str string) string {$/;"	f	package:tui	typeref:typename:string
cleanup	plugged/fzf/bin/fzf-tmux	/^cleanup() {$/;"	f
clearCode	plugged/fzf/src/terminal.go	/^const clearCode string = "\\x1b[2J"$/;"	c	package:fzf	typeref:typename:string
clearOnExit	plugged/fzf/src/tui/light.go	/^	clearOnExit   bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
clear_snippets	plugged/ultisnips/pythonx/UltiSnips/snippet/source/snippet_dictionary.py	/^    def clear_snippets(self, priority, triggers):$/;"	m	class:SnippetDictionary
clear_temp	plugged/ultisnips/test/vim_interface.py	/^    def clear_temp(self):$/;"	m	class:TempFileManager
clickHeaderColumn	plugged/fzf/src/terminal.go	/^	clickHeaderColumn  int$/;"	m	struct:fzf.Terminal	typeref:typename:int
clickHeaderLine	plugged/fzf/src/terminal.go	/^	clickHeaderLine    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
clicks	plugged/fzf/src/tui/light.go	/^	clicks        [][2]int$/;"	m	struct:tui.LightRenderer	typeref:typename:[][2]int
clicks	plugged/fzf/src/tui/tui.go	/^	clicks       [][2]int$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:[][2]int
clojure	plugged/splitjoin.vim/spec/plugin/clojure_spec.rb	/^describe "clojure" do$/;"	d
clone_plugin	plugged/ultisnips/test_all.py	/^def clone_plugin(plugin):$/;"	f
closePlatform	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) closePlatform() {$/;"	f	unknown:tui.LightRenderer
closePlatform	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) closePlatform() {$/;"	f	unknown:tui.LightRenderer
closed	plugged/fzf/src/tui/light.go	/^	closed        *util.AtomicBool$/;"	m	struct:tui.LightRenderer	typeref:typename:*util.AtomicBool
closures	plugged/splitjoin.vim/spec/plugin/rust_spec.rb	/^  describe "closures" do$/;"	d
cmd	plugged/validator.vim/pythonx/lints/cpp.py	/^    def cmd(self, fname):$/;"	m	class:Cpp
cmd	plugged/validator.vim/pythonx/lints/go/golangci.py	/^    def cmd(self, fpath):$/;"	m	class:Golangci
cmd	plugged/validator.vim/pythonx/lints/go/gometalinter.py	/^    def cmd(self, fpath):$/;"	m	class:Gometalinter
cmd	plugged/validator.vim/pythonx/lints/javascript/eslint.py	/^    def cmd(self, fname):$/;"	m	class:EsLint
cmd	plugged/validator.vim/pythonx/lints/javascript/jshint.py	/^    def cmd(self, fname):$/;"	m	class:Jshint
cmd	plugged/validator.vim/pythonx/lints/rust.py	/^    def cmd(self, fname):$/;"	m	class:Cargo
cmd	plugged/validator.vim/pythonx/lints/thrift.py	/^    def cmd(self, fname):$/;"	m	class:Thrift
cmd	plugged/validator.vim/pythonx/validator/__init__.py	/^    def cmd(self, fname):$/;"	m	class:Validator
cmd_args	plugged/validator.vim/pythonx/validator/__init__.py	/^    def cmd_args(self):$/;"	m	class:Validator
cn	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    if(!is.null(cn <- colnames(x)))$/;"	v	function:foo
cn	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    if(!is.null(cn <- colnames(x)))$/;"	v	function:foo
coalesced_to_guid	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    coalesced_to_guid = models.CharField(max_length=50, null=True,$/;"	v	class:Job
code	plugged/fzf/src/terminal.go	/^	code int$/;"	m	struct:fzf.quitSignal	typeref:typename:int
code	plugged/vim-coiled-snake/tests/corner_cases/extra_indent.py	/^    code = 1$/;"	v
code	plugged/vim-coiled-snake/tests/speed/big_fold.py	/^    code = 1$/;"	v	class:Foo
code	plugged/vim-coiled-snake/tests/test_blocks.py	/^    code = 2$/;"	v	class:Foo
code	plugged/vim-coiled-snake/tests/test_blocks.py	/^code = 0$/;"	v
code	plugged/vim-coiled-snake/tests/test_blocks.py	/^code = 1$/;"	v
code	plugged/vim-coiled-snake/tests/test_everything.py	/^code = 0$/;"	v
code	plugged/vim-coiled-snake/tests/test_imports.py	/^code = 1$/;"	v
code	plugged/vim-coiled-snake/tests/test_nested.py	/^                code = 1$/;"	v	class:Bar.Bar.Bar.Bar
code	plugged/vim-coiled-snake/tests/test_nested.py	/^code = 1$/;"	v
code_action	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def code_action(self, action):$/;"	m	class:Lsp
code_change	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @callback code_change(old_vsn, state :: term, extra :: term) ::$/;"	c	module:RateLimiter
codebase	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    codebase = models.CharField(max_length=50, blank=True, db_index=True)$/;"	v	class:Repository
coffee	plugged/splitjoin.vim/spec/plugin/coffee_spec.rb	/^describe "coffee" do$/;"	d
coiledsnake#ClearFolds	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#ClearFolds() abort "{{{1$/;"	f
coiledsnake#ClearFolds	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#ClearFolds() abort "{{{1$/;"	f
coiledsnake#ClearFolds	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#ClearFolds() abort "{{{1$/;"	f
coiledsnake#ClearFolds	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#ClearFolds() abort "{{{1$/;"	f
coiledsnake#DebugBufferWidth	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugBufferWidth() abort "{{{1$/;"	f
coiledsnake#DebugBufferWidth	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugBufferWidth() abort "{{{1$/;"	f
coiledsnake#DebugBufferWidth	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugBufferWidth() abort "{{{1$/;"	f
coiledsnake#DebugBufferWidth	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugBufferWidth() abort "{{{1$/;"	f
coiledsnake#DebugFolds	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugFolds() abort "{{{1$/;"	f
coiledsnake#DebugFolds	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugFolds() abort "{{{1$/;"	f
coiledsnake#DebugFolds	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugFolds() abort "{{{1$/;"	f
coiledsnake#DebugFolds	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugFolds() abort "{{{1$/;"	f
coiledsnake#DebugLines	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugLines() abort "{{{1$/;"	f
coiledsnake#DebugLines	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugLines() abort "{{{1$/;"	f
coiledsnake#DebugLines	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugLines() abort "{{{1$/;"	f
coiledsnake#DebugLines	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugLines() abort "{{{1$/;"	f
coiledsnake#DebugMarks	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugMarks() abort "{{{1$/;"	f
coiledsnake#DebugMarks	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugMarks() abort "{{{1$/;"	f
coiledsnake#DebugMarks	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugMarks() abort "{{{1$/;"	f
coiledsnake#DebugMarks	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugMarks() abort "{{{1$/;"	f
coiledsnake#DebugText	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugText() abort "{{{1$/;"	f
coiledsnake#DebugText	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugText() abort "{{{1$/;"	f
coiledsnake#DebugText	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugText() abort "{{{1$/;"	f
coiledsnake#DebugText	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#DebugText() abort "{{{1$/;"	f
coiledsnake#EnableFoldExpr	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#EnableFoldExpr() abort "{{{1$/;"	f
coiledsnake#EnableFoldExpr	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#EnableFoldExpr() abort "{{{1$/;"	f
coiledsnake#EnableFoldExpr	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#EnableFoldExpr() abort "{{{1$/;"	f
coiledsnake#EnableFoldExpr	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#EnableFoldExpr() abort "{{{1$/;"	f
coiledsnake#EnableFoldText	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#EnableFoldText() abort "{{{1$/;"	f
coiledsnake#EnableFoldText	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#EnableFoldText() abort "{{{1$/;"	f
coiledsnake#EnableFoldText	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#EnableFoldText() abort "{{{1$/;"	f
coiledsnake#EnableFoldText	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#EnableFoldText() abort "{{{1$/;"	f
coiledsnake#FoldExpr	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#FoldExpr(lnum) abort "{{{1$/;"	f
coiledsnake#FoldExpr	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#FoldExpr(lnum) abort "{{{1$/;"	f
coiledsnake#FoldExpr	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#FoldExpr(lnum) abort "{{{1$/;"	f
coiledsnake#FoldExpr	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#FoldExpr(lnum) abort "{{{1$/;"	f
coiledsnake#FoldText	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#FoldText() abort "{{{1$/;"	f
coiledsnake#FoldText	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#FoldText() abort "{{{1$/;"	f
coiledsnake#FoldText	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#FoldText() abort "{{{1$/;"	f
coiledsnake#FoldText	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#FoldText() abort "{{{1$/;"	f
coiledsnake#FormatText	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#FormatText(foldstart, foldend) abort " {{{1$/;"	f
coiledsnake#FormatText	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#FormatText(foldstart, foldend) abort " {{{1$/;"	f
coiledsnake#FormatText	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#FormatText(foldstart, foldend) abort " {{{1$/;"	f
coiledsnake#FormatText	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#FormatText(foldstart, foldend) abort " {{{1$/;"	f
coiledsnake#LoadSettings	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#LoadSettings() abort "{{{1$/;"	f
coiledsnake#LoadSettings	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#LoadSettings() abort "{{{1$/;"	f
coiledsnake#LoadSettings	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#LoadSettings() abort "{{{1$/;"	f
coiledsnake#LoadSettings	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#LoadSettings() abort "{{{1$/;"	f
coiledsnake#RefreshFolds	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#RefreshFolds() abort "{{{1$/;"	f
coiledsnake#RefreshFolds	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#RefreshFolds() abort "{{{1$/;"	f
coiledsnake#RefreshFolds	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#RefreshFolds() abort "{{{1$/;"	f
coiledsnake#RefreshFolds	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#RefreshFolds() abort "{{{1$/;"	f
coiledsnake#ResetFoldExpr	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#ResetFoldExpr() abort "{{{1$/;"	f
coiledsnake#ResetFoldExpr	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#ResetFoldExpr() abort "{{{1$/;"	f
coiledsnake#ResetFoldExpr	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#ResetFoldExpr() abort "{{{1$/;"	f
coiledsnake#ResetFoldExpr	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#ResetFoldExpr() abort "{{{1$/;"	f
coiledsnake#ResetFoldText	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#ResetFoldText() abort "{{{1$/;"	f
coiledsnake#ResetFoldText	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#ResetFoldText() abort "{{{1$/;"	f
coiledsnake#ResetFoldText	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#ResetFoldText() abort "{{{1$/;"	f
coiledsnake#ResetFoldText	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! coiledsnake#ResetFoldText() abort "{{{1$/;"	f
col2byte	plugged/ultisnips/pythonx/UltiSnips/compatibility.py	/^def col2byte(line, col):$/;"	f
colBlack	plugged/fzf/src/tui/tui.go	/^	colBlack Color = iota$/;"	c	package:tui	typeref:type:Color
colBlue	plugged/fzf/src/tui/tui.go	/^	colBlue$/;"	c	package:tui
colCyan	plugged/fzf/src/tui/tui.go	/^	colCyan$/;"	c	package:tui
colDefault	plugged/fzf/src/tui/tui.go	/^	colDefault   Color = -1$/;"	c	package:tui	typeref:type:Color
colGreen	plugged/fzf/src/tui/tui.go	/^	colGreen$/;"	c	package:tui
colMagenta	plugged/fzf/src/tui/tui.go	/^	colMagenta$/;"	c	package:tui
colRed	plugged/fzf/src/tui/tui.go	/^	colRed$/;"	c	package:tui
colUndefined	plugged/fzf/src/tui/tui.go	/^	colUndefined Color = -2$/;"	c	package:tui	typeref:type:Color
colWhite	plugged/fzf/src/tui/tui.go	/^	colWhite$/;"	c	package:tui
colYellow	plugged/fzf/src/tui/tui.go	/^	colYellow$/;"	c	package:tui
color	plugged/fzf/src/ansi.go	/^	color  ansiState$/;"	m	struct:fzf.ansiOffset	typeref:typename:ansiState
color	plugged/fzf/src/result.go	/^	color  tui.ColorPair$/;"	m	struct:fzf.colorOffset	typeref:typename:tui.ColorPair
color	plugged/fzf/src/tui/tcell.go	/^	color       bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
colorCodes	plugged/fzf/src/tui/light.go	/^func colorCodes(fg Color, bg Color) []string {$/;"	f	package:tui	typeref:typename:[]string
colorOffset	plugged/fzf/src/result.go	/^type colorOffset struct {$/;"	s	package:fzf
colorOffsets	plugged/fzf/src/result.go	/^func (result *Result) colorOffsets(matchOffsets []Offset, theme *tui.ColorTheme, colBase tui.Col/;"	f	struct:fzf.Result	typeref:typename:[]colorOffset
colored	plugged/fzf/src/ansi.go	/^func (s *ansiState) colored() bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
colored	plugged/fzf/src/tui/light.go	/^	colored  bool$/;"	m	struct:tui.LightWindow	typeref:typename:bool
colors	plugged/fzf/src/item.go	/^	colors      *[]ansiOffset \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]ansiOffset
column	plugged/fzf/src/options.go	/^	column int$/;"	m	struct:fzf.labelOpts	typeref:typename:int
command	plugged/completor.vim/tests/conftest.py	/^    def command(self, cmd):$/;"	m	class:Vim
command	plugged/fzf/src/options.go	/^	command     string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
command	plugged/fzf/src/reader.go	/^	command  *string$/;"	m	struct:fzf.Reader	typeref:typename:*string
command	plugged/fzf/src/terminal.go	/^	command   string$/;"	m	struct:fzf.commandSpec	typeref:typename:string
command	plugged/fzf/src/terminal.go	/^	command *commandSpec$/;"	m	struct:fzf.searchRequest	typeref:typename:*commandSpec
command	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def command(cmd):$/;"	f
commandSpec	plugged/fzf/src/terminal.go	/^type commandSpec struct {$/;"	s	package:fzf
commentary.vim	plugged/vim-commentary/README.markdown	/^# commentary.vim$/;"	c
comments	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    comments = models.TextField()$/;"	v	class:Commit
comp	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^        var comp = {word: completion.name, menu: completion.type};$/;"	c	class:AnonymousFunctionfb12f65a0600
compareRanks	plugged/fzf/src/result_others.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
compareRanks	plugged/fzf/src/result_x86.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
compatible	plugged/fzf/src/core.go	/^func (r revision) compatible(other revision) bool {$/;"	f	struct:fzf.revision	typeref:typename:bool
complete	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^  function complete(filename, line, col, data) {$/;"	f
completions	plugged/completor.vim/pythonx/completers/common/__init__.py	/^    def completions(self, completer, base):$/;"	m	class:Common
completor	plugged/completor.vim/autoload/completor.vim	/^  augroup completor$/;"	a
completor	plugged/completor.vim/plugin/completor.vim	/^augroup completor$/;"	a
completor#action#_on_complete_done	plugged/completor.vim/autoload/completor/action.vim	/^function! completor#action#_on_complete_done()$/;"	f
completor#action#_on_insert_enter	plugged/completor.vim/autoload/completor/action.vim	/^function! completor#action#_on_insert_enter()$/;"	f
completor#action#_on_insert_leave	plugged/completor.vim/autoload/completor/action.vim	/^function! completor#action#_on_insert_leave()$/;"	f
completor#action#callback	plugged/completor.vim/autoload/completor/action.vim	/^function! completor#action#callback(msg)$/;"	f
completor#action#current_status	plugged/completor.vim/autoload/completor/action.vim	/^function! completor#action#current_status()$/;"	f
completor#action#do	plugged/completor.vim/autoload/completor/action.vim	/^function! completor#action#do(action, info, status, args)$/;"	f
completor#action#stream	plugged/completor.vim/autoload/completor/action.vim	/^function! completor#action#stream(name, msg)$/;"	f
completor#action#trigger	plugged/completor.vim/autoload/completor/action.vim	/^function! completor#action#trigger(items)$/;"	f
completor#compat#job_send	plugged/completor.vim/autoload/completor/compat.vim	/^  function! completor#compat#job_send(job, data)$/;"	f
completor#compat#job_start_oneshot	plugged/completor.vim/autoload/completor/compat.vim	/^  function! completor#compat#job_start_oneshot(cmd, options, ...)$/;"	f
completor#compat#job_start_oneshot	plugged/completor.vim/autoload/completor/compat.vim	/^  function! completor#compat#job_start_oneshot(cmd, options, use_stdin)$/;"	f
completor#compat#job_status	plugged/completor.vim/autoload/completor/compat.vim	/^  function! completor#compat#job_status(job)$/;"	f
completor#compat#job_stop	plugged/completor.vim/autoload/completor/compat.vim	/^  function! completor#compat#job_stop(name, ...)$/;"	f
completor#daemon#kill	plugged/completor.vim/autoload/completor/daemon.vim	/^function! completor#daemon#kill()$/;"	f
completor#daemon#process	plugged/completor.vim/autoload/completor/daemon.vim	/^function! completor#daemon#process(action, cmd, name, options, args)$/;"	f
completor#daemon#send	plugged/completor.vim/autoload/completor/daemon.vim	/^function! completor#daemon#send(req)$/;"	f
completor#disable_autocomplete	plugged/completor.vim/autoload/completor.vim	/^function! completor#disable_autocomplete()$/;"	f
completor#disable_text_change	plugged/completor.vim/autoload/completor.vim	/^func! completor#disable_text_change()$/;"	f
completor#do	plugged/completor.vim/autoload/completor.vim	/^function! completor#do(action, ...) range$/;"	f
completor#enable_autocomplete	plugged/completor.vim/autoload/completor.vim	/^function! completor#enable_autocomplete()$/;"	f
completor#enable_text_change	plugged/completor.vim/autoload/completor.vim	/^func! completor#enable_text_change()$/;"	f
completor#popup#disable_popup_hide	plugged/completor.vim/autoload/completor/popup.vim	/^func! completor#popup#disable_popup_hide()$/;"	f
completor#popup#enable_popup_hide	plugged/completor.vim/autoload/completor/popup.vim	/^func! completor#popup#enable_popup_hide()$/;"	f
completor#popup#hide	plugged/completor.vim/autoload/completor/popup.vim	/^func! completor#popup#hide()$/;"	f
completor#popup#init	plugged/completor.vim/autoload/completor/popup.vim	/^func! completor#popup#init()$/;"	f
completor#popup#markdown_preview	plugged/completor.vim/autoload/completor/popup.vim	/^func completor#popup#markdown_preview(content)$/;"	f
completor#popup#safe_hide	plugged/completor.vim/autoload/completor/popup.vim	/^func! completor#popup#safe_hide()$/;"	f
completor#popup#select	plugged/completor.vim/autoload/completor/popup.vim	/^func completor#popup#select(items)$/;"	f
completor#popup#show	plugged/completor.vim/autoload/completor/popup.vim	/^func! completor#popup#show(words)$/;"	f
completor#prompt#create	plugged/completor.vim/autoload/completor/prompt.vim	/^func completor#prompt#create(opt)$/;"	f
completor#prompt#rename	plugged/completor.vim/autoload/completor/prompt.vim	/^func completor#prompt#rename()$/;"	f
completor#support_popup	plugged/completor.vim/autoload/completor.vim	/^function! completor#support_popup()$/;"	f
completor#utils#add_offset	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#add_offset(items, offset)$/;"	f
completor#utils#gen_request	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#gen_request(action, args)$/;"	f
completor#utils#get_completer	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#get_completer(ft, inputted)$/;"	f
completor#utils#get_start_column	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#get_start_column()$/;"	f
completor#utils#in_comment_or_string	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#in_comment_or_string()$/;"	f
completor#utils#is_message_end	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#is_message_end(msg)$/;"	f
completor#utils#load	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#load(ft, action, inputted, meta)$/;"	f
completor#utils#on_data	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#on_data(action, msg)$/;"	f
completor#utils#on_exit	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#on_exit()$/;"	f
completor#utils#on_stream	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#on_stream(name, action, msg)$/;"	f
completor#utils#reset	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#reset()$/;"	f
completor#utils#setup_python	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#setup_python()$/;"	f
completor#utils#tempname	plugged/completor.vim/autoload/completor/utils.vim	/^function! completor#utils#tempname()$/;"	f
completor_event	plugged/completor.vim/plugin/completor.vim	/^  augroup completor_event$/;"	a
completor_popup	plugged/completor.vim/autoload/completor/popup.vim	/^  augroup completor_popup$/;"	a
compose_loc	plugged/validator.vim/pythonx/validator/__init__.py	/^    def compose_loc(self, enum, bufnr, buf_type, text, col=-1):$/;"	m	class:Validator
con	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^            con <- file(nsFile, encoding=enc)$/;"	v	function:something
con	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            con <- file(nsFile, encoding=enc)$/;"	v	function:something
cond	plugged/fzf/src/util/eventbox.go	/^	cond   *sync.Cond$/;"	m	struct:util.EventBox	typeref:typename:*sync.Cond
config	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def config do$/;"	f	method:example.project
config_logging	plugged/completor.vim/pythonx/completor/_log.py	/^def config_logging(f):$/;"	f
config_logging	plugged/validator.vim/pythonx/validator/utils.py	/^def config_logging():$/;"	f
config_to_url	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp config_to_url(_, %{url: url}), do: url$/;"	f	module:LoadRepos	access:private
config_to_url	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp config_to_url(repo, %{$/;"	f	module:LoadRepos	access:private
configs	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp configs do$/;"	f	module:LoadRepos	access:private
conserve	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def conserve(self):$/;"	m	class:VisualContentPreserver
conserve_placeholder	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def conserve_placeholder(self, placeholder):$/;"	m	class:VisualContentPreserver
consoleDevice	plugged/fzf/src/tui/light.go	/^const consoleDevice string = "\/dev\/tty"$/;"	c	package:tui	typeref:typename:string
consoleFlagsInput	plugged/fzf/src/tui/light_windows.go	/^	consoleFlagsInput  = uint32(windows.ENABLE_VIRTUAL_TERMINAL_INPUT | windows.ENABLE_PROCESSED_IN/;"	v	package:tui
consoleFlagsOutput	plugged/fzf/src/tui/light_windows.go	/^	consoleFlagsOutput = uint32(windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING | windows.ENABLE_PROCESS/;"	v	package:tui
constrain	plugged/fzf/src/terminal.go	/^func (t *Terminal) constrain() {$/;"	f	struct:fzf.Terminal
consts,static constants	plugged/splitjoin.vim/spec/support/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?(static|const)[ \\t]+([a-zA-Z0-9_]+)\/\\3\/c,consts,static c/;"	k	langdef:Rust
content_length	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^def content_length(header):$/;"	f
context	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def context(self):$/;"	m	class:SnippetDefinition
context	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def context(self):$/;"	m	class:SnippetUtil
conv	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^    def conv(obj):$/;"	f	function:escape	file:
convertBoolToInt32	plugged/fzf/src/util/atomicbool.go	/^func convertBoolToInt32(b bool) int32 {$/;"	f	package:util	typeref:typename:int32
convert_keys	plugged/ultisnips/test/vim_interface.py	/^    def convert_keys(self, keys):$/;"	m	class:VimInterfaceWindows
coordinatorDelayMax	plugged/fzf/src/constants.go	/^	coordinatorDelayMax  time.Duration = 100 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
coordinatorDelayStep	plugged/fzf/src/constants.go	/^	coordinatorDelayStep time.Duration = 10 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
copySlice	plugged/fzf/src/terminal.go	/^func copySlice(slice []rune) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
copy_to	plugged/completor.vim/pythonx/completor/__init__.py	/^    def copy_to(self, comp):$/;"	m	class:Completor
could_match	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def could_match(self, before):$/;"	m	class:SnippetDefinition
count	plugged/fzf/src/chunklist.go	/^	count int$/;"	m	struct:fzf.Chunk	typeref:typename:int
count	plugged/fzf/src/merger.go	/^	count    int$/;"	m	struct:fzf.Merger	typeref:typename:int
count	plugged/fzf/src/terminal.go	/^	count              int$/;"	m	struct:fzf.Terminal	typeref:typename:int
counts	plugged/fzf/test/test_go.rb	/^          def counts$/;"	f	method:Tmux.until
cprint2	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) cprint2(fg Color, bg Color, attr Attr, text string) {$/;"	f	struct:tui.LightWindow
cr	plugged/vim-abolish/plugin/abolish.vim	/^  nmap cr  <Plug>(abolish-coerce-word)$/;"	m
crash_signature	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    crash_signature = models.TextField(blank=True)$/;"	v	class:Bugscache
create	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def create(conn, %{$/;"	f	method:example.project.config.test.test.test.project.test
create_autoclassify_job_note	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def create_autoclassify_job_note(self, job, user=None):$/;"	m	class:JobNote
create_buffer	plugged/completor.vim/tests/conftest.py	/^def create_buffer():$/;"	f
create_directory	plugged/ultisnips/test/vim_interface.py	/^def create_directory(dirname):$/;"	f
create_file	plugged/fzf/install	/^create_file() {$/;"	f
create_match	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def create_match(self, matcher_name, classification):$/;"	m	class:TextLogError
create_user	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/with_spec.rb	/^  def create_user(params) do$/;"	f	method:resend_confirmation
created	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    created = models.DateTimeField(auto_now_add=True)$/;"	v	class:ClassifiedFailure
created	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    created = models.DateTimeField(auto_now_add=True)$/;"	v	class:FailureLine
created	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    created = models.DateTimeField(default=timezone.now)$/;"	v	class:BugJobMap
created	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    created = models.DateTimeField(default=timezone.now)$/;"	v	class:JobNote
criterion	plugged/fzf/src/options.go	/^type criterion int$/;"	t	package:fzf	typeref:typename:int
crlf	plugged/fzf/src/server.go	/^	crlf             = "\\r\\n"$/;"	c	package:fzf
cs	plugged/vim-surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
csi	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) csi(code string) string {$/;"	f	unknown:tui.LightRenderer	typeref:typename:string
csi	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) csi(code string) string {$/;"	f	struct:tui.LightWindow	typeref:typename:string
csiColor	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) csiColor(fg Color, bg Color, attr Attr) (bool, string) {$/;"	f	struct:tui.LightWindow	typeref:typename:(bool, string)
css	plugged/splitjoin.vim/spec/plugin/css_spec.rb	/^describe "css" do$/;"	d
css	vimrc	/^augroup css$/;"	a
current	plugged/fzf/src/history.go	/^func (h *History) current() string {$/;"	f	struct:fzf.History	typeref:typename:string
current	plugged/fzf/src/terminal.go	/^	current   bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
currentIndex	plugged/fzf/src/terminal.go	/^func (t *Terminal) currentIndex() int32 {$/;"	f	struct:fzf.Terminal	typeref:typename:int32
currentItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) currentItem() *Item {$/;"	f	struct:fzf.Terminal	typeref:typename:*Item
current_compiler	plugged/splitjoin.vim/spec/support/rust.vim/compiler/cargo.vim	/^let current_compiler = "cargo"$/;"	v
current_compiler	plugged/splitjoin.vim/spec/support/rust.vim/compiler/rustc.vim	/^let current_compiler = "rustc"$/;"	v
current_compiler	plugged/splitjoin.vim/spec/support/vim-elixir/compiler/credo.vim	/^let current_compiler = 'credo'$/;"	v
current_compiler	plugged/splitjoin.vim/spec/support/vim-elixir/compiler/exunit.vim	/^let current_compiler = "exunit"$/;"	v
current_compiler	plugged/splitjoin.vim/spec/support/vim-elixir/compiler/mix.vim	/^let current_compiler = 'mix'$/;"	v
current_compiler	plugged/splitjoin.vim/spec/support/vim-javascript/compiler/eslint.vim	/^let current_compiler = "eslint"$/;"	v
current_directory	plugged/completor.vim/pythonx/completor/__init__.py	/^    def current_directory(self):$/;"	m	class:Completor
current_text	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def current_text(self):$/;"	m	class:TextObject
cursor	plugged/completor.vim/pythonx/completor/__init__.py	/^    def cursor(self):$/;"	m	class:Completor
cursor	plugged/completor.vim/pythonx/completor/__init__.py	/^    def cursor(self, value):$/;"	m	class:Completor
cursor	plugged/fzf/src/history.go	/^	cursor   int$/;"	m	struct:fzf.History	typeref:typename:int
cursor	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^    def cursor(self):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
cursor	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^    def cursor(self, pos):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
cursor	vimrc	/^augroup cursor$/;"	a
cursor_line	plugged/completor.vim/pythonx/completor/__init__.py	/^    def cursor_line(self):$/;"	m	class:Completor
cursor_word	plugged/completor.vim/pythonx/completor/__init__.py	/^    def cursor_word(self):$/;"	m	class:Completor
cursors	plugged/fzf/src/merger.go	/^	cursors  []int$/;"	m	struct:fzf.Merger	typeref:typename:[]int
cwd	plugged/validator.vim/pythonx/lints/go/golangci.py	/^    def cwd(self):$/;"	m	class:Golangci
cwd	plugged/validator.vim/pythonx/lints/go/gometalinter.py	/^    def cwd(self):$/;"	m	class:Gometalinter
cwd	plugged/validator.vim/pythonx/lints/rust.py	/^    def cwd(self):$/;"	m	class:Cargo
cwd	plugged/validator.vim/pythonx/validator/__init__.py	/^    def cwd(self):$/;"	m	class:Validator
cx	plugged/fzf/src/terminal.go	/^	cx                 int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cy	plugged/fzf/src/terminal.go	/^	cy                 int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cy	plugged/fzf/src/terminal.go	/^	cy        int$/;"	m	struct:fzf.itemLine	typeref:typename:int
cycle	plugged/fzf/src/options.go	/^	cycle       bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
cycle	plugged/fzf/src/terminal.go	/^	cycle              bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
cycle_data	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def cycle_data(self, repository, cycle_interval, chunk_size, sleep_time):$/;"	m	class:JobManager
d	autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
d	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
d	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^      nnoremap <silent> <buffer> d :set opfunc=<sid>delete_op<cr>g@$/;"	m
d	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^      xnoremap <silent> <buffer> d :<c-u>call <sid>delete_op(visualmode(), 1)<cr>$/;"	m
daemon	plugged/completor.vim/pythonx/completers/javascript/__init__.py	/^    daemon = True$/;"	v	class:Tern
daemon	plugged/completor.vim/pythonx/completor/__init__.py	/^    daemon = False$/;"	v	class:Completor
daemon_send	plugged/completor.vim/pythonx/completor/__init__.py	/^    def daemon_send(data):$/;"	m	class:Completor
data	plugged/completor.vim/tests/test_go.py	/^    data = [$/;"	v	class:TestDoc
data.frame	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^data.frame <- function(..., row.names = NULL, check.rows = FALSE, check.names = TRUE,$/;"	f
data.frame	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^data.frame <- function(..., row.names = NULL, check.rows = FALSE, check.names = TRUE,$/;"	f
data.row.names	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        if(check.rows && is.null(row.names))$/;"	v	function:data.frame
data.row.names	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        if(check.rows && is.null(row.names))$/;"	v	function:data.frame
dataPath	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        dataPath <- file.path(which.lib.loc, package, "data")$/;"	v	function:foo
dataPath	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        dataPath <- file.path(which.lib.loc, package, "data")$/;"	v	function:foo
db#adapter#ecto#canonicalize	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/ecto.vim	/^function! db#adapter#ecto#canonicalize(url) abort$/;"	f
db#adapter#ecto#complete_opaque	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/ecto.vim	/^function! db#adapter#ecto#complete_opaque(url) abort$/;"	f
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = "bug_job_map"$/;"	v	class:BugJobMap.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = "job_detail"$/;"	v	class:JobDetail.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = "job_log"$/;"	v	class:JobLog.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = "job_note"$/;"	v	class:JobNote.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = "taskcluster_metadata"$/;"	v	class:TaskclusterMetadata.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = "text_log_error"$/;"	v	class:TextLogError.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = "text_log_error_metadata"$/;"	v	class:TextLogErrorMetadata.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = "text_log_step"$/;"	v	class:TextLogStep.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'bugscache'$/;"	v	class:Bugscache.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'build_platform'$/;"	v	class:BuildPlatform.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'classified_failure'$/;"	v	class:ClassifiedFailure.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'commit'$/;"	v	class:Commit.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'failure_classification'$/;"	v	class:FailureClassification.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'failure_line'$/;"	v	class:FailureLine.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'group'$/;"	v	class:Group.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'job'$/;"	v	class:Job.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'job_group'$/;"	v	class:JobGroup.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'job_type'$/;"	v	class:JobType.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'machine'$/;"	v	class:Machine.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'machine_platform'$/;"	v	class:MachinePlatform.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'matcher'$/;"	v	class:Matcher.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'option'$/;"	v	class:Option.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'option_collection'$/;"	v	class:OptionCollection.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'product'$/;"	v	class:Product.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'push'$/;"	v	class:Push.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'reference_data_signatures'$/;"	v	class:ReferenceDataSignatures.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'repository'$/;"	v	class:Repository.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'repository_group'$/;"	v	class:RepositoryGroup.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'runnable_job'$/;"	v	class:RunnableJob.Meta
db_table	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        db_table = 'text_log_error_match'$/;"	v	class:TextLogErrorMatch.Meta
dd	autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
dd	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
dd	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^      nmap     <silent> <buffer> dd d_$/;"	m
debug	plugged/ultisnips/pythonx/UltiSnips/debug.py	/^def debug(msg):$/;"	f
debugV2	plugged/fzf/src/algo/algo.go	/^func debugV2(T []rune, pattern []rune, F []int32, lastIdx int, H []int16, C []int16) {$/;"	f	package:algo
decimal	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/numbers_spec.rb	/^  describe 'decimal' do$/;"	d
deco	plugged/completor.vim/pythonx/completor/utils.py	/^    def deco(func):$/;"	f	function:ignore_exception	file:
decoratee	plugged/vim-coiled-snake/tests/test_everything.py	/^    def decoratee():$/;"	m	class:Class
def indentation	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/def_spec.rb	/^describe 'def indentation' do$/;"	d
default	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def default(self, obj):$/;"	m	class:VimEncoder
default	plugged/validator.vim/pythonx/lints/go/gofmt.py	/^    default = True$/;"	v	class:GoFmtLint
default	plugged/validator.vim/pythonx/lints/javascript/jshint.py	/^    default = True$/;"	v	class:Jshint
default	plugged/validator.vim/pythonx/lints/ruby/ruby.py	/^    default = True$/;"	v	class:Ruby
default	plugged/validator.vim/pythonx/validator/__init__.py	/^    default = False$/;"	v	class:Validator
default	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def default(self, repo, startday, endday):$/;"	m	class:FailuresQuerySet
defaultConfig	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^  var defaultConfig = {$/;"	c	class:genConfig
defaultEscDelay	plugged/fzf/src/tui/light.go	/^	defaultEscDelay = 100$/;"	c	package:tui
defaultHeight	plugged/fzf/src/tui/light.go	/^	defaultHeight = 24$/;"	c	package:tui
defaultHistoryMax	plugged/fzf/src/constants.go	/^	defaultHistoryMax int = 1000$/;"	c	package:fzf	typeref:typename:int
defaultInfoPrefix	plugged/fzf/src/options.go	/^const defaultInfoPrefix = " < "$/;"	c	package:fzf
defaultJumpLabels	plugged/fzf/src/constants.go	/^	defaultJumpLabels string = "asdfghjklqwertyuiopzxcvbnm1234567890ASDFGHJKLQWERTYUIOPZXCVBNM`~;:,/;"	c	package:fzf	typeref:typename:string
defaultKeymap	plugged/fzf/src/terminal.go	/^func defaultKeymap() map[tui.Event][]*action {$/;"	f	package:fzf	typeref:typename:map[tui.Event][]*action
defaultListenAddr	plugged/fzf/src/server.go	/^var defaultListenAddr = listenAddress{"localhost", 0}$/;"	v	package:fzf
defaultMargin	plugged/fzf/src/options.go	/^func defaultMargin() [4]sizeSpec {$/;"	f	package:fzf	typeref:typename:[4]sizeSpec
defaultOptions	plugged/fzf/src/options.go	/^func defaultOptions() *Options {$/;"	f	package:fzf	typeref:typename:*Options
defaultPreviewOpts	plugged/fzf/src/options.go	/^func defaultPreviewOpts(command string) previewOpts {$/;"	f	package:fzf	typeref:typename:previewOpts
defaultTheme	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer	typeref:typename:*ColorTheme
defaultTheme	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer	typeref:typename:*ColorTheme
defaultTheme	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:*ColorTheme
defaultTmuxOptions	plugged/fzf/src/options.go	/^func defaultTmuxOptions(index int) *tmuxOptions {$/;"	f	package:fzf	typeref:typename:*tmuxOptions
defaultWidth	plugged/fzf/src/tui/light.go	/^	defaultWidth  = 80$/;"	c	package:tui
deferActivation	plugged/fzf/src/terminal.go	/^func (t *Terminal) deferActivation() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
defguard syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/guard_spec.rb	/^describe 'defguard syntax' do$/;"	d
defstruct	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/struct_spec.rb	/^describe 'defstruct' do$/;"	d
delChar	plugged/fzf/src/terminal.go	/^func (t *Terminal) delChar() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
delete	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def delete(self, *args, **kwargs):$/;"	m	class:JobNote
delete_mark	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def delete_mark(name):$/;"	f
delimNil	plugged/fzf/src/reader.go	/^	delimNil bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
delimiter	plugged/fzf/src/pattern.go	/^	delimiter     Delimiter$/;"	m	struct:fzf.Pattern	typeref:typename:Delimiter
delimiter	plugged/fzf/src/terminal.go	/^	delimiter          Delimiter$/;"	m	struct:fzf.Terminal	typeref:typename:Delimiter
delimiter	plugged/fzf/src/terminal.go	/^	delimiter  Delimiter$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:Delimiter
delimiterChars	plugged/fzf/src/algo/algo.go	/^var delimiterChars = "\/,:;|"$/;"	v	package:algo
delimiterRegexp	plugged/fzf/src/options.go	/^func delimiterRegexp(str string) Delimiter {$/;"	f	package:fzf	typeref:typename:Delimiter
delta	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def delta(self, pos):$/;"	m	class:Position
dep	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^              dep = mean(dep <- delay, na.rm = TRUE)$/;"	g
dep	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    select(arr <- delay, dep <- delay) %>%$/;"	g
dep	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^              dep = mean(dep <- delay, na.rm = TRUE)$/;"	g
dep	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    select(arr <- delay, dep <- delay) %>%$/;"	g
dependencies	plugged/completor.vim/pythonx/completers/javascript/package.json	/^  "dependencies": {$/;"	o
dependencyBudget	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    dependencyBudget: tern.defaultOptions.dependencyBudget$/;"	p	class:genConfig.defaultConfig
dependsMethods	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    dependsMethods <- "methods" %in% names(pkgInfo$Depends)$/;"	g
dependsMethods	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    dependsMethods <- "methods" %in% names(pkgInfo$Depends)$/;"	g
description	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^                   description = description, test = test,$/;"	n	list:makeRestart.anonListb1d136150307
description	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            description = description, test = test,$/;"	n	list:makeRestart.anonListe36e773c0307
description	plugged/splitjoin.vim/spec/support/vim-elm-syntax/addon-info.json	/^  "description": "Elm syntax highlighting",$/;"	s
description	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def description(self):$/;"	m	class:SnippetDefinition
description	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    description = models.TextField(blank=True)$/;"	v	class:JobGroup
description	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    description = models.TextField(blank=True)$/;"	v	class:JobType
description	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    description = models.TextField(blank=True)$/;"	v	class:Repository
description	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    description = models.TextField(blank=True)$/;"	v	class:RepositoryGroup
deselectItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) deselectItem(item *Item) {$/;"	f	struct:fzf.Terminal
deselectItemChanged	plugged/fzf/src/terminal.go	/^func (t *Terminal) deselectItemChanged(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
detect_change	plugged/splitjoin.vim/spec/support/vim-elixir/bin/test_indent	/^def detect_change(f)$/;"	f
devPrefixes	plugged/fzf/src/tui/ttyname_unix.go	/^var devPrefixes = [...]string{"\/dev\/pts\/", "\/dev\/"}$/;"	v	package:tui
dictionary	plugged/completor.vim/README.md	/^#### dictionary$/;"	t	section:Completor""Completers
did_javascript_syn_inits	plugged/splitjoin.vim/spec/support/vim-javascript/extras/flow.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_javascript_syn_inits	plugged/splitjoin.vim/spec/support/vim-javascript/extras/jsdoc.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_javascript_syn_inits	plugged/splitjoin.vim/spec/support/vim-javascript/syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_plugin_ultisnips	plugged/ultisnips/plugin/UltiSnips.vim	/^let did_plugin_ultisnips=1$/;"	v
diff	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def diff(result, expected)$/;"	f	class:Differ
diff	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def self.diff(result, expected)$/;"	S	class:Differ
diff	plugged/ultisnips/pythonx/UltiSnips/diff.py	/^def diff(a, b, sline=0):$/;"	f
diff_in_buffer_length	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def diff_in_buffer_length(self):$/;"	m	class:VimState
dir	plugged/fzf/src/options.go	/^	dir    bool$/;"	m	struct:fzf.walkerOpts	typeref:typename:bool
directives	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        directives <- if (!is.na(enc) &&$/;"	v	function:something
directives	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        directives <- if (!is.na(enc) &&$/;"	v	function:something
dirname	plugged/completor.vim/pythonx/completers/javascript/__init__.py	/^dirname = os.path.dirname(__file__)$/;"	v
disableMouse	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) disableMouse() {$/;"	f	struct:tui.LightRenderer
disabled	plugged/completor.vim/pythonx/completor/__init__.py	/^    def disabled(self):$/;"	m	class:Completor
disabledState	plugged/fzf/src/terminal.go	/^	disabledState resumableState = iota$/;"	c	package:fzf	typeref:type:resumableState
dispatch_events	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        defp dispatch_events(queue, 0, events) do$/;"	f	module:QueueBroadcaster	access:private
dispatch_events	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        defp dispatch_events(queue, demand, events) do$/;"	f	module:QueueBroadcaster	access:private
displayWidth	plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidth(runes []rune) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
displayWidth	plugged/fzf/src/tui/light.go	/^	displayWidth int$/;"	m	struct:tui.wrappedLine	typeref:typename:int
displayWidthWithLimit	plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidthWithLimit(runes []rune, prefixWidth int, limit int) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
do	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^  def do$/;"	f
do-blocks	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^  describe "do-blocks" do$/;"	d
do_post_expand	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def do_post_expand(self, start, end, snippets_stack):$/;"	m	class:SnippetDefinition
do_post_jump	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def do_post_jump($/;"	m	class:SnippetDefinition
do_pre_expand	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def do_pre_expand(self, visual_content, snippets_stack):$/;"	m	class:SnippetDefinition
do_query	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/ecto_queries_spec.rb	/^    def do_query do$/;"	f
do_query	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/ecto_queries_spec.rb	/^  def do_query do$/;"	f	method:smth
do_stuff	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/pipeline_spec.rb	/^    def do_stuff do$/;"	f	method:test.test.build_command.build_command.hello
do_unmapping	plugged/ultisnips/test/test_Selection.py	/^    do_unmapping = False$/;"	v	class:SelectModeMappings_DisableRemoveBeforeSelecting_ECR
do_unmapping	plugged/ultisnips/test/test_Selection.py	/^    do_unmapping = True$/;"	v	class:_SelectModeMappings
doc	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    var doc = {query: query, files: [file]};$/;"	c	class:complete
doc_comment	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    plugins: {doc_comment: true},$/;"	p	class:genConfig.defaultConfig.plugins
docker	plugged/fzf/Makefile	/^docker:$/;"	t
docker-test	plugged/fzf/Makefile	/^docker-test:$/;"	t
docker_run	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^def docker_run(cmd, interactive=False, ok_fail=False):$/;"	f
docs	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      docs: true,$/;"	p	class:complete.query
doctest without newline after	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/doc_spec.rb	/^    describe 'doctest without newline after' do$/;"	d
documentation syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/doc_spec.rb	/^describe 'documentation syntax' do$/;"	d
double	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def double(x) do$/;"	f	method:example.project.config.test.test.test.project.test.create
double	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def double(x) do$/;"	f	method:example.project.config.test.test.test.project.test.create.double
double	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def double(x) do$/;"	f	method:example.project.config.test.test.test.project.test.create.double.double
doubleClickDuration	plugged/fzf/src/tui/tui.go	/^	doubleClickDuration = 500 * time.Millisecond$/;"	c	package:tui
download	plugged/fzf/install	/^download() {$/;"	f
download	plugged/fzf/install.ps1	/^function download {$/;"	f
drawBorder	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorder(onlyHorizontal bool) {$/;"	f	struct:tui.LightWindow
drawBorder	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) drawBorder(onlyHorizontal bool) {$/;"	f	struct:tui.TcellWindow
drawBorderAround	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderAround(onlyHorizontal bool) {$/;"	f	struct:tui.LightWindow
drawBorderHorizontal	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderHorizontal(top, bottom bool) {$/;"	f	struct:tui.LightWindow
drawBorderVertical	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderVertical(left, right bool) {$/;"	f	struct:tui.LightWindow
drop	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    if (ismat) for (i in seq_len(differences)) r <- r[i1, , drop = FALSE] -$/;"	v	function:foo
drop	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    if (ismat) for (i in seq_len(differences)) r <- r[i1, , drop = FALSE] -$/;"	v	function:foo
ds	plugged/vim-surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
dumpItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) dumpItem(i *Item) StatusItem {$/;"	f	struct:fzf.Terminal	typeref:typename:StatusItem
dumpStatus	plugged/fzf/src/terminal.go	/^func (t *Terminal) dumpStatus(params getParams) string {$/;"	f	struct:fzf.Terminal	typeref:typename:string
dupeTheme	plugged/fzf/src/options.go	/^func dupeTheme(theme *tui.ColorTheme) *tui.ColorTheme {$/;"	f	package:fzf	typeref:typename:*tui.ColorTheme
dvcs_type	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    dvcs_type = models.CharField(max_length=25, db_index=True)$/;"	v	class:Repository
eachLine	plugged/fzf/src/terminal.go	/^type eachLine struct {$/;"	s	package:fzf
echo	plugged/completor.vim/pythonx/completor/utils.py	/^def echo(message, severity='info'):$/;"	f
echo_to_hierarchy	plugged/ultisnips/pythonx/UltiSnips/debug.py	/^def echo_to_hierarchy(text_object):$/;"	f
ecmaScript	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    ecmaScript: true,$/;"	p	class:genConfig.defaultConfig
ecmaVersion	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    ecmaVersion: 6,$/;"	p	class:genConfig.defaultConfig
edit	plugged/completor.vim/pythonx/completers/lsp/edit.py	/^def edit(data, changes):$/;"	f
edit_file	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def edit_file(content)$/;"	f	class:Buffer
elastic_search_insert	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def elastic_search_insert(self):$/;"	m	class:FailureLine
elixir	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^describe "elixir" do$/;"	d
elixir#indent	plugged/splitjoin.vim/spec/support/vim-elixir/indent/elixir.vim	/^function! elixir#indent(lnum)$/;"	f
elixir#indent#handle_follow_prev_nb	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_follow_prev_nb(context)$/;"	f
elixir#indent#handle_following_trailing_binary_operator	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_following_trailing_binary_operator(context)$/;"	f
elixir#indent#handle_inside_block	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_block(context)$/;"	f
elixir#indent#handle_inside_generic_block	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_inside_generic_block(context)$/;"	f
elixir#indent#handle_starts_with_binary_operator	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_binary_operator(context)$/;"	f
elixir#indent#handle_starts_with_end	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_end(context)$/;"	f
elixir#indent#handle_starts_with_pipe	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_pipe(context)$/;"	f
elixir#indent#handle_starts_with_string_continuation	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_starts_with_string_continuation(context)$/;"	f
elixir#indent#handle_top_of_file	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#handle_top_of_file(context)$/;"	f
elixir#indent#indent	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#indent(lnum)$/;"	f
elixir#indent#searchpair_back_skip	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! elixir#indent#searchpair_back_skip()$/;"	f
elixir#util#get_filename	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/util.vim	/^function! elixir#util#get_filename(word) abort$/;"	f
ellipsis	plugged/fzf/src/terminal.go	/^	ellipsis           string$/;"	m	struct:fzf.Terminal	typeref:typename:string
elm	plugged/splitjoin.vim/spec/plugin/elm_spec.rb	/^describe 'elm' do$/;"	d
empty	plugged/fzf/src/terminal.go	/^	empty     bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
enableMouse	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) enableMouse() {$/;"	f	struct:tui.LightRenderer
enabled	plugged/validator.vim/pythonx/lints/python/pyflakes.py	/^    def enabled(self):$/;"	m	class:PyFlakes
enabled	plugged/validator.vim/pythonx/validator/__init__.py	/^    enabled = True$/;"	v	class:Validator
enabledState	plugged/fzf/src/terminal.go	/^	enabledState$/;"	c	package:fzf
encodePlaceholder	plugged/fzf/src/terminal_test.go	/^func (flags placeholderFlags) encodePlaceholder() string {$/;"	f	unknown:fzf.placeholderFlags	typeref:typename:string
end	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      end: {line: line, ch: col},$/;"	c	class:complete.query
end	plugged/fzf/src/tokenizer.go	/^	end   int$/;"	m	struct:fzf.Range	typeref:typename:int
end	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def end(self):$/;"	m	class:TextObject
end_column	plugged/completor.vim/pythonx/completor/__init__.py	/^    def end_column(self):$/;"	m	class:Completor
end_time	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    end_time = models.DateTimeField()$/;"	v	class:Job
endop	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    endop <- "END"$/;"	g
endop	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    endop <- "END"$/;"	g
ensure	plugged/ultisnips/pythonx/UltiSnips/snippet/source/base.py	/^    def ensure(self, filetypes):$/;"	m	class:SnippetSource
ensure	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/base.py	/^    def ensure(self, filetypes):$/;"	m	class:SnippetFileSource
enum,enumeration names	plugged/splitjoin.vim/spec/support/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?enum[ \\t]+([a-zA-Z0-9_]+)\/\\2\/g,enum,enumeration names\/$/;"	k	langdef:Rust
env	plugged/fzf/src/terminal.go	/^	env          []string$/;"	m	struct:fzf.previewRequest	typeref:typename:[]string
env	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        env <- attachNamespace(ns, pos = pos,$/;"	v	function:foo
env	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        env <- attachNamespace(ns, pos = pos,$/;"	v	function:foo
environ	plugged/fzf/src/terminal.go	/^	environ []string$/;"	m	struct:fzf.searchRequest	typeref:typename:[]string
environ	plugged/fzf/src/terminal.go	/^func (t *Terminal) environ() []string {$/;"	f	struct:fzf.Terminal	typeref:typename:[]string
equals	plugged/fzf/src/ansi.go	/^func (s *ansiState) equals(t *ansiState) bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
err	plugged/fzf/src/terminal.go	/^	err  error$/;"	m	struct:fzf.eachLine	typeref:typename:error
err	plugged/fzf/src/terminal.go	/^	err  error$/;"	m	struct:fzf.quitSignal	typeref:typename:error
err	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^err <- (a - A.real) %>%$/;"	g
err	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^err <- (a - A.real) %>%$/;"	g
error	plugged/completor.vim/tests/conftest.py	/^    error = VimError$/;"	v	class:Vim
error	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def error(self):$/;"	m	class:FailureLine
errors	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^errors <- c(errors, err)$/;"	c
errors	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^errors <- c(errors, err)$/;"	c
eruby	plugged/splitjoin.vim/spec/plugin/eruby_spec.rb	/^describe "eruby" do$/;"	d
escDelay	plugged/fzf/src/tui/light.go	/^	escDelay      int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
escPollInterval	plugged/fzf/src/tui/light.go	/^	escPollInterval = 5$/;"	c	package:tui
escSequence	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) escSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
escape	plugged/ultisnips/pythonx/UltiSnips/text.py	/^def escape(text, chars):$/;"	f
escape	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def escape(inp):$/;"	f
escapeArg	plugged/fzf/src/util/util_windows.go	/^func escapeArg(s string) string {$/;"	f	package:util	typeref:typename:string
escapeRegex	plugged/fzf/src/util/util_windows.go	/^var escapeRegex = regexp.MustCompile(`[&|<>()^%!"]`)$/;"	v	package:util
escapeSingleQuote	plugged/fzf/src/proxy.go	/^func escapeSingleQuote(str string) string {$/;"	f	package:fzf	typeref:typename:string
escape_types	plugged/completor.vim/pythonx/completers/lsp/action.py	/^escape_types = ['go', 'json']$/;"	v
escapedColon	plugged/fzf/src/options.go	/^	escapedColon = 0$/;"	c	package:fzf
escapedComma	plugged/fzf/src/options.go	/^	escapedComma = 1$/;"	c	package:fzf
escapedPlus	plugged/fzf/src/options.go	/^	escapedPlus  = 2$/;"	c	package:fzf
escaper	plugged/fzf/src/util/util_unix.go	/^	escaper *strings.Replacer$/;"	m	struct:util.Executor	typeref:typename:*strings.Replacer
escapes	plugged/completor.vim/pythonx/completers/lsp/action.py	/^escapes = re.compile(r'''\\\\([\\\\\\x60*{}[\\]()#+\\-.!_>~|"$%&'\\\/:;<=?@^])''',$/;"	v
eval	plugged/completor.vim/tests/conftest.py	/^    def eval(self, expr):$/;"	m	class:Vim
eval	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def eval(text):$/;"	f
eval_map	plugged/validator.vim/tests/conftest.py	/^eval_map = {$/;"	v
evaluateHeight	plugged/fzf/src/terminal.go	/^func evaluateHeight(opts *Options, termHeight int) int {$/;"	f	package:fzf	typeref:typename:int
evaluateScrollOffset	plugged/fzf/src/terminal.go	/^func (t *Terminal) evaluateScrollOffset() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
event	plugged/fzf/src/reader.go	/^	event    int32$/;"	m	struct:fzf.Reader	typeref:typename:int32
eventBox	plugged/fzf/src/matcher.go	/^	eventBox       *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
eventBox	plugged/fzf/src/reader.go	/^	eventBox *util.EventBox$/;"	m	struct:fzf.Reader	typeref:typename:*util.EventBox
eventBox	plugged/fzf/src/terminal.go	/^	eventBox           *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
eventChan	plugged/fzf/src/terminal.go	/^	eventChan          chan tui.Event$/;"	m	struct:fzf.Terminal	typeref:typename:chan tui.Event
events	plugged/fzf/src/util/eventbox.go	/^	events Events$/;"	m	struct:util.EventBox	typeref:typename:Events
everforest#ftplugin_detect	plugged/everforest/autoload/everforest.vim	/^function! everforest#ftplugin_detect(path) "{{{$/;"	f
everforest#get_configuration	plugged/everforest/autoload/everforest.vim	/^function! everforest#get_configuration() "{{{$/;"	f
everforest#get_palette	plugged/everforest/autoload/everforest.vim	/^function! everforest#get_palette(background, colors_override) "{{{$/;"	f
everforest#highlight	plugged/everforest/autoload/everforest.vim	/^function! everforest#highlight(group, fg, bg, ...) "{{{$/;"	f
everforest#syn_clean	plugged/everforest/autoload/everforest.vim	/^function! everforest#syn_clean(path, msg) "{{{$/;"	f
everforest#syn_exists	plugged/everforest/autoload/everforest.vim	/^function! everforest#syn_exists(path) "{{{$/;"	f
everforest#syn_gen	plugged/everforest/autoload/everforest.vim	/^function! everforest#syn_gen(path, last_modified, msg) "{{{$/;"	f
everforest#syn_newest	plugged/everforest/autoload/everforest.vim	/^function! everforest#syn_newest(path, last_modified) "{{{$/;"	f
everforest#syn_rootpath	plugged/everforest/autoload/everforest.vim	/^function! everforest#syn_rootpath(path) "{{{$/;"	f
everforest#syn_write	plugged/everforest/autoload/everforest.vim	/^function! everforest#syn_write(rootpath, syn, content) "{{{$/;"	f
exact	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        nm <- attributes(envir)[["names", exact = TRUE]]$/;"	v	function:topenv
exact	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        nm <- attributes(envir)[["names", exact = TRUE]]$/;"	v	function:topenv
example	plugged/splitjoin.vim/spec/plugin/python_spec.rb	/^      def example():$/;"	f	method:example.example
example	plugged/splitjoin.vim/spec/plugin/python_spec.rb	/^      def example():$/;"	f	method:example.example.example
example	plugged/splitjoin.vim/spec/plugin/python_spec.rb	/^      def example():$/;"	f	method:example.example.example.example
example	plugged/splitjoin.vim/spec/plugin/python_spec.rb	/^      def example(self):$/;"	f
example	plugged/splitjoin.vim/spec/plugin/python_spec.rb	/^      def example(self):$/;"	f	method:example
example	plugged/splitjoin.vim/spec/plugin/python_spec.rb	/^      def example(self):$/;"	f	method:example.example
example	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def example do$/;"	f
exe_exist	plugged/validator.vim/pythonx/validator/utils.py	/^def exe_exist(program):$/;"	f
exec	plugged/fzf/src/reader.go	/^	exec     *exec.Cmd$/;"	m	struct:fzf.Reader	typeref:typename:*exec.Cmd
exec	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/if_spec.rb	/^  def exec(command, progress_func \\\\ fn(_, state) -> state end, key \\\\ nil, output \\\\ nil)/;"	f	method:test
exec	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/anonymous_function_spec.rb	/^        def exec(func \\\\ fn(_, state) -> state end) do$/;"	f
exec	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/anonymous_function_spec.rb	/^      def exec(func \\\\ fn(_, state) -> state end) do$/;"	f
execOut	plugged/fzf/src/reader.go	/^	execOut  io.ReadCloser$/;"	m	struct:fzf.Reader	typeref:typename:io.ReadCloser
executeCommand	plugged/fzf/src/terminal.go	/^func (t *Terminal) executeCommand(template string, forcePlus bool, background bool, capture bool/;"	f	struct:fzf.Terminal	typeref:typename:string
executeRegexp	plugged/fzf/src/options.go	/^	executeRegexp    *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
executing	plugged/fzf/src/terminal.go	/^	executing          *util.AtomicBool$/;"	m	struct:fzf.Terminal	typeref:typename:*util.AtomicBool
executor	plugged/fzf/src/reader.go	/^	executor *util.Executor$/;"	m	struct:fzf.Reader	typeref:typename:*util.Executor
executor	plugged/fzf/src/terminal.go	/^	executor           *util.Executor$/;"	m	struct:fzf.Terminal	typeref:typename:*util.Executor
executor	plugged/fzf/src/terminal.go	/^	executor   *util.Executor$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:*util.Executor
exit	plugged/fzf/main.go	/^func exit(code int, err error) {$/;"	f	package:main
exit	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    structure(list(name = name, exit = NULL, handler = handler,$/;"	n	list:makeRestart.anonListb1d136150307
exit	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    structure(list(name = name, exit = NULL, handler = handler,$/;"	n	list:makeRestart.anonListe36e773c0307
expand	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def expand(self):$/;"	m	class:SnippetManager
expandWordForward	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      expandWordForward: false,$/;"	p	class:complete.query
expand_anon	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def expand_anon($/;"	m	class:SnippetManager
expand_anon	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def expand_anon(self, *args, **kwargs):$/;"	m	class:SnippetUtilForAction
expand_or_jump	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def expand_or_jump(self):$/;"	m	class:SnippetManager
expect	plugged/fzf/src/terminal.go	/^	expect             map[tui.Event]string$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event]string
expected	plugged/completor.vim/tests/test_go.py	/^    expected = {$/;"	v	class:TestDoc
expected	plugged/completor.vim/tests/test_go.py	/^    expected = {$/;"	v	class:TestGetCmdInfo
expected	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    expected = models.CharField(max_length=7, choices=STATUS_CHOICES, blank=True, null=True)$/;"	v	class:FailureLine
expected_error	plugged/ultisnips/test/test_Choices.py	/^    expected_error = "Choices selection is not supported on \\$0"$/;"	v	class:Choices_ShouldThrowErrorWithZeroTabstop
expected_error	plugged/ultisnips/test/test_ContextSnippets.py	/^    expected_error = r"IndexError: line number out of range"$/;"	v	class:ContextSnippets_ReportErrorOnIndexOutOfRange
expected_error	plugged/ultisnips/test/test_ContextSnippets.py	/^    expected_error = r"NameError: name 'Tru' is not defined"$/;"	v	class:ContextSnippets_ReportError
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = " > \\s+qwe"$/;"	v	class:ParseSnippets_PrintPythonStacktraceMultiline
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = " > abc"$/;"	v	class:ParseSnippets_PrintPythonStacktrace
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Context: asd"$/;"	v	class:ParseSnippets_PrintErroneousSnippetContext
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Defined in: .*\/all.snippets"$/;"	v	class:ParseSnippets_PrintErroneousSnippetLocation
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Invalid multiword trigger: '!inv snip\/' in \\S+:2"$/;"	v	class:ParseSnippets_MultiWord_UnmatchedContainer
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Invalid multiword trigger: 'test snip' in \\S+:2"$/;"	v	class:ParseSnippets_MultiWord_NoContainer
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Post-expand: asd"$/;"	v	class:ParseSnippets_PrintErroneousSnippetPostAction
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Pre-expand: asd"$/;"	v	class:ParseSnippets_PrintErroneousSnippetPreAction
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = "Trigger: test"$/;"	v	class:ParseSnippets_PrintErroneousSnippet
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = r"'extends' without file types in \\S+:2"$/;"	v	class:ParseSnippets_ExtendsWithoutFiletype
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = r"Invalid line 'unknown directive' in \\S+:2"$/;"	v	class:ParseSnippets_UnknownDirective
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = r"Invalid priority '' in \\S+:2"$/;"	v	class:ParseSnippets_InvalidPriorityLine1
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = r"Invalid priority '- 50' in \\S+:2"$/;"	v	class:ParseSnippets_InvalidPriorityLine
expected_error	plugged/ultisnips/test/test_ParseSnippets.py	/^    expected_error = r"Missing 'endsnippet' for 'testsnip' in \\S+:4"$/;"	v	class:ParseSnippets_MissingEndSnippet
expected_error	plugged/ultisnips/test/test_SnippetActions.py	/^    expected_error = "changes are untrackable"$/;"	v	class:SnippetActions_ErrorOnBufferModificationThroughCommand
expected_error	plugged/ultisnips/test/test_SnippetActions.py	/^    expected_error = "line under the cursor was modified"$/;"	v	class:SnippetActions_ErrorOnModificationSnippetLine
expected_error	plugged/ultisnips/test/vim_test_case.py	/^    expected_error = ""$/;"	v	class:VimTestCase
expected_python_version	plugged/ultisnips/test/vim_test_case.py	/^    expected_python_version = ($/;"	v	class:VimTestCase
expire_performance_data	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    expire_performance_data = models.BooleanField(default=True)$/;"	v	class:Repository
export_info	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/pipeline_spec.rb	/^    def export_info(users) do$/;"	f	method:test.test.test
extended	plugged/fzf/src/pattern.go	/^	extended      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
extendedMatch	plugged/fzf/src/pattern.go	/^func (p *Pattern) extendedMatch(item *Item, withPos bool, slab *util.Slab) ([]Offset, int, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:([]Offset, int, *[]int)
extraLines	plugged/fzf/src/terminal.go	/^func (t *Terminal) extraLines() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
extractColor	plugged/fzf/src/ansi.go	/^func extractColor(str string, state *ansiState, proc func(string, *ansiState) bool) (string, *[]/;"	f	package:fzf	typeref:typename:(string, *[]ansiOffset, *ansiState)
exunit	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/exunit_spec.rb	/^describe 'exunit' do$/;"	d
f	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/blocks_spec.rb	/^  def f do$/;"	f	method:name.name
f	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/blocks_spec.rb	/^  def f do$/;"	f	method:name.name.f
f1	plugged/vim-coiled-snake/tests/corner_cases/comment_dedent.py	/^def f1():$/;"	f
f2	plugged/vim-coiled-snake/tests/corner_cases/comment_dedent.py	/^def f2():$/;"	f
f3	plugged/vim-coiled-snake/tests/corner_cases/comment_dedent.py	/^def f3():$/;"	f
fail	plugged/fzf/bin/fzf-tmux	/^fail() {$/;"	f
failed	plugged/fzf/src/terminal.go	/^	failed             *string$/;"	m	struct:fzf.Terminal	typeref:typename:*string
failure_classification	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    failure_classification = models.ForeignKey(FailureClassification, on_delete=models.CASCADE)$/;"	v	class:JobNote
failure_classification	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    failure_classification = models.ForeignKey(FailureClassification, on_delete=models.CASCADE, /;"	v	class:Job
failure_line	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    failure_line = models.OneToOneField(FailureLine,$/;"	v	class:TextLogErrorMetadata
failure_lines	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    failure_lines = models.ManyToManyField(FailureLine,$/;"	v	class:Group
failures	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    failures = FailuresQuerySet.as_manager()$/;"	v	class:BugJobMap
fat-arrow functions	plugged/splitjoin.vim/spec/plugin/js_spec.rb	/^  describe "fat-arrow functions" do$/;"	d
fd	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) fd() int {$/;"	f	unknown:tui.LightRenderer	typeref:typename:int
feed	plugged/fzf/src/reader.go	/^func (r *Reader) feed(src io.Reader) {$/;"	f	struct:fzf.Reader
feedkeys	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def feedkeys(keys, mode="n"):$/;"	f
ff	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^ff <- "hist"$/;"	g
ff	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^ff <- "hist"$/;"	g
fg	plugged/fzf/src/ansi.go	/^	fg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
fg	plugged/fzf/src/tui/light.go	/^	fg       Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
fg	plugged/fzf/src/tui/tui.go	/^	fg   Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
fifo	plugged/fzf/src/proxy.go	/^func fifo(name string) (string, error) {$/;"	f	package:fzf	typeref:typename:(string, error)
file	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      file: '#0',$/;"	p	class:complete.query
file	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    var file = {$/;"	c	class:complete
file	plugged/fzf/src/options.go	/^	file   bool$/;"	m	struct:fzf.walkerOpts	typeref:typename:bool
file	plugged/fzf/src/terminal.go	/^	file          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
file	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    if(file == "") file <- stdin()$/;"	v	function:try
file	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    if(file == "") file <- stdin()$/;"	v	function:try
file_content	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def file_content(self):$/;"	m	class:Lsp
filename	plugged/completor.vim/pythonx/completor/__init__.py	/^    def filename(self):$/;"	m	class:Completor
filename	plugged/validator.vim/pythonx/validator/__init__.py	/^    def filename(self):$/;"	m	class:Validator
files	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    var doc = {query: query, files: [file]};$/;"	p	class:complete.doc
files	plugged/ultisnips/test/test_Autotrigger.py	/^    files = {$/;"	v	class:Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne
files	plugged/ultisnips/test/test_Autotrigger.py	/^    files = {$/;"	v	class:Autotrigger_CanMatchContext
files	plugged/ultisnips/test/test_Autotrigger.py	/^    files = {$/;"	v	class:Autotrigger_CanMatchPreviouslySelectedPlaceholder
files	plugged/ultisnips/test/test_Autotrigger.py	/^    files = {$/;"	v	class:Autotrigger_CanMatchSimpleTrigger
files	plugged/ultisnips/test/test_Autotrigger.py	/^    files = {$/;"	v	class:Autotrigger_CanToggle
files	plugged/ultisnips/test/test_Autotrigger.py	/^    files = {$/;"	v	class:Autotrigger_GlobalDisable
files	plugged/ultisnips/test/test_Autotrigger.py	/^    files = {$/;"	v	class:Autotrigger_GlobalDisableThenToggle
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_Before
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_ContextHasAccessToReMatch
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_ContextHasAccessToVisual
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_ContextIsClearedBeforeExpand
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_CursorIsZeroBased
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_DoNotExpandOnFalse
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_ExpandOnTrue
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_Header_DoNotExpandOnFalse
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_Header_ExpandOnTrue
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_PriorityKeyword
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_ReportError
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_ReportErrorOnIndexOutOfRange
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_SimpleSnippet
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_SnippetPriority
files	plugged/ultisnips/test/test_ContextSnippets.py	/^    files = {$/;"	v	class:ContextSnippets_UseContext
files	plugged/ultisnips/test/test_Format.py	/^    files = {$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_ClearAll
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_ClearOne
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_ClearTwo
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_ExtendsWithoutFiletype
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_Global_Local_Python
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_Global_Python
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_Global_Python_After
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_InvalidPriorityLine
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_InvalidPriorityLine1
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_MissingEndSnippet
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_MultiWord_NoContainer
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_MultiWord_Quotes
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_MultiWord_UnmatchedContainer
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_MultiWord_WithQuotes
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_PrintErroneousSnippet
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_PrintErroneousSnippetContext
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_PrintErroneousSnippetLocation
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_PrintErroneousSnippetPostAction
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_PrintErroneousSnippetPreAction
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_PrintPythonStacktrace
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_PrintPythonStacktraceMultiline
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_SimpleSnippet
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:ParseSnippets_UnknownDirective
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:_ParseSnippets_MultiWord
files	plugged/ultisnips/test/test_ParseSnippets.py	/^    files = {$/;"	v	class:_ParseSnippets_MultiWord_RE
files	plugged/ultisnips/test/test_Recursive.py	/^    files = {$/;"	v	class:RecTabStops_ChildTriggerContainsParentTextObjects
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_Disabled
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_EmptyLinesContinueSnippets
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_Extends
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_Interpolation
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_InterpolationWithSystem
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_Issue1325
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_Issue1344
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_Issue658
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_MultiMatches
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_NoNestedTabstops
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_OtherFiletype
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_OverwrittenByRegExpTrigger
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_SimpleSnippet
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_SimpleSnippetInSnippetFile
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_SimpleSnippetSubDirectory
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_TestMirrors
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_TestMirrorsInPlaceholders
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_TestMirrorsInPlaceholders_Overwrite
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_TestNoBraceTabstops
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_TestNoBraceTabstopsAndMirrors
files	plugged/ultisnips/test/test_SnipMate.py	/^    files = {$/;"	v	class:snipMate_Visual_Simple
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_CanEvenWrapSnippetInPreAction
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_CanExpandAnonOnPreExpand
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpAction
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_CanExpandAnonSnippetOnFirstJump
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_CanExpandSnippetInDifferentPlace
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_CanMirrorTabStopsOutsideOfSnippet
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_CanModifyParentBody
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_CanUseContextFromContextMatch
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_DoNotBreakCursorOnSingleLikeChange
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_EnsureIndent
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_ErrorOnBufferModificationThroughCommand
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_ErrorOnModificationSnippetLine
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_MoveParentSnippetFromChildInPreAction
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_MoveVisual
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_PostActionCanUseSnippetRange
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_PostActionModifiesBuffer
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_PostActionModifiesCharAfterSnippet
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_PostActionModifiesLineAfterSnippet
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_PreActionModifiesBuffer
files	plugged/ultisnips/test/test_SnippetActions.py	/^    files = {$/;"	v	class:SnippetActions_UseCorrectJumpActions
files	plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_AddedHasHigherThanFile
files	plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_ClearedByChild
files	plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_ClearedByParent
files	plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded
files	plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded_neg_prio
files	plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_SimpleClear
files	plugged/ultisnips/test/test_SnippetPriorities.py	/^    files = {$/;"	v	class:SnippetPriorities_SimpleClear2
files	plugged/ultisnips/test/test_TabStop.py	/^    files = {$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet
files	plugged/ultisnips/test/test_TabStop.py	/^    files = {$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE
files	plugged/ultisnips/test/vim_test_case.py	/^    files = {}$/;"	v	class:VimTestCase
filetype	plugged/completor.vim/pythonx/completers/ale.py	/^    filetype = 'ale'$/;"	v	class:ALE
filetype	plugged/completor.vim/pythonx/completers/common/__init__.py	/^    filetype = 'common'$/;"	v	class:Common
filetype	plugged/completor.vim/pythonx/completers/common/buffer.py	/^    filetype = 'buffer'$/;"	v	class:Buffer
filetype	plugged/completor.vim/pythonx/completers/common/filename.py	/^    filetype = 'filename'$/;"	v	class:Filename
filetype	plugged/completor.vim/pythonx/completers/common/neoinclude.py	/^    filetype = 'neoinclude'$/;"	v	class:Neoinclude
filetype	plugged/completor.vim/pythonx/completers/common/omni.py	/^    filetype = 'omni'$/;"	v	class:Omni
filetype	plugged/completor.vim/pythonx/completers/common/ultisnips.py	/^    filetype = 'ultisnips'$/;"	v	class:Ultisnips
filetype	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^    filetype = 'cpp'$/;"	v	class:Clang
filetype	plugged/completor.vim/pythonx/completers/go.py	/^    filetype = 'go'$/;"	v	class:Go
filetype	plugged/completor.vim/pythonx/completers/javascript/__init__.py	/^    filetype = 'javascript'$/;"	v	class:Tern
filetype	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    filetype = 'lsp'$/;"	v	class:Lsp
filetype	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    filetype = 'python'$/;"	v	class:Jedi
filetype	plugged/completor.vim/pythonx/completers/rust.py	/^    filetype = 'rust'$/;"	v	class:Racer
filetype	plugged/completor.vim/pythonx/completor/__init__.py	/^    filetype = Unusable()$/;"	v	class:Completor
filetype	plugged/completor.vim/tests/test_completor.py	/^    filetype = 'hello'$/;"	v	class:HelloCompleter
filetypedetect	autoload/plug.vim	/^        augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^        augroup filetypedetect$/;"	a
filetypedetect	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^        augroup filetypedetect$/;"	a
filetypes	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^    def filetypes(self):$/;"	m	class:VimBuffer
fill	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) fill(str string, resetCode string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
fill	plugged/fzf/src/tui/tcell.go	/^func fill(x, y, w, h int, n ColorPair, r rune) {$/;"	f	package:tui
fill	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    scale <- fill <- discrete()$/;"	g
fill	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    scale <- fill <- discrete()$/;"	g
fillString	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) fillString(text string, pair ColorPair) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
fill_in_whitespace	plugged/ultisnips/pythonx/UltiSnips/text.py	/^def fill_in_whitespace(text):$/;"	f
filled	plugged/fzf/src/terminal.go	/^	filled    bool$/;"	m	struct:fzf.previewed	typeref:typename:bool
filter	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      filter: true,$/;"	p	class:complete.query
filter	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^        def filter(self, record):$/;"	m	class:main.Filter
filter	plugged/completor.vim/pythonx/completor/__init__.py	/^    def filter(self, record):$/;"	m	class:LogFilter
filter	plugged/validator.vim/pythonx/lints/cython.py	/^    def filter(self, fname):$/;"	m	class:Cython
filter	plugged/validator.vim/pythonx/validator/__init__.py	/^    def filter(self, fpath):$/;"	m	class:Validator
filter	plugged/validator.vim/pythonx/validator/utils.py	/^    def filter(self, record):$/;"	m	class:_DebugFilter
filterNonEmpty	plugged/fzf/src/options.go	/^func filterNonEmpty(input []string) []string {$/;"	f	package:fzf	typeref:typename:[]string
filter_items	plugged/completor.vim/pythonx/completers/lsp/action.py	/^def filter_items(items, input_data):$/;"	f
fin	plugged/fzf/src/reader.go	/^func (r *Reader) fin(success bool) {$/;"	f	struct:fzf.Reader
finChan	plugged/fzf/src/reader.go	/^	finChan  chan bool$/;"	m	struct:fzf.Reader	typeref:typename:chan bool
final	plugged/fzf/src/matcher.go	/^	final    bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
final	plugged/fzf/src/merger.go	/^	final    bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
final	plugged/fzf/src/terminal.go	/^	final      bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
finalize	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/base.py	/^def finalize(all_tokens, seen_ts, snippet_instance):$/;"	f
find	plugged/completor.vim/pythonx/completers/common/filename.py	/^def find(current_dir, input_data, offset):$/;"	f
findDefs	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^function findDefs(projectDir, config) {$/;"	f
findFile	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^function findFile(file, projectDir, fallbackDir) {$/;"	f
findFirstMatch	plugged/fzf/src/terminal.go	/^func findFirstMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findLastMatch	plugged/fzf/src/terminal.go	/^func findLastMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findOffset	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(row int, col int)
findOffset	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(row int, col int)
find_all_snippet_directories	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^def find_all_snippet_directories() -> List[str]:$/;"	f	typeref:typename:List[str]
find_all_snippet_files	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^def find_all_snippet_files(ft) -> Set[str]:$/;"	f	typeref:typename:Set[str]
find_config_file	plugged/completor.vim/pythonx/completor/__init__.py	/^    def find_config_file(file):$/;"	m	class:Completor
find_file	plugged/validator.vim/pythonx/validator/utils.py	/^def find_file(file):$/;"	f
find_parent_for_new_to	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def find_parent_for_new_to(self, pos):$/;"	m	class:EditableTextObject
find_snippet_files	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/ulti_snips.py	/^def find_snippet_files(ft, directory: str) -> Set[str]:$/;"	f	typeref:typename:Set[str]
finished	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    finished = models.DateTimeField(null=True)$/;"	v	class:TextLogStep
finished_line_number	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    finished_line_number = models.PositiveIntegerField()$/;"	v	class:TextLogStep
firstKey	plugged/fzf/src/options.go	/^func firstKey(keymap map[tui.Event]string) tui.Event {$/;"	f	package:fzf	typeref:typename:tui.Event
firstLine	plugged/fzf/src/options.go	/^func firstLine(s string) string {$/;"	f	package:fzf	typeref:typename:string
firstLine	plugged/fzf/src/terminal.go	/^	firstLine int$/;"	m	struct:fzf.itemLine	typeref:typename:int
first_submission_timestamp	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    first_submission_timestamp = models.IntegerField(db_index=True)$/;"	v	class:ReferenceDataSignatures
fish	plugged/fzf/test/test_go.rb	/^    def fish$/;"	S	class:Shell
fishKeyBindings	plugged/fzf/main.go	/^var fishKeyBindings []byte$/;"	v	package:main	typeref:typename:[]byte
fit	plugged/fzf/src/terminal.go	/^	fit int$/;"	m	struct:fzf.fitpad	typeref:typename:int
fitpad	plugged/fzf/src/terminal.go	/^type fitpad struct {$/;"	s	package:fzf
flag	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    else if(width < 0L) { flag <- "-"; width <- -width }$/;"	v	function:foo
flag	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    else if(width < 0L) { flag <- "-"; width <- -width }$/;"	v	function:foo
flatten_test_suite	plugged/ultisnips/test_all.py	/^    def flatten_test_suite(suite):$/;"	f
flush	plugged/fzf/src/terminal.go	/^func (t *Terminal) flush() {$/;"	f	struct:fzf.Terminal
flush	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) flush() {$/;"	f	unknown:tui.LightRenderer
fn	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def fn(self):  # pylint:disable=no-self-use,invalid-name$/;"	m	class:SnippetUtil
focus	plugged/fzf/test/test_go.rb	/^  def focus$/;"	f	class:Tmux
focus	plugged/ultisnips/test/vim_interface.py	/^    def focus(self, title=None):$/;"	m	class:VimInterfaceWindows
fold	plugged/splitjoin.vim/spec/support/vim-elixir/spec/folding/basic_spec.rb	/^  def self.fold(content)$/;"	S
fold.InsideLnumOrEOF	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^    function! fold.InsideLnumOrEOF()$/;"	f
fold.InsideLnumOrEOF	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^    function! fold.InsideLnumOrEOF()$/;"	f
fold.InsideLnumOrEOF	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^    function! fold.InsideLnumOrEOF()$/;"	f
fold.InsideLnumOrEOF	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^    function! fold.InsideLnumOrEOF()$/;"	f
fold.NumLines	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^    function! fold.NumLines()$/;"	f
fold.NumLines	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^    function! fold.NumLines()$/;"	f
fold.NumLines	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^    function! fold.NumLines()$/;"	f
fold.NumLines	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^    function! fold.NumLines()$/;"	f
fold_and_replace	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def fold_and_replace(content, fold_on_line)$/;"	f	class:Buffer
follow	plugged/fzf/src/options.go	/^	follow      bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
follow	plugged/fzf/src/options.go	/^	follow bool$/;"	m	struct:fzf.walkerOpts	typeref:typename:bool
following	plugged/fzf/src/terminal.go	/^	following  resumableState$/;"	m	struct:fzf.previewer	typeref:typename:resumableState
foo	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^        def foo(one, two) = bar$/;"	f
foo	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^        def foo(one, two) = bar$/;"	f	method:foo
foo	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^        def foo(one, two)$/;"	f	method:foo
foo	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^foo = function() {$/;"	f
foo	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^foo <- function(){$/;"	f
foo	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^foo <- function(){$/;"	f
foo	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/comments_spec.rb	/^    def foo(<<$/;"	f
foo	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/operator_spec.rb	/^      def foo(bar \/\/ :baz)$/;"	f	method:foo
foo	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/operator_spec.rb	/^      def foo(bar \\\\ :baz)$/;"	f
foo	plugged/vim-coiled-snake/tests/corner_cases/comment_after_function.py	/^def foo(): # comment here should still fold$/;"	f
foo	plugged/vim-coiled-snake/tests/corner_cases/comment_after_function.py	/^def foo(): # trailing # still prevents folding #$/;"	f
foo	plugged/vim-coiled-snake/tests/corner_cases/comment_dedent_2.py	/^def foo():$/;"	f
foo	plugged/vim-coiled-snake/tests/corner_cases/extra_indent.py	/^    def foo():$/;"	f
foo	plugged/vim-coiled-snake/tests/corner_cases/inline_list_addition.py	/^def foo():$/;"	f
foo	plugged/vim-coiled-snake/tests/corner_cases/line_continuation.py	/^def foo():$/;"	f
foo	plugged/vim-coiled-snake/tests/corner_cases/multiline_str_with_paren.py	/^def foo():$/;"	f
foo	plugged/vim-coiled-snake/tests/corner_cases/small_indent.py	/^def foo():$/;"	f
foo	plugged/vim-coiled-snake/tests/corner_cases/unindented_function.py	/^def foo$/;"	f
foo	plugged/vim-coiled-snake/tests/easy/class.py	/^    def foo():$/;"	m	class:Foo
foo	plugged/vim-coiled-snake/tests/easy/data_struct.py	/^foo = [$/;"	v
foo	plugged/vim-coiled-snake/tests/easy/decorator.py	/^def foo():$/;"	f
foo	plugged/vim-coiled-snake/tests/easy/function.py	/^def foo():$/;"	f
foo	plugged/vim-coiled-snake/tests/issues/dummy_repo_16/test_16.py	/^def foo():$/;"	f
foo	plugged/vim-coiled-snake/tests/issues/test_7.py	/^def foo():$/;"	f
foo	plugged/vim-coiled-snake/tests/test_blocks.py	/^    def foo():$/;"	m	class:Foo
foo	plugged/vim-coiled-snake/tests/test_blocks.py	/^def foo():$/;"	f
foo	plugged/vim-coiled-snake/tests/test_data_structs.py	/^foo = """ """$/;"	v
foo	plugged/vim-coiled-snake/tests/test_data_structs.py	/^foo = """$/;"	v
foo	plugged/vim-coiled-snake/tests/test_data_structs.py	/^foo = ''' '''$/;"	v
foo	plugged/vim-coiled-snake/tests/test_data_structs.py	/^foo = '''$/;"	v
foo	plugged/vim-coiled-snake/tests/test_data_structs.py	/^foo = ($/;"	v
foo	plugged/vim-coiled-snake/tests/test_data_structs.py	/^foo = ()$/;"	v
foo	plugged/vim-coiled-snake/tests/test_data_structs.py	/^foo = [$/;"	v
foo	plugged/vim-coiled-snake/tests/test_data_structs.py	/^foo = []$/;"	v
foo	plugged/vim-coiled-snake/tests/test_data_structs.py	/^foo = {$/;"	v
foo	plugged/vim-coiled-snake/tests/test_data_structs.py	/^foo = {}$/;"	v
foo	plugged/vim-coiled-snake/tests/test_ignore.py	/^def foo(): #$/;"	f
foo	plugged/vim-coiled-snake/tests/test_nested.py	/^                def foo():$/;"	f	function:foo.foo.foo.foo	file:
foo	plugged/vim-coiled-snake/tests/test_nested.py	/^            def foo():$/;"	f	function:foo.foo.foo	file:
foo	plugged/vim-coiled-snake/tests/test_nested.py	/^        def foo():$/;"	f	function:foo.foo	file:
foo	plugged/vim-coiled-snake/tests/test_nested.py	/^    def foo():$/;"	f	function:foo	file:
foo	plugged/vim-coiled-snake/tests/test_nested.py	/^def foo():$/;"	f
foobar	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^foobar <- function(x) UseMethod("x")$/;"	f
foobar.character	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^foobar.character <- function(x) paste0(x[1], "-", x[length(x)])$/;"	f
foobar.numeric	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^foobar.numeric <- function(x) abs(mean(x) - median(x))$/;"	f
forceBlack	plugged/fzf/src/tui/light.go	/^	forceBlack    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
forceBlack	plugged/fzf/src/tui/tui.go	/^	forceBlack   bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
forcePlus	plugged/fzf/src/terminal.go	/^	forcePlus  bool$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:bool
forcePreview	plugged/fzf/src/terminal.go	/^	forcePreview       bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
forceUpdate	plugged/fzf/src/terminal.go	/^	forceUpdate   bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
format	plugged/ultisnips/Makefile	/^format:$/;"	t
format_cmd	plugged/completor.vim/pythonx/completers/javascript/__init__.py	/^    def format_cmd(self):$/;"	m	class:Tern
format_cmd	plugged/completor.vim/pythonx/completor/__init__.py	/^    def format_cmd(self):$/;"	m	class:Completor
format_cmd	plugged/validator.vim/pythonx/validator/__init__.py	/^    def format_cmd(self, fpath):$/;"	m	class:Validator
format_text	plugged/completor.vim/pythonx/completers/lsp/action.py	/^def format_text(data):$/;"	f
forward	plugged/fzf/src/pattern.go	/^	forward       bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
from	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @type from :: {pid, subscription_tag}$/;"	y	module:RateLimiter	access:public
fs	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^var fs = require('fs');$/;"	v
ft	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def ft(self):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#Autowrite	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Autowrite() abort$/;"	f
fugitive#BisectComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BisectComplete(A, L, P, ...) abort$/;"	f
fugitive#BlameComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameComplete(A, L, P) abort$/;"	f
fugitive#BlameFileType	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameFileType() abort$/;"	f
fugitive#BlameSyntax	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameSyntax() abort$/;"	f
fugitive#BrowseCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BrowseCommand(line1, count, range, bang, mods, arg, ...) abort$/;"	f
fugitive#BufReadCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadCmd(...) abort$/;"	f
fugitive#BufReadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadStatus(cmdbang) abort$/;"	f
fugitive#BufWriteCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufWriteCmd(...) abort$/;"	f
fugitive#CanDiffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CanDiffoff(buf) abort$/;"	f
fugitive#CanPty	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CanPty() abort$/;"	f
fugitive#Cd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cd(path, ...) abort$/;"	f
fugitive#CdComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CdComplete(A, L, P) abort$/;"	f
fugitive#Cfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cfile() abort$/;"	f
fugitive#Command	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Command(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#CommitComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommitComplete(A, L, P, ...) abort$/;"	f
fugitive#Complete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Complete(lead, ...) abort$/;"	f
fugitive#CompleteForWorkingDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteForWorkingDir(A, L, P, ...) abort$/;"	f
fugitive#CompleteObject	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteObject(base, ...) abort$/;"	f
fugitive#CompletePath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompletePath(base, ...) abort$/;"	f
fugitive#Config	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Config(...) abort$/;"	f
fugitive#ConfigGetAll	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ConfigGetAll(name, ...) abort$/;"	f
fugitive#ConfigGetRegexp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ConfigGetRegexp(pattern, ...) abort$/;"	f
fugitive#Cwindow	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cwindow() abort$/;"	f
fugitive#DeleteCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DeleteCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#DidChange	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DidChange(...) abort$/;"	f
fugitive#DiffClose	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DiffClose() abort$/;"	f
fugitive#Diffsplit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Diffsplit(autodir, keepfocus, mods, arg, ...) abort$/;"	f
fugitive#DropCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DropCommand(line1, count, range, bang, mods, arg, ...) abort$/;"	f
fugitive#EditComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EditComplete(A, L, P) abort$/;"	f
fugitive#EfmDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EfmDir(...) abort$/;"	f
fugitive#Execute	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Execute(...) abort$/;"	f
fugitive#Expand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Expand(object) abort$/;"	f
fugitive#ExpireConfig	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ExpireConfig(...) abort$/;"	f
fugitive#FetchComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FetchComplete(A, L, P, ...) abort$/;"	f
fugitive#FileReadCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileReadCmd(...) abort$/;"	f
fugitive#FileWriteCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileWriteCmd(...) abort$/;"	f
fugitive#Find	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Find(object, ...) abort$/;"	f
fugitive#Foldtext	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Foldtext() abort$/;"	f
fugitive#GX	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GX() abort$/;"	f
fugitive#GitVersion	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GitVersion(...) abort$/;"	f
fugitive#GrepCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepCommand(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#GrepComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepComplete(A, L, P) abort$/;"	f
fugitive#Head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Head(...) abort$/;"	f
fugitive#LogCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogCommand(line1, count, range, bang, mods, args, type) abort$/;"	f
fugitive#LogComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogComplete(A, L, P) abort$/;"	f
fugitive#MapCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapCfile(...) abort$/;"	f
fugitive#MapJumps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapJumps(...) abort$/;"	f
fugitive#MergeComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MergeComplete(A, L, P, ...) abort$/;"	f
fugitive#MessageCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MessageCfile() abort$/;"	f
fugitive#MoveCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MoveCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#Object	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Object(...) abort$/;"	f
fugitive#Open	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Open(cmd, bang, mods, arg, ...) abort$/;"	f
fugitive#PagerFor	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PagerFor(argv, ...) abort$/;"	f
fugitive#Parse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Parse(url) abort$/;"	f
fugitive#Path	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Path(url, ...) abort$/;"	f
fugitive#PathComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PathComplete(...) abort$/;"	f
fugitive#PorcelainCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PorcelainCfile() abort$/;"	f
fugitive#PrepareDirEnvGitFlagsArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareDirEnvGitFlagsArgs(...) abort$/;"	f
fugitive#PrepareJob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareJob(...) abort$/;"	f
fugitive#PullComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PullComplete(A, L, P, ...) abort$/;"	f
fugitive#PushComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PushComplete(A, L, P, ...) abort$/;"	f
fugitive#ReadCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadCommand(line1, count, range, bang, mods, arg, ...) abort$/;"	f
fugitive#ReadComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadComplete(A, L, P) abort$/;"	f
fugitive#Real	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Real(url) abort$/;"	f
fugitive#RebaseComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RebaseComplete(A, L, P, ...) abort$/;"	f
fugitive#ReloadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReloadStatus(...) abort$/;"	f
fugitive#Remote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Remote(...) abort$/;"	f
fugitive#RemoteHttpHeaders	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteHttpHeaders(remote) abort$/;"	f
fugitive#RemoteUrl	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteUrl(...) abort$/;"	f
fugitive#RemoveCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoveCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#RenameCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#RenameComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameComplete(A,L,P) abort$/;"	f
fugitive#ResolveUrl	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ResolveUrl(target, ...) abort$/;"	f
fugitive#Result	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Result(...) abort$/;"	f
fugitive#Resume	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Resume() abort$/;"	f
fugitive#RevParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevParse(rev, ...) abort$/;"	f
fugitive#RevertComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevertComplete(A, L, P, ...) abort$/;"	f
fugitive#ShellCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ShellCommand(...) abort$/;"	f
fugitive#SourceCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SourceCmd(...) abort$/;"	f
fugitive#SshConfig	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SshConfig(host, ...) abort$/;"	f
fugitive#SshHostAlias	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SshHostAlias(authority) abort$/;"	f
fugitive#Statusline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Statusline(...) abort$/;"	f
fugitive#UnlinkCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#UnlinkCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#Unquote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Unquote(string) abort$/;"	f
fugitive#UrlDecode	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#UrlDecode(str) abort$/;"	f
fugitive#Wait	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Wait(job_or_jobs, ...) abort$/;"	f
fugitive#WqCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WqCommand(...) abort$/;"	f
fugitive#WriteCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WriteCommand(line1, line2, range, bang, mods, arg, ...) abort$/;"	f
fugitive#delete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#delete(url, ...) abort$/;"	f
fugitive#filereadable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filereadable(url) abort$/;"	f
fugitive#filewritable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filewritable(url) abort$/;"	f
fugitive#foldtext	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive#getfperm	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfperm(url) abort$/;"	f
fugitive#getfsize	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfsize(url) abort$/;"	f
fugitive#getftime	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftime(url) abort$/;"	f
fugitive#getftype	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftype(url) abort$/;"	f
fugitive#glob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#glob(url, ...) abort$/;"	f
fugitive#isdirectory	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#isdirectory(url) abort$/;"	f
fugitive#readfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#readfile(url, ...) abort$/;"	f
fugitive#repo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
fugitive#resolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#resolve(url) abort$/;"	f
fugitive#setfperm	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#setfperm(url, perm) abort$/;"	f
fugitive#simplify	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#simplify(url) abort$/;"	f
fugitive#statusline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive#writefile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#writefile(lines, url, ...) abort$/;"	f
fugitive.vim	plugged/vim-fugitive/README.markdown	/^# fugitive.vim$/;"	c
fugitive_blame	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_diff	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_dummy_events	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_dummy_events$/;"	a
fugitive_job	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_job$/;"	a
fugitive_status	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_status$/;"	a
fugitive_temp	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_temp$/;"	a
fullRedraw	plugged/fzf/src/terminal.go	/^func (t *Terminal) fullRedraw() {$/;"	f	struct:fzf.Terminal
fullscreen	plugged/fzf/src/terminal.go	/^	fullscreen         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
fullscreen	plugged/fzf/src/tui/light.go	/^	fullscreen    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
fun	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^    def fun do$/;"	f	method:example.project.config.test.test.test.project.test.create.double.double.double.test_another_feature
funcs	plugged/splitjoin.vim/spec/plugin/go_spec.rb	/^  describe "funcs" do$/;"	d
function	plugged/completor.vim/pythonx/completor/_vim.py	/^    def function(name):$/;"	f	function:_patch_nvim	file:
function	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/strings_spec.rb	/^      def function do$/;"	f
function	plugged/vim-coiled-snake/tests/issues/test_21.py	/^def function():$/;"	f
function	plugged/vim-coiled-snake/tests/speed/small_folds.py	/^def function():$/;"	f
function	plugged/vim-coiled-snake/tests/test_decorators.py	/^def function():$/;"	f
function	plugged/vim-coiled-snake/tests/test_everything.py	/^def function():$/;"	f
function definitions	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^  describe "function definitions" do$/;"	d
function syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/function_spec.rb	/^describe 'function syntax' do$/;"	d
functionWithALotOfArgs	plugged/vim-coiled-snake/tests/issues/test_4.py	/^def functionWithALotOfArgs($/;"	f
functions,function definitions	plugged/splitjoin.vim/spec/support/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(#\\[[^\\]]\\][ \\t]*)*(pub[ \\t]+)?(extern[ \\t]+)?("[^"]+"[ \\t]+)?(uns/;"	k	langdef:Rust
fuzzy	plugged/fzf/src/pattern.go	/^	fuzzy         bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
fuzzyAlgo	plugged/fzf/src/pattern.go	/^	fuzzyAlgo     algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:algo.Algo
fzf	plugged/fzf/main.go	/^	fzf "github.com\/junegunn\/fzf\/src"$/;"	P	package:github.com/junegunn/fzf/src
fzf	plugged/fzf/man/man1/fzf.1	/^.TH fzf 1 "Jun 2024" "fzf 0.54.0" "fzf - a command-line fuzzy finder"$/;"	t
fzf	plugged/fzf/src/actiontype_string.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/ansi.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/ansi_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/cache.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/cache_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/chunklist.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/chunklist_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/constants.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/core.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/functions.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/history.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/history_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/item.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/item_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/matcher.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/merger.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/merger_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/options.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/options_no_pprof.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/options_pprof.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/options_pprof_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/options_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/pattern.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/pattern_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/proxy.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/proxy_unix.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/proxy_windows.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/reader.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/reader_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/result.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/result_others.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/result_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/result_x86.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/server.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/terminal.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/terminal_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/terminal_unix.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/terminal_windows.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/tmux.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/tokenizer.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/tokenizer_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/winpty.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/winpty_windows.go	/^package fzf$/;"	p
fzf	plugged/fzf/test/test_go.rb	/^  def fzf(*opts)$/;"	f	class:TestBase
fzf :heart: vim	plugged/fzf.vim/README.md	/^fzf :heart: vim$/;"	c
fzf Theme Playground	plugged/fzf/ADVANCED.md	/^### fzf Theme Playground$/;"	S	section:Advanced fzf examples""Color themes
fzf Theme Playground	plugged/fzf/README.md	/^### fzf Theme Playground$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Tips
fzf inside terminal buffer	plugged/fzf/README-VIM.md	/^### fzf inside terminal buffer$/;"	S	section:FZF Vim integration""Tips
fzf!	plugged/fzf/test/test_go.rb	/^  def fzf!(*opts)$/;"	f	class:TestBase
fzf#complete	plugged/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf#exec	plugged/fzf/plugin/fzf.vim	/^function! fzf#exec(...)$/;"	f
fzf#install	plugged/fzf/plugin/fzf.vim	/^function! fzf#install()$/;"	f
fzf#run	plugged/fzf/plugin/fzf.vim	/^function! fzf#run(...) abort$/;"	f
fzf#shellescape	plugged/fzf/plugin/fzf.vim	/^function! fzf#shellescape(arg, ...)$/;"	f
fzf#vim#_buflisted_sorted	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_buflisted_sorted()$/;"	f
fzf#vim#_format_buffer	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_format_buffer(b)$/;"	f
fzf#vim#_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#_recent_files	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_recent_files()$/;"	f
fzf#vim#_uniq	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
fzf#vim#ag	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#buffer_commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...) range$/;"	f
fzf#vim#buffer_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#buffer_tags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
fzf#vim#buffers	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
fzf#vim#changes	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#changes(...)$/;"	f
fzf#vim#colors	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#command_history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
fzf#vim#commands	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
fzf#vim#commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...) range$/;"	f
fzf#vim#complete	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
fzf#vim#complete#buffer_line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
fzf#vim#complete#line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#path	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
fzf#vim#complete#word	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
fzf#vim#files	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
fzf#vim#filetypes	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
fzf#vim#gitfiles	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
fzf#vim#grep	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, ...)$/;"	f
fzf#vim#grep2	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep2(command_prefix, query, ...)$/;"	f
fzf#vim#helptags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
fzf#vim#jumps	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#jumps(...)$/;"	f
fzf#vim#lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
fzf#vim#listproc#location	plugged/fzf.vim/autoload/fzf/vim/listproc.vim	/^function! fzf#vim#listproc#location(list)$/;"	f
fzf#vim#listproc#quickfix	plugged/fzf.vim/autoload/fzf/vim/listproc.vim	/^function! fzf#vim#listproc#quickfix(list)$/;"	f
fzf#vim#locate	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
fzf#vim#maps	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
fzf#vim#marks	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
fzf#vim#search_history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#snippets	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
fzf#vim#tags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
fzf#vim#windows	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
fzf#vim#with_preview	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
fzf#wrap	plugged/fzf/plugin/fzf.vim	/^function! fzf#wrap(...)$/;"	f
fzf-cd-widget	plugged/fzf/shell/key-bindings.zsh	/^fzf-cd-widget() {$/;"	f
fzf-completion	plugged/fzf/shell/completion.zsh	/^fzf-completion() {$/;"	f
fzf-file-widget	plugged/fzf/shell/key-bindings.bash	/^fzf-file-widget() {$/;"	f
fzf-file-widget	plugged/fzf/shell/key-bindings.zsh	/^fzf-file-widget() {$/;"	f
fzf-history-widget	plugged/fzf/shell/key-bindings.zsh	/^fzf-history-widget() {$/;"	f
fzf.on_exit	plugged/fzf/plugin/fzf.vim	/^      function! fzf.on_exit(job_id, exit_status, event) dict$/;"	f
fzf.on_exit	plugged/fzf/plugin/fzf.vim	/^  function! fzf.on_exit(id, code, ...)$/;"	f
fzf.switch_back	plugged/fzf/plugin/fzf.vim	/^  function! fzf.switch_back(inplace)$/;"	f
fzf\\-tmux	plugged/fzf/man/man1/fzf-tmux.1	/^.TH fzf\\-tmux 1 "Jun 2024" "fzf 0.53.0" "fzf\\-tmux - open fzf in tmux split pane"$/;"	t
fzf_base	plugged/fzf/install.ps1	/^$fzf_base=Split-Path -Parent $MyInvocation.MyCommand.Definition$/;"	v
fzf_buffers	plugged/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
fzf_output	plugged/fzf/test/test_go.rb	/^  def fzf_output$/;"	f	class:TestBase
fzf_output_lines	plugged/fzf/test/test_go.rb	/^  def fzf_output_lines$/;"	f	class:TestBase
fzf_popd	plugged/fzf/plugin/fzf.vim	/^augroup fzf_popd$/;"	a
fzf_swap	plugged/fzf/plugin/fzf.vim	/^    augroup fzf_swap$/;"	a
g1	plugged/vim-coiled-snake/tests/corner_cases/comment_dedent.py	/^    def g1():$/;"	f	function:f2	file:
g2	plugged/vim-coiled-snake/tests/corner_cases/comment_dedent.py	/^    def g2():$/;"	f	function:f2	file:
g:	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:[newname] = g:[key]$/;"	v
g:Lf_PopupColorscheme	plugged/everforest/colors/everforest.vim	/^  let g:Lf_PopupColorscheme = 'everforest'$/;"	v
g:Lf_StlColorscheme	plugged/everforest/colors/everforest.vim	/^  let g:Lf_StlColorscheme = 'everforest'$/;"	v
g:UltiSnipsDebugHost	plugged/ultisnips/plugin/UltiSnips.vim	/^   let g:UltiSnipsDebugHost = 'localhost'$/;"	v
g:UltiSnipsDebugPort	plugged/ultisnips/plugin/UltiSnips.vim	/^   let g:UltiSnipsDebugPort = 8080$/;"	v
g:UltiSnipsDebugServerEnable	plugged/ultisnips/plugin/UltiSnips.vim	/^   let g:UltiSnipsDebugServerEnable = 0$/;"	v
g:UltiSnipsEditSplit	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsEditSplit = 'normal'$/;"	v
g:UltiSnipsEditSplit	plugged/ultisnips/docker/docker_vimrc.vim	/^let g:UltiSnipsEditSplit="vertical"$/;"	v
g:UltiSnipsEnableSnipMate	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsEnableSnipMate = 1$/;"	v
g:UltiSnipsExpandTrigger	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsExpandTrigger = "<tab>"$/;"	v
g:UltiSnipsExpandTrigger	plugged/ultisnips/docker/docker_vimrc.vim	/^let g:UltiSnipsExpandTrigger="<tab>"$/;"	v
g:UltiSnipsExpandTrigger	vimrc	/^let g:UltiSnipsExpandTrigger='<c-y>'$/;"	v
g:UltiSnipsJumpBackwardTrigger	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsJumpBackwardTrigger = "<c-k>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	plugged/ultisnips/docker/docker_vimrc.vim	/^let g:UltiSnipsJumpBackwardTrigger="1"$/;"	v
g:UltiSnipsJumpBackwardTrigger	vimrc	/^let g:UltiSnipsJumpBackwardTrigger='<c-z>'$/;"	v
g:UltiSnipsJumpForwardTrigger	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsJumpForwardTrigger = "<c-j>"$/;"	v
g:UltiSnipsJumpForwardTrigger	plugged/ultisnips/docker/docker_vimrc.vim	/^let g:UltiSnipsJumpForwardTrigger="2"$/;"	v
g:UltiSnipsJumpForwardTrigger	vimrc	/^let g:UltiSnipsJumpForwardTrigger='<c-y>'$/;"	v
g:UltiSnipsListSnippets	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsListSnippets = "<c-tab>"$/;"	v
g:UltiSnipsListSnippets	plugged/ultisnips/docker/docker_vimrc.vim	/^let g:UltiSnipsListSnippets="9"$/;"	v
g:UltiSnipsMappingsToIgnore	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsMappingsToIgnore = []$/;"	v
g:UltiSnipsPMDebugBlocking	plugged/ultisnips/plugin/UltiSnips.vim	/^   let g:UltiSnipsPMDebugBlocking = 0$/;"	v
g:UltiSnipsRemoveSelectModeMappings	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsRemoveSelectModeMappings = 1$/;"	v
g:UltiSnipsSnippetDirectories	plugged/ultisnips/autoload/UltiSnips/map_keys.vim	/^    let g:UltiSnipsSnippetDirectories = [ "UltiSnips" ]$/;"	v
g:VM_Cursor_hl	plugged/everforest/colors/everforest.vim	/^let g:VM_Cursor_hl = 'VMCursor'$/;"	v
g:VM_Extend_hl	plugged/everforest/colors/everforest.vim	/^let g:VM_Extend_hl = 'Visual'$/;"	v
g:VM_Insert_hl	plugged/everforest/colors/everforest.vim	/^let g:VM_Insert_hl = 'VMCursor'$/;"	v
g:VM_Mono_hl	plugged/everforest/colors/everforest.vim	/^let g:VM_Mono_hl = 'VMCursor'$/;"	v
g:YCM_HIGHLIGHT_GROUP	plugged/everforest/colors/everforest.vim	/^  let g:YCM_HIGHLIGHT_GROUP = {$/;"	v
g:__fzf_command	plugged/fzf.vim/autoload/fzf/vim.vim	/^    let g:__fzf_command = "normal ".prefix.item."\\<cr>"$/;"	v
g:__gutentags_vim_is_leaving	plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:__gutentags_vim_is_leaving = 1$/;"	v
g:__gutentags_vim_is_leaving	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
g:_fugitive_last_job	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:_fugitive_last_job = a:state$/;"	v
g:_plug_bang	autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:_plug_bang	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:_plug_bang	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^    let g:_plug_bang = (s:is_win && has('gui_running') ? 'silent ' : '').'!'.escape(cmd, '#!%')$/;"	v
g:_validator_sign_map	plugged/validator.vim/autoload/validator/notifier.vim	/^    let g:_validator_sign_map[a:bufnr] = {'text': {}, 'id': []}$/;"	v
g:_validator_sign_map	plugged/validator.vim/autoload/validator/notifier.vim	/^    let g:_validator_sign_map[a:bufnr].text[lnum] = {'msg': msg, 'type': type.'Sign'}$/;"	v
g:_validator_sign_map	plugged/validator.vim/autoload/validator/notifier.vim	/^  let g:_validator_sign_map[a:bufnr].id = []$/;"	v
g:_validator_sign_map	plugged/validator.vim/autoload/validator/notifier.vim	/^  let g:_validator_sign_map[a:bufnr].text = {}$/;"	v
g:_validator_sign_map	plugged/validator.vim/plugin/validator.vim	/^let g:_validator_sign_map = {}$/;"	v
g:abolish_last_dict	plugged/vim-abolish/plugin/abolish.vim	/^  let g:abolish_last_dict = dict$/;"	v
g:abolish_save_file	plugged/vim-abolish/plugin/abolish.vim	/^    let g:abolish_save_file = expand("~\/.vim\/after\/plugin\/abolish.vim")$/;"	v
g:abolish_save_file	plugged/vim-abolish/plugin/abolish.vim	/^    let g:abolish_save_file = expand("~\/vimfiles\/after\/plugin\/abolish.vim")$/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette = {}$/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.accents = {$/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline = airline#themes#generate_color_map(s:R1, s:/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_error = [ s:error_fg[0] , s:error_bg/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_error_inactive = [ s:error_fg[0] , s/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_error_red = [ s:error_fg[0] , s:erro/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_term = [ s:term_fg[0] , s:term_bg[0]/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_warning = [ s:warning_fg[0] , s:warn/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_warning_inactive = [ s:warning_fg[0]/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline.airline_warning_red = [ s:warning_fg[0] , s:/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline_modified = deepcopy(g:airline#themes#everfor/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.commandline_modified.airline_c = [ s:commandline_mod_fg[/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.inactive = airline#themes#generate_color_map(s:IA1, s:IA/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.inactive.airline_term = [ s:inactive_mid_fg[0] , s:inact/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.inactive_modified = deepcopy(g:airline#themes#everforest/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.inactive_modified.airline_c = [ s:inactive_mod_fg[0] , s/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert = airline#themes#generate_color_map(s:I1, s:I2, s/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_error = [ s:error_fg[0] , s:error_bg[0] ,/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_error_inactive = [ s:error_fg[0] , s:erro/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_error_red = [ s:error_fg[0] , s:error_bg[/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_term = [ s:term_fg[0] , s:term_bg[0] , s:/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_warning = [ s:warning_fg[0] , s:warning_b/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_warning_inactive = [ s:warning_fg[0] , s:/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert.airline_warning_red = [ s:warning_fg[0] , s:warni/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert_modified = deepcopy(g:airline#themes#everforest#p/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.insert_modified.airline_c = [ s:insert_mod_fg[0] , s:ins/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal = airline#themes#generate_color_map(s:N1, s:N2, s/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_error = [ s:error_fg[0] , s:error_bg[0] ,/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_error_inactive = [ s:error_fg[0] , s:erro/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_error_red = [ s:error_fg[0] , s:error_bg[/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_term = [ s:term_fg[0] , s:term_bg[0] , s:/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_warning = [ s:warning_fg[0] , s:warning_b/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_warning_inactive = [ s:warning_fg[0] , s:/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal.airline_warning_red = [ s:warning_fg[0] , s:warni/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal_modified = deepcopy(g:airline#themes#everforest#p/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.normal_modified.airline_c = [ s:normal_mod_fg[0] , s:nor/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace = airline#themes#generate_color_map(s:R1, s:R2, /;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_error = [ s:error_fg[0] , s:error_bg[0] /;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_error_inactive = [ s:error_fg[0] , s:err/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_error_red = [ s:error_fg[0] , s:error_bg/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_term = [ s:term_fg[0] , s:term_bg[0] , s/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_warning = [ s:warning_fg[0] , s:warning_/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_warning_inactive = [ s:warning_fg[0] , s/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace.airline_warning_red = [ s:warning_fg[0] , s:warn/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace_modified = deepcopy(g:airline#themes#everforest#/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.replace_modified.airline_c = [ s:replace_mod_fg[0] , s:r/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline = {}$/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tab = [ s:tab_fg[0] , s:tab_bg[0] , s:ta/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tab_right = [ s:tab_fg[0] , s:tab_bg[0] /;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabfill = [ s:tab_mid_fg[0] , s:tab_mid_/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabhid = s:IA1$/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tablabel = [ s:tab_label_fg[0] , s:tab_l/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tablabel_right = [ s:tab_label_fg[0] , s/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabmod = [ s:tab_mod_fg[0] , s:tab_mod_b/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabmod_right = [ s:tab_mod_fg[0] , s:tab/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabsel = [ s:tab_sel_fg[0] , s:tab_sel_b/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabsel_right = [ s:tab_sel_fg[0] , s:tab/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.tabline.airline_tabtype = [ s:tab_type_fg[0] , s:tab_typ/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual = airline#themes#generate_color_map(s:V1, s:V2, s/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_error = [ s:error_fg[0] , s:error_bg[0] ,/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_error_inactive = [ s:error_fg[0] , s:erro/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_error_red = [ s:error_fg[0] , s:error_bg[/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_term = [ s:term_fg[0] , s:term_bg[0] , s:/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_warning = [ s:warning_fg[0] , s:warning_b/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_warning_inactive = [ s:warning_fg[0] , s:/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual.airline_warning_red = [ s:warning_fg[0] , s:warni/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual_modified = deepcopy(g:airline#themes#everforest#p/;"	v
g:airline#themes#everforest#palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let g:airline#themes#everforest#palette.visual_modified.airline_c = [ s:visual_mod_fg[0] , s:vis/;"	v
g:auto_save	plugged/vim-auto-save/plugin/AutoSave.vim	/^    let g:auto_save = 0$/;"	v
g:auto_save	plugged/vim-auto-save/plugin/AutoSave.vim	/^    let g:auto_save = 1$/;"	v
g:auto_save	plugged/vim-auto-save/plugin/AutoSave.vim	/^  let g:auto_save = 0$/;"	v
g:auto_save	vimrc	/^let g:auto_save = 1                     " autosave$/;"	v
g:auto_save_in_insert_mode	plugged/vim-auto-save/plugin/AutoSave.vim	/^  let g:auto_save_in_insert_mode = 1$/;"	v
g:auto_save_in_insert_mode	vimrc	/^let g:auto_save_in_insert_mode = 0      " only autosave after leaving insert$/;"	v
g:auto_save_loaded	plugged/vim-auto-save/plugin/AutoSave.vim	/^  let g:auto_save_loaded = 1$/;"	v
g:auto_save_no_updatetime	plugged/vim-auto-save/plugin/AutoSave.vim	/^  let g:auto_save_no_updatetime = 0$/;"	v
g:auto_save_silent	plugged/vim-auto-save/plugin/AutoSave.vim	/^  let g:auto_save_silent = 0$/;"	v
g:autoloaded_fugitive	plugged/vim-fugitive/autoload/fugitive.vim	/^let g:autoloaded_fugitive = 1$/;"	v
g:colors_name	plugged/everforest/colors/everforest.vim	/^let g:colors_name = 'everforest'$/;"	v
g:colors_name	plugged/papercolor-theme/colors/PaperColor.vim	/^let g:colors_name = "PaperColor"$/;"	v
g:colors_name	plugged/seoul256.vim/colors/seoul256-light.vim	/^    let g:colors_name = &background == 'dark' ? 'seoul256' : 'seoul256-light'$/;"	v
g:colors_name	plugged/seoul256.vim/colors/seoul256-light.vim	/^    let g:colors_name = 'seoul256'$/;"	v
g:colors_name	plugged/seoul256.vim/colors/seoul256.vim	/^let g:colors_name = 'seoul256'$/;"	v
g:completor_blacklist	plugged/completor.vim/plugin/completor.vim	/^let g:completor_blacklist = get(g:, 'completor_blacklist', s:default_blacklist)$/;"	v
g:completor_complete_options	plugged/completor.vim/plugin/completor.vim	/^let g:completor_complete_options = get(g:, 'completor_complete_options', 'menuone,noselect,previ/;"	v
g:completor_completion_delay	plugged/completor.vim/plugin/completor.vim	/^let g:completor_completion_delay = get(g:, 'completor_completion_delay', 80)$/;"	v
g:completor_def_split	plugged/completor.vim/plugin/completor.vim	/^let g:completor_def_split = get(g:, 'completor_def_split', '')$/;"	v
g:completor_doc_position	plugged/completor.vim/plugin/completor.vim	/^let g:completor_doc_position = get(g:, 'completor_doc_position', 'bottom')$/;"	v
g:completor_filename_completion_in_only_comment	plugged/completor.vim/plugin/completor.vim	/^let g:completor_filename_completion_in_only_comment = get(g:, 'completor_filename_completion_in_/;"	v
g:completor_filesize_limit	plugged/completor.vim/plugin/completor.vim	/^let g:completor_filesize_limit = get(g:, 'completor_filesize_limit', 1024) * 1024$/;"	v
g:completor_filetype_map	plugged/completor.vim/plugin/completor.vim	/^let g:completor_filetype_map = extend(s:default_type_map, get(g:, 'completor_filetype_map', {}))$/;"	v
g:completor_min_chars	plugged/completor.vim/plugin/completor.vim	/^let g:completor_min_chars = get(g:, 'completor_min_chars', 2)$/;"	v
g:completor_python_binary	vimrc	/^let g:completor_python_binary = '\/usr\/bin\/python3'$/;"	v
g:completor_refresh_always	plugged/completor.vim/plugin/completor.vim	/^let g:completor_refresh_always = get(g:, 'completor_refresh_always', 1)$/;"	v
g:completor_use_popup_window	plugged/completor.vim/plugin/completor.vim	/^let g:completor_use_popup_window = get(g:, 'completor_use_popup_window', 0)$/;"	v
g:cscope_maps_db_file	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^        let g:cscope_maps_db_file = a:tags_file$/;"	v
g:current_ulti_dict	plugged/ultisnips/autoload/UltiSnips.vim	/^    let g:current_ulti_dict = {}$/;"	v
g:current_ulti_dict_info	plugged/ultisnips/autoload/UltiSnips.vim	/^      let g:current_ulti_dict_info = {}$/;"	v
g:eelixir_default_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
g:eelixir_default_subtype	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^  let g:eelixir_default_subtype = "html"$/;"	v
g:elixir_indent_debug	plugged/splitjoin.vim/spec/support/vim-elixir/test.init.vim	/^let g:elixir_indent_debug=1$/;"	v
g:elixir_indent_max_lookbehind	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^  let g:elixir_indent_max_lookbehind = 30$/;"	v
g:elixir_use_markdown_for_docs	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/elixir.vim	/^  let g:elixir_use_markdown_for_docs = 0$/;"	v
g:everforest_loaded_file_types	plugged/everforest/colors/everforest.vim	/^let g:everforest_loaded_file_types = []$/;"	v
g:everforest_lsp_kind_color	plugged/everforest/colors/everforest.vim	/^let g:everforest_lsp_kind_color = [$/;"	v
g:fugitive_did_change_at	plugged/vim-fugitive/autoload/fugitive.vim	/^    let g:fugitive_did_change_at = reltime()$/;"	v
g:fugitive_event	plugged/vim-fugitive/autoload/fugitive.vim	/^      let g:fugitive_event = a:state.git_dir$/;"	v
g:fugitive_event	plugged/vim-fugitive/autoload/fugitive.vim	/^    let g:fugitive_event = dir$/;"	v
g:fugitive_result	plugged/vim-fugitive/autoload/fugitive.vim	/^      let g:fugitive_result = a:dir$/;"	v
g:fugitive_result	plugged/vim-fugitive/autoload/fugitive.vim	/^      let g:fugitive_result = a:state$/;"	v
g:fugitive_summary_format	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:fzf#vim#buffers	plugged/fzf.vim/plugin/fzf.vim	/^  let g:fzf#vim#buffers = {}$/;"	v
g:fzf_colors	plugged/everforest/colors/everforest.vim	/^let g:fzf_colors = {$/;"	v
g:gutentags_add_ctrlp_root_markers	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_auto_add_pycscope	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_auto_add_pycscope = 1$/;"	v
g:gutentags_background_update	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_build_inverted_index	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_build_inverted_index_maps	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^    let g:gutentags_cscope_build_inverted_index_maps = 0$/;"	v
g:gutentags_cscope_executable	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_cscope_executable_maps	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^    let g:gutentags_cscope_executable_maps = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:gutentags_enabled = 0$/;"	v
g:gutentags_enabled	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', $/;"	v
g:gutentags_fake	plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_fake = a:1$/;"	v
g:gutentags_fake	plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_fake = !g:gutentags_fake$/;"	v
g:gutentags_fake	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslc/;"	v
g:gutentags_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_pycscope_executable	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_pycscope_executable = 'pycscope'$/;"	v
g:gutentags_pyscopefile	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^    let g:gutentags_pyscopefile = 'pycscope.out'$/;"	v
g:gutentags_res_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_scopefile_maps	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^    let g:gutentags_scopefile_maps = 'cscope.out'$/;"	v
g:gutentags_script_ext	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^            let g:gutentags_trace = l:prev_trace$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = 1$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = a:1$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = l:trace_backup$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_trace = !g:gutentags_trace$/;"	v
g:gutentags_trace	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:indentLine_color_gui	plugged/everforest/colors/everforest.vim	/^  let g:indentLine_color_gui = s:palette.bg5[0]$/;"	v
g:indentLine_color_gui	plugged/everforest/colors/everforest.vim	/^  let g:indentLine_color_gui = s:palette.grey0[0]$/;"	v
g:indentLine_color_term	plugged/everforest/colors/everforest.vim	/^  let g:indentLine_color_term = s:palette.bg5[1]$/;"	v
g:indentLine_color_term	plugged/everforest/colors/everforest.vim	/^  let g:indentLine_color_term = s:palette.grey0[1]$/;"	v
g:indent_guides_auto_colors	plugged/seoul256.vim/colors/seoul256.vim	/^let g:indent_guides_auto_colors = 0$/;"	v
g:io_fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^let g:io_fugitive = {$/;"	v
g:lastplace_ignore	plugged/vim-lastplace/plugin/vim-lastplace.vim	/^    let g:lastplace_ignore = "gitcommit,gitrebase,hgcommit,svn,xxd"$/;"	v
g:lastplace_ignore_buftype	plugged/vim-lastplace/plugin/vim-lastplace.vim	/^    let g:lastplace_ignore_buftype = "help,nofile,quickfix"$/;"	v
g:lastplace_open_folds	plugged/vim-lastplace/plugin/vim-lastplace.vim	/^    let g:lastplace_open_folds = 1$/;"	v
g:lightline#colorscheme#everforest#palette	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let g:lightline#colorscheme#everforest#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:limelight_conceal_ctermfg	plugged/everforest/colors/everforest.vim	/^let g:limelight_conceal_ctermfg = s:palette.grey0[1]$/;"	v
g:limelight_conceal_guifg	plugged/everforest/colors/everforest.vim	/^let g:limelight_conceal_guifg = s:palette.grey0[0]$/;"	v
g:loaded_abolish	plugged/vim-abolish/plugin/abolish.vim	/^let g:loaded_abolish = 1$/;"	v
g:loaded_commentary	plugged/vim-commentary/plugin/commentary.vim	/^let g:loaded_commentary = 1$/;"	v
g:loaded_completor_plugin	plugged/completor.vim/plugin/completor.vim	/^let g:loaded_completor_plugin = 1$/;"	v
g:loaded_fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_fzf	plugged/fzf/plugin/fzf.vim	/^let g:loaded_fzf = 1$/;"	v
g:loaded_fzf_vim	plugged/fzf.vim/plugin/fzf.vim	/^let g:loaded_fzf_vim = 1$/;"	v
g:loaded_gutentags	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_matchtagalways	plugged/MatchTagAlways/plugin/MatchTagAlways.vim	/^let g:loaded_matchtagalways = 1$/;"	v
g:loaded_plug	autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_plug	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_plug	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let g:loaded_plug = 1$/;"	v
g:loaded_repeat	plugged/vim-repeat/autoload/repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:loaded_rust_vim	plugged/splitjoin.vim/spec/support/rust.vim/plugin/rust.vim	/^let g:loaded_rust_vim = 1$/;"	v
g:loaded_rust_vim_plugin_cargo	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^let g:loaded_rust_vim_plugin_cargo = 1$/;"	v
g:loaded_splitjoin	plugged/splitjoin.vim/plugin/splitjoin.vim	/^let g:loaded_splitjoin = '1.2.0' " version number$/;"	v
g:loaded_surround	plugged/vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_syntastic_rust_cargo_checker	plugged/splitjoin.vim/spec/support/rust.vim/syntax_checkers/rust/cargo.vim	/^let g:loaded_syntastic_rust_cargo_checker = 1$/;"	v
g:loaded_syntastic_rust_rustc_checker	plugged/splitjoin.vim/spec/support/rust.vim/syntax_checkers/rust/rustc.vim	/^let g:loaded_syntastic_rust_rustc_checker = 1$/;"	v
g:loaded_validator_plugin	plugged/validator.vim/plugin/validator.vim	/^let g:loaded_validator_plugin = 1$/;"	v
g:loaded_vinegar	plugged/vim-vinegar/plugin/vinegar.vim	/^let g:loaded_vinegar = 1$/;"	v
g:markdown_fenced_languages	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^    let g:markdown_fenced_languages = []$/;"	v
g:mta_filetypes	plugged/MatchTagAlways/plugin/MatchTagAlways.vim	/^let g:mta_filetypes =$/;"	v
g:mta_set_default_matchtag_color	plugged/MatchTagAlways/plugin/MatchTagAlways.vim	/^let g:mta_set_default_matchtag_color =$/;"	v
g:mta_use_matchparen_group	plugged/MatchTagAlways/plugin/MatchTagAlways.vim	/^let g:mta_use_matchparen_group =$/;"	v
g:netrw_banner	plugged/vim-vinegar/plugin/vinegar.vim	/^  let g:netrw_banner = 0$/;"	v
g:netrw_list_hide	plugged/vim-vinegar/plugin/vinegar.vim	/^    let g:netrw_list_hide = g:netrw_list_hide[0 : -strlen(df)-1]$/;"	v
g:netrw_list_hide	plugged/vim-vinegar/plugin/vinegar.vim	/^let g:netrw_list_hide =$/;"	v
g:netrw_sort_sequence	plugged/vim-vinegar/plugin/vinegar.vim	/^let g:netrw_sort_sequence = s:sort_sequence(&suffixes)$/;"	v
g:niji_dark_colours	plugged/everforest/colors/everforest.vim	/^let g:niji_dark_colours = g:rbpt_colorpairs$/;"	v
g:niji_light_colours	plugged/everforest/colors/everforest.vim	/^let g:niji_light_colours = g:rbpt_colorpairs$/;"	v
g:pandoc#syntax#codeblocks#embeds#langs	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^let g:pandoc#syntax#codeblocks#embeds#langs = get(g:, 'pandoc#syntax#codeblocks#embeds#langs', [/;"	v
g:plug_home	autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plug_home	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plug_home	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  let g:plug_home = home$/;"	v
g:plugs	autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^    let g:plugs[name] = spec$/;"	v
g:plugs	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  let g:plugs = {}$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:plugs_order	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:plugs_order	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  let g:plugs_order = []$/;"	v
g:plugs_order	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  let g:plugs_order = get(g:, 'plugs_order', keys(g:plugs))$/;"	v
g:r_indent_align_args	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^let g:r_indent_align_args     = get(g:, 'r_indent_align_args',      1)$/;"	v
g:r_indent_comment_column	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^let g:r_indent_comment_column = get(g:, 'r_indent_comment_column', 40)$/;"	v
g:r_indent_ess_comments	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^let g:r_indent_ess_comments   = get(g:, 'r_indent_ess_comments',    0)$/;"	v
g:r_indent_ess_compatible	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^let g:r_indent_ess_compatible = get(g:, 'r_indent_ess_compatible',  0)$/;"	v
g:r_indent_op_pattern	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^let g:r_indent_op_pattern     = get(g:, 'r_indent_op_pattern',$/;"	v
g:r_syntax_fun_pattern	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/r.vim	/^    let g:r_syntax_fun_pattern = 0$/;"	v
g:r_syntax_fun_pattern	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/r.vim	/^    let g:r_syntax_fun_pattern = 1$/;"	v
g:r_syntax_hl_roxygen	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/r.vim	/^  let g:r_syntax_hl_roxygen = g:r_hl_roxygen$/;"	v
g:r_syntax_hl_roxygen	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/r.vim	/^let g:r_syntax_hl_roxygen = get(g:, 'r_syntax_hl_roxygen', 1)$/;"	v
g:r_syntax_minlines	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/r.vim	/^  let g:r_syntax_minlines = g:r_syn_minlines$/;"	v
g:rainbow_conf	plugged/everforest/colors/everforest.vim	/^  let g:rainbow_conf = {}$/;"	v
g:rainbow_conf	plugged/everforest/colors/everforest.vim	/^  let g:rainbow_conf['ctermfgs'] = g:rainbow_ctermfgs$/;"	v
g:rainbow_conf	plugged/everforest/colors/everforest.vim	/^  let g:rainbow_conf['guifgs'] = g:rainbow_guifgs$/;"	v
g:rainbow_ctermfgs	plugged/everforest/colors/everforest.vim	/^let g:rainbow_ctermfgs = [ '166', 'red', 'magenta', 'blue' ]$/;"	v
g:rainbow_guifgs	plugged/everforest/colors/everforest.vim	/^let g:rainbow_guifgs = [ s:palette.orange[0], s:palette.red[0], s:palette.purple[0], s:palette.b/;"	v
g:rbpt_colorpairs	plugged/everforest/colors/everforest.vim	/^  let g:rbpt_colorpairs = [['blue', s:palette.blue[0]], ['magenta', s:palette.purple[0]],$/;"	v
g:repeat_count	plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_count = a:0 ? a:1 : v:count$/;"	v
g:repeat_reg	plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_reg = [a:sequence, a:register]$/;"	v
g:repeat_reg	plugged/vim-repeat/autoload/repeat.vim	/^let g:repeat_reg = ['', '']$/;"	v
g:repeat_sequence	plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_sequence = a:sequence$/;"	v
g:repeat_tick	plugged/vim-repeat/autoload/repeat.vim	/^        let g:repeat_tick = b:changedtick$/;"	v
g:repeat_tick	plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_tick = -1$/;"	v
g:repeat_tick	plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_tick = b:changedtick$/;"	v
g:repeat_tick	plugged/vim-repeat/autoload/repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:rmd_fenced_languages	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^    let g:rmd_fenced_languages = deepcopy(g:markdown_fenced_languages)$/;"	v
g:rmd_fenced_languages	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^  let g:rmd_fenced_languages = ['r']$/;"	v
g:rmd_syn_hl_chunk	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^let g:rmd_syn_hl_chunk = get(g:, 'g:rmd_syn_hl_chunk', 0)$/;"	v
g:rmd_syn_hl_citations	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^let g:rmd_syn_hl_citations = get(g:, 'rmd_syn_hl_citations', 1)$/;"	v
g:rmd_syn_hl_yaml	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^let g:rmd_syn_hl_yaml = get(g:, 'rmd_syn_hl_yaml', 1)$/;"	v
g:rustfmt_autosave	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^    let g:rustfmt_autosave = 0$/;"	v
g:rustfmt_command	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^    let g:rustfmt_command = "rustfmt"$/;"	v
g:rustfmt_emit_files	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^    let g:rustfmt_emit_files = s:rustfmt_version >= "0.8.2"$/;"	v
g:rustfmt_fail_silently	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^    let g:rustfmt_fail_silently = 0$/;"	v
g:rustfmt_file_lines	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^    let g:rustfmt_file_lines = s:rustfmt_help =~# "--file-lines JSON"$/;"	v
g:rustfmt_options	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^    let g:rustfmt_options = ""$/;"	v
g:seoul256_background	plugged/seoul256.vim/colors/seoul256-light.vim	/^      let g:seoul256_background = s:backup$/;"	v
g:seoul256_background	plugged/seoul256.vim/colors/seoul256-light.vim	/^      let g:seoul256_background = s:custom_bg$/;"	v
g:seoul256_background	vimrc	/^let g:seoul256_background = 254$/;"	v
g:seoul256_current_bg	plugged/seoul256.vim/colors/seoul256.vim	/^let g:seoul256_current_bg = [s:dark_bg, s:light_bg][s:style_idx]$/;"	v
g:seoul256_current_fg	plugged/seoul256.vim/colors/seoul256.vim	/^let g:seoul256_current_fg = [s:dark_fg, s:light_fg][s:style_idx]$/;"	v
g:splitjoin_default_settings	plugged/splitjoin.vim/plugin/splitjoin.vim	/^let g:splitjoin_default_settings = {$/;"	v
g:splitjoin_join_mapping	plugged/splitjoin.vim/plugin/splitjoin.vim	/^  let g:splitjoin_join_mapping = 'gJ'$/;"	v
g:splitjoin_split_mapping	plugged/splitjoin.vim/plugin/splitjoin.vim	/^  let g:splitjoin_split_mapping = 'gS'$/;"	v
g:syntastic_extra_filetypes	plugged/splitjoin.vim/spec/support/rust.vim/plugin/rust.vim	/^    let g:syntastic_extra_filetypes = ['rust']$/;"	v
g:syntastic_rust_cargo_fname	plugged/splitjoin.vim/spec/support/rust.vim/syntax_checkers/rust/cargo.vim	/^let g:syntastic_rust_cargo_fname = ""$/;"	v
g:syntastic_rust_checkers	plugged/splitjoin.vim/spec/support/rust.vim/plugin/rust.vim	/^    let g:syntastic_rust_checkers = ['cargo']$/;"	v
g:tabular_default_format	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^  let g:tabular_default_format = "l1"$/;"	v
g:tabular_loaded	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^let g:tabular_loaded = 1$/;"	v
g:tagbar_type_rust	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust/tagbar.vim	/^    let g:tagbar_type_rust = {$/;"	v
g:tagbar_type_rust	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust/tagbar.vim	/^    let g:tagbar_type_rust.deffile = expand('<sfile>:p:h:h:h') . '\/ctags\/rust.ctags'$/;"	v
g:tagbar_type_snippets	plugged/ultisnips/ftplugin/snippets.vim	/^let g:tagbar_type_snippets = {$/;"	v
g:terminal_ansi_colors	plugged/everforest/colors/everforest.vim	/^    let g:terminal_ansi_colors = [s:terminal.black[0], s:terminal.red[0], s:terminal.green[0], s/;"	v
g:terminal_ansi_colors	plugged/papercolor-theme/colors/PaperColor.vim	/^    let g:terminal_ansi_colors = [color00[0], color01[0], color02[0], color03[0],$/;"	v
g:terminal_color_0	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_0 = s:terminal.black[0]$/;"	v
g:terminal_color_0	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_0  = color00[0]$/;"	v
g:terminal_color_1	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_1 = s:terminal.red[0]$/;"	v
g:terminal_color_1	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_1  = color01[0]$/;"	v
g:terminal_color_10	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_10 = s:terminal.green[0]$/;"	v
g:terminal_color_10	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_10 = color10[0]$/;"	v
g:terminal_color_11	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_11 = s:terminal.yellow[0]$/;"	v
g:terminal_color_11	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_11 = color11[0]$/;"	v
g:terminal_color_12	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_12 = s:terminal.blue[0]$/;"	v
g:terminal_color_12	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_12 = color12[0]$/;"	v
g:terminal_color_13	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_13 = s:terminal.purple[0]$/;"	v
g:terminal_color_13	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_13 = color13[0]$/;"	v
g:terminal_color_14	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_14 = s:terminal.cyan[0]$/;"	v
g:terminal_color_14	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_14 = color14[0]$/;"	v
g:terminal_color_15	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_15 = s:terminal.white[0]$/;"	v
g:terminal_color_15	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_15 = color15[0]$/;"	v
g:terminal_color_2	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_2 = s:terminal.green[0]$/;"	v
g:terminal_color_2	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_2  = color02[0]$/;"	v
g:terminal_color_3	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_3 = s:terminal.yellow[0]$/;"	v
g:terminal_color_3	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_3  = color03[0]$/;"	v
g:terminal_color_4	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_4 = s:terminal.blue[0]$/;"	v
g:terminal_color_4	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_4  = color04[0]$/;"	v
g:terminal_color_5	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_5 = s:terminal.purple[0]$/;"	v
g:terminal_color_5	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_5  = color05[0]$/;"	v
g:terminal_color_6	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_6 = s:terminal.cyan[0]$/;"	v
g:terminal_color_6	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_6  = color06[0]$/;"	v
g:terminal_color_7	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_7 = s:terminal.white[0]$/;"	v
g:terminal_color_7	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_7  = color07[0]$/;"	v
g:terminal_color_8	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_8 = s:terminal.black[0]$/;"	v
g:terminal_color_8	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_8  = color08[0]$/;"	v
g:terminal_color_9	plugged/everforest/colors/everforest.vim	/^    let g:terminal_color_9 = s:terminal.red[0]$/;"	v
g:terminal_color_9	plugged/papercolor-theme/colors/PaperColor.vim	/^  let g:terminal_color_9  = color09[0]$/;"	v
g:validator_auto_open_quickfix	plugged/validator.vim/plugin/validator.vim	/^let g:validator_auto_open_quickfix = get(g:, 'validator_auto_open_quickfix', 0)$/;"	v
g:validator_css_checkers	vimrc	/^let g:validator_css_checkers = ['csslint']$/;"	v
g:validator_debug	plugged/validator.vim/plugin/validator.vim	/^let g:validator_debug = get(g:, 'validator_debug', 0)$/;"	v
g:validator_error_msg_format	plugged/validator.vim/plugin/validator.vim	/^let g:validator_error_msg_format = get(g:, 'validator_error_msg_format', '● %d\/%d issues')$/;"	v
g:validator_error_symbol	plugged/validator.vim/plugin/validator.vim	/^let g:validator_error_symbol = get(g:, 'validator_error_symbol', s:validator_symbol)$/;"	v
g:validator_filetype_map	plugged/validator.vim/plugin/validator.vim	/^let g:validator_filetype_map = get(g:, 'validator_filetype_map', {})$/;"	v
g:validator_highlight_message	plugged/validator.vim/plugin/validator.vim	/^let g:validator_highlight_message = get(g:, 'validator_highlight_message', 0)$/;"	v
g:validator_ignore	plugged/validator.vim/plugin/validator.vim	/^let g:validator_ignore = extend(get(g:, 'validator_ignore', []), s:ignores)$/;"	v
g:validator_javascript_checkers	vimrc	/^let g:validator_javascript_checkers = ['eslint']$/;"	v
g:validator_json_checkers	vimrc	/^let g:validator_json_checkers = ['jsonlint']$/;"	v
g:validator_permament_sign	plugged/validator.vim/plugin/validator.vim	/^let g:validator_permament_sign = get(g:, 'validator_permament_sign', 0)$/;"	v
g:validator_python_checkers	vimrc	/^let g:validator_python_checkers = ['flake8']$/;"	v
g:validator_style_error_symbol	plugged/validator.vim/plugin/validator.vim	/^let g:validator_style_error_symbol = get(g:, 'validator_style_error_symbol', g:validator_error_s/;"	v
g:validator_style_warning_symbol	plugged/validator.vim/plugin/validator.vim	/^let g:validator_style_warning_symbol = get(g:, 'validator_style_warning_symbol', g:validator_war/;"	v
g:validator_use_popup_window	plugged/validator.vim/plugin/validator.vim	/^let g:validator_use_popup_window = get(g:, 'validator_use_popup_window', 0)$/;"	v
g:validator_vim_checkers	vimrc	/^let g:validator_vim_checkers = ['vint']$/;"	v
g:validator_warning_symbol	plugged/validator.vim/plugin/validator.vim	/^let g:validator_warning_symbol = get(g:, 'validator_warning_symbol', s:validator_symbol)$/;"	v
g:virtual_scriptnames	plugged/vim-fugitive/autoload/fugitive.vim	/^    let g:virtual_scriptnames = {}$/;"	v
g:virtual_scriptnames	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:virtual_scriptnames[temp] = amatch$/;"	v
gS	plugged/vim-surround/plugin/surround.vim	/^  xmap gS  <Plug>VgSurround$/;"	m
gather_candidates	plugged/ultisnips/rplugin/python3/deoplete/sources/ultisnips.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gc	plugged/vim-commentary/plugin/commentary.vim	/^  nmap gc  <Plug>Commentary$/;"	m
gc	plugged/vim-commentary/plugin/commentary.vim	/^  omap gc  <Plug>Commentary$/;"	m
gc	plugged/vim-commentary/plugin/commentary.vim	/^  xmap gc  <Plug>Commentary$/;"	m
gcc	plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcc <Plug>CommentaryLine$/;"	m
gcu	plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcu <Plug>Commentary<Plug>Commentary$/;"	m
gen	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^  def gen( column ):$/;"	f	function:LocationsOfEnclosingTags_CursorInTagFull_test	file:
gen	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^  def gen( column ):$/;"	f	function:LocationsOfEnclosingTags_UnbalancedOpeningTagFull_test	file:
genConfig	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^function genConfig() {$/;"	f
gen_entry	plugged/completor.vim/pythonx/completers/common/filename.py	/^def gen_entry(pat, dirname, basename, offset):$/;"	f
gen_hover_doc	plugged/completor.vim/pythonx/completers/lsp/action.py	/^def gen_hover_doc(ft, value):$/;"	f
gen_jump_list	plugged/completor.vim/pythonx/completers/lsp/action.py	/^def gen_jump_list(name, data):$/;"	f
gen_position_request	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def gen_position_request(self, category):$/;"	m	class:Lsp
gen_request	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def gen_request(self, action, args):$/;"	m	class:Lsp
gen_request	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def gen_request(self, params=None):$/;"	m	class:Base
gen_request	plugged/completor.vim/pythonx/completor/__init__.py	/^    def gen_request(self, action=b'complete', args=None):$/;"	m	class:Completor
gen_request	plugged/completor.vim/pythonx/completor/api.py	/^def gen_request(args):$/;"	f
gen_symbol_request	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def gen_symbol_request(self, word=None):$/;"	m	class:Lsp
gen_tests	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def gen_tests(method, str)$/;"	f
gen_uri	plugged/completor.vim/pythonx/completers/lsp/utils.py	/^def gen_uri(path):$/;"	f
generate	plugged/fzf/Makefile	/^generate:$/;"	t
geom	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    geom <- points() +$/;"	g
geom	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    geom <- points() +$/;"	g
get	plugged/completor.vim/pythonx/completor/__init__.py	/^def get(filetype, ft=None, input_data=None):$/;"	f
get	plugged/completor.vim/pythonx/completor/_vim.py	/^        def get(self, *args, **kwargs):$/;"	m	class:_patch_nvim.vars_wrapper
getBytes	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytes() ([]byte, error) {$/;"	f	struct:tui.LightRenderer	typeref:typename:([]byte, error)
getBytesInternal	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytesInternal(buffer []byte, nonblock bool) ([]byte, error) {$/;"	f	struct:tui.LightRenderer	typeref:typename:([]byte, error)
getEnv	plugged/fzf/src/tui/light.go	/^func getEnv(name string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
getHandler	plugged/fzf/src/server.go	/^	getHandler    func(getParams) string$/;"	m	struct:fzf.httpServer	typeref:typename:func(getParams) string
getParams	plugged/fzf/src/server.go	/^type getParams struct {$/;"	s	package:fzf
getRegex	plugged/fzf/src/server.go	/^var getRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
getScrollbar	plugged/fzf/src/terminal.go	/^func (t *Terminal) getScrollbar() (int, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(int, int)
getScrollbar	plugged/fzf/src/terminal.go	/^func getScrollbar(perLine int, total int, height int, offset int) (int, int) {$/;"	f	package:fzf	typeref:typename:(int, int)
get_admission_tables	plugged/vim-coiled-snake/tests/issues/test_12.py	/^def get_admission_tables($/;"	f	typeref:typename:Tuple[pd.DataFrame,pd.DataFrame]
get_buffer_data	plugged/ultisnips/test/vim_interface.py	/^    def get_buffer_data(self):$/;"	m	class:VimInterface
get_buffer_filetypes	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def get_buffer_filetypes(self):$/;"	m	class:SnippetManager
get_checkers	plugged/validator.vim/pythonx/validator/api.py	/^def get_checkers(args):$/;"	f
get_clear_priority	plugged/ultisnips/pythonx/UltiSnips/snippet/source/base.py	/^    def get_clear_priority(self, filetypes):$/;"	m	class:SnippetSource
get_cleared	plugged/ultisnips/pythonx/UltiSnips/snippet/source/base.py	/^    def get_cleared(self, filetypes):$/;"	m	class:SnippetSource
get_cmd_info	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^    def get_cmd_info(self, action):$/;"	m	class:Clang
get_cmd_info	plugged/completor.vim/pythonx/completers/go.py	/^    def get_cmd_info(self, action):$/;"	m	class:Go
get_cmd_info	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def get_cmd_info(self, action):$/;"	m	class:Lsp
get_cmd_info	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    def get_cmd_info(self, action):$/;"	m	class:Jedi
get_cmd_info	plugged/completor.vim/pythonx/completers/rust.py	/^    def get_cmd_info(self, action):$/;"	m	class:Racer
get_cmd_info	plugged/completor.vim/pythonx/completor/__init__.py	/^    def get_cmd_info(self, action):$/;"	m	class:Completor
get_completer	plugged/completor.vim/pythonx/completor/api.py	/^def get_completer(args):$/;"	f
get_completion_word	plugged/completor.vim/pythonx/completers/lsp/action.py	/^def get_completion_word(item, insert_text):$/;"	f
get_current_buffer_encoding	plugged/completor.vim/pythonx/completers/common/buffer.py	/^from completor import Completor, vim, LIMIT, get_encoding as get_current_buffer_encoding$/;"	x	nameref:unknown:get_encoding
get_current_completer	plugged/completor.vim/pythonx/completor/__init__.py	/^def get_current_completer():$/;"	f
get_cursor_pos	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def get_cursor_pos():$/;"	f
get_deep_extends	plugged/ultisnips/pythonx/UltiSnips/snippet/source/base.py	/^    def get_deep_extends(self, base_filetypes):$/;"	m	class:SnippetSource
get_dot_vim	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def get_dot_vim():$/;"	f
get_encoding	plugged/completor.vim/pythonx/completers/common/buffer.py	/^def get_encoding(nr):$/;"	f
get_encoding	plugged/completor.vim/pythonx/completor/__init__.py	/^def get_encoding():$/;"	f
get_failure_line	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def get_failure_line(self):$/;"	m	class:TextLogError
get_host_port	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^    def get_host_port(host=None, port=None):$/;"	m	class:RemotePDB
get_manual_classification_line	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def get_manual_classification_line(self):$/;"	m	class:Job
get_mark_pos	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def get_mark_pos(name):$/;"	f
get_matching_snippets	plugged/ultisnips/pythonx/UltiSnips/snippet/source/snippet_dictionary.py	/^    def get_matching_snippets($/;"	m	class:SnippetDictionary
get_offset	plugged/completor.vim/pythonx/completers/go.py	/^    def get_offset(self):$/;"	m	class:Go
get_option	plugged/completor.vim/pythonx/completor/__init__.py	/^    def get_option(key):$/;"	m	class:Completor
get_option_collection_map	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def get_option_collection_map(self, options_as_list=False):$/;"	m	class:OptionCollectionManager
get_platform_option	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def get_platform_option(self, option_collection_map=None):$/;"	m	class:Job
get_snippets	plugged/ultisnips/pythonx/UltiSnips/snippet/source/base.py	/^    def get_snippets($/;"	m	class:SnippetSource
get_start_column	plugged/completor.vim/pythonx/completor/api.py	/^def get_start_column(args):$/;"	f
get_status	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def get_status(self):$/;"	m	class:Push
get_tabstops	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^    def get_tabstops(self):$/;"	m	class:SnippetInstance
get_token_path	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^def get_token_path(line, column, word):$/;"	f
get_type	plugged/validator.vim/pythonx/validator/__init__.py	/^def get_type(msg):$/;"	f
get_version	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def get_version(self, f):$/;"	m	class:Lsp
get_vim_var	plugged/validator.vim/pythonx/validator/utils.py	/^def get_vim_var(name, default=None, unicode=False):$/;"	f
get_word	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^def get_word(text):$/;"	f
getch	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(int, bool)
getch	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(int, bool)
getftime	plugged/completor.vim/pythonx/completers/common/buffer.py	/^def getftime(nr):$/;"	f
give	plugged/fzf/src/terminal_test.go	/^	give$/;"	M	struct:fzf.testCase	typeref:typename:give
give	plugged/fzf/src/terminal_test.go	/^type give struct {$/;"	s	package:fzf
glob	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^var glob = require('glob');$/;"	v
go	plugged/completor.vim/README.md	/^#### go$/;"	t	section:Completor""Completers
go	plugged/fzf/test/test_go.rb	/^  def go(args)$/;"	f	class:Tmux
go	plugged/splitjoin.vim/spec/plugin/go_spec.rb	/^describe "go" do$/;"	d
greet	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^    greet = function() {$/;"	m	class:Person	constructor:function
group	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^def group(data, condition):$/;"	f
group	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    group <- by(year, month, day) %>%$/;"	g
group	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    group <- by(year, month, day) %>%$/;"	g
guess	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      guess: false,$/;"	p	class:complete.query
guess_edit	plugged/ultisnips/pythonx/UltiSnips/diff.py	/^def guess_edit(initial_line, last_text, current_text, vim_state):$/;"	f
guid	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    guid = models.CharField(max_length=50, unique=True)$/;"	v	class:Job
gutentags#add_job	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#cscope_maps#generate	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^function! gutentags#cscope_maps#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope_maps#init	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^function! gutentags#cscope_maps#init(project_root) abort$/;"	f
gutentags#cscope_maps#on_job_exit	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^function! gutentags#cscope_maps#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_get_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_stderr_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
gutentags#default_stdout_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#error	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#on_vim_leave	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave() abort$/;"	f
gutentags#on_vim_leave_pre	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
gutentags#pycscope#generate	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#pycscope#init	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#init(project_root) abort$/;"	f
gutentags#pycscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^function! gutentags#pycscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#remove_job	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
hair	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^    hair = NULL,$/;"	f	class:Person
haml	plugged/splitjoin.vim/spec/plugin/haml_spec.rb	/^describe "haml" do$/;"	d
handleHttpRequest	plugged/fzf/src/server.go	/^func (server *httpServer) handleHttpRequest(conn net.Conn) string {$/;"	f	struct:fzf.httpServer	typeref:typename:string
handle_action	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/common.py	/^def handle_action(head, tail, line_index):$/;"	f
handle_call	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def handle_call({:notify, event}, _from, state) do$/;"	f	module:Broadcaster	access:public
handle_call	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def handle_call({:notify, event}, from, {queue, pending_demand}) do$/;"	f	module:QueueBroadcaster	access:public
handle_call	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @callback handle_call(request :: term, from :: GenServer.from, state :: term) ::$/;"	c	module:RateLimiter
handle_call	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/def_spec.rb	/^    def handle_call({:release_lock, key}, _from, state) do$/;"	f
handle_call	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/keyword_spec.rb	/^  def handle_call({:get_in_line_for_lock, key}, from, state) do$/;"	f
handle_call	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/variable_spec.rb	/^      def handle_call(:pop, _from, [h|stack]) do$/;"	f
handle_call	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/variable_spec.rb	/^      def handle_call(:pop,$/;"	f
handle_call	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/variable_spec.rb	/^    def handle_call(:pop)$/;"	f
handle_cancel	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def handle_cancel(_, from, producers) do$/;"	f	module:RateLimiter	access:public
handle_cancel	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @callback handle_cancel(cancellation_reason :: {:cancel | :down, reason :: term}, from, state /;"	c	module:RateLimiter
handle_cast	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @callback handle_cast(request :: term, state :: term) ::$/;"	c	module:RateLimiter
handle_context	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/common.py	/^def handle_context(tail, line_index):$/;"	f
handle_demand	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def handle_demand(_demand, state) do$/;"	f	module:Broadcaster	access:public
handle_demand	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def handle_demand(demand, counter) when demand > 0 do$/;"	f	module:A	access:public
handle_demand	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def handle_demand(incoming_demand, {queue, pending_demand}) do$/;"	f	module:QueueBroadcaster	access:public
handle_demand	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^      def handle_demand(demand, state) do$/;"	f	module:RateLimiter	access:public
handle_demand	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @callback handle_demand(demand :: pos_integer, state :: term) ::$/;"	c	module:RateLimiter
handle_events	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def handle_events(events, _from, number) do$/;"	f	module:B	access:public
handle_events	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def handle_events(events, _from, state) do$/;"	f	module:C	access:public
handle_events	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def handle_events(events, _from, state) do$/;"	f	module:Printer	access:public
handle_events	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def handle_events(events, from, producers) do$/;"	f	module:RateLimiter	access:public
handle_events	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @callback handle_events(events :: [event], from, state :: term) ::$/;"	c	module:RateLimiter
handle_extends	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/common.py	/^def handle_extends(tail, line_index):$/;"	f
handle_info	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def handle_info({:ask, from}, producers) do$/;"	f	module:RateLimiter	access:public
handle_info	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @callback handle_info(message :: term, state :: term) ::$/;"	c	module:RateLimiter
handle_info	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/blocks_spec.rb	/^  def handle_info(:tick, state = %{policy_iteration: []}) do$/;"	f	method:name.name.f.f.hello
handle_stream	plugged/completor.vim/pythonx/completor/__init__.py	/^    def handle_stream(self, name, action, msg):$/;"	m	class:Completor
handle_subscribe	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def handle_subscribe(:producer, opts, from, producers) do$/;"	f	module:RateLimiter	access:public
handle_subscribe	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^      def handle_subscribe(:producer, _options, from, state) do$/;"	f	module:RateLimiter	access:public
handle_subscribe	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @callback handle_subscribe(producer_or_consumer :: :producer | :consumer, options, from, state/;"	c	module:RateLimiter
handlebars	plugged/splitjoin.vim/spec/plugin/handlebars_spec.rb	/^describe "handlebars" do$/;"	d
handler	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^handler = logging.FileHandler(log_file, delay=1)$/;"	v
handler	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    structure(list(name = name, exit = NULL, handler = handler,$/;"	n	list:makeRestart.anonListb1d136150307
handler	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    structure(list(name = name, exit = NULL, handler = handler,$/;"	n	list:makeRestart.anonListe36e773c0307
hasBar	plugged/fzf/src/terminal.go	/^	hasBar    bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
hasFocusActions	plugged/fzf/src/terminal.go	/^	hasFocusActions    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hasLoadActions	plugged/fzf/src/terminal.go	/^	hasLoadActions     bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hasPreviewFlags	plugged/fzf/src/terminal.go	/^func hasPreviewFlags(template string) (slot bool, plus bool, forceUpdate bool) {$/;"	f	package:fzf	typeref:typename:(slot bool, plus bool, forceUpdate bool)
hasPreviewWindow	plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewWindow() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasPreviewer	plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewer() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasResizeActions	plugged/fzf/src/terminal.go	/^	hasResizeActions   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hasResultActions	plugged/fzf/src/terminal.go	/^	hasResultActions   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hasStartActions	plugged/fzf/src/terminal.go	/^	hasStartActions    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
has_neoinclude	plugged/completor.vim/pythonx/completers/common/neoinclude.py	/^    def has_neoinclude(self):$/;"	m	class:Neoinclude
has_next_tab	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^    def has_next_tab(self, jump_direction: JumpDirection):$/;"	m	class:SnippetInstance
has_omnifunc	plugged/completor.vim/pythonx/completers/common/omni.py	/^    def has_omnifunc(self, ft):$/;"	m	class:Omni
has_option	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def has_option(self, opt):$/;"	m	class:SnippetDefinition
has_version	plugged/ultisnips/test/vim_interface.py	/^    def has_version(self, major, minor, patchlevel):$/;"	m	class:VimInterface
hashes	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "hashes" do$/;"	d
head_tail	plugged/ultisnips/pythonx/UltiSnips/text.py	/^def head_tail(line):$/;"	f
header	plugged/fzf/src/terminal.go	/^	header             []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
header0	plugged/fzf/src/terminal.go	/^	header0            []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
headerFirst	plugged/fzf/src/terminal.go	/^	headerFirst        bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
headerLines	plugged/fzf/src/options.go	/^	headerLines int$/;"	m	struct:fzf.previewOpts	typeref:typename:int
headerLines	plugged/fzf/src/terminal.go	/^	headerLines        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
headerVisible	plugged/fzf/src/terminal.go	/^	headerVisible      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
height	plugged/fzf/src/options.go	/^	height   sizeSpec$/;"	m	struct:fzf.tmuxOptions	typeref:typename:sizeSpec
height	plugged/fzf/src/tui/light.go	/^	height        int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
height	plugged/fzf/src/tui/light.go	/^	height   int$/;"	m	struct:tui.LightWindow	typeref:typename:int
height	plugged/fzf/src/tui/tcell.go	/^	height      int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
heightSpec	plugged/fzf/src/options.go	/^type heightSpec struct {$/;"	s	package:fzf
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^      def hello do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def hello do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/binary_operator_spec.rb	/^  def hello do$/;"	f
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/binary_operator_spec.rb	/^  def hello do$/;"	f	method:hello
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/blocks_spec.rb	/^    def hello do$/;"	f	method:name.name.f.f
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/def_spec.rb	/^  def hello do$/;"	f	method:handle_call
hello	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/pipeline_spec.rb	/^  def hello do$/;"	f	method:test.test.build_command.build_command
help	plugged/fzf/bin/fzf-tmux	/^help() {$/;"	f
help	plugged/fzf/install	/^help() {$/;"	f
help	plugged/fzf/uninstall	/^help() {$/;"	f
heredoc	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/doc_spec.rb	/^  describe 'heredoc' do$/;"	d
heredoc	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/strings_spec.rb	/^  describe 'heredoc' do$/;"	d
heredocs	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "heredocs" do$/;"	d
hexadecimal	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/numbers_spec.rb	/^  describe 'hexadecimal' do$/;"	d
hi	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def hi do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func.hello.hello.hello.hello.hello.hello
hidden	plugged/fzf/src/options.go	/^	hidden      bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
hidden	plugged/fzf/src/options.go	/^	hidden bool$/;"	m	struct:fzf.walkerOpts	typeref:typename:bool
hiddenLines	plugged/completor.vim/pythonx/completers/lsp/action.py	/^hiddenLines = ["on pkg.go.dev"]$/;"	v
highlightLine	plugged/fzf/src/terminal.go	/^	highlightLine      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
history	plugged/fzf/src/terminal.go	/^	history            *History$/;"	m	struct:fzf.Terminal	typeref:typename:*History
hooks	plugged/completor.vim/pythonx/completers/common/__init__.py	/^    hooks = ['ultisnips', 'buffer', 'filename']$/;"	v	class:Common
host	plugged/fzf/src/server.go	/^	host string$/;"	m	struct:fzf.listenAddress	typeref:typename:string
how_are_you	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/blocks_spec.rb	/^    def how_are_you do$/;"	f	method:name.name.f.f
hscroll	plugged/fzf/src/terminal.go	/^	hscroll            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hscrollOff	plugged/fzf/src/terminal.go	/^	hscrollOff         int$/;"	m	struct:fzf.Terminal	typeref:typename:int
html	plugged/splitjoin.vim/spec/plugin/html_spec.rb	/^describe "html" do$/;"	d
html	vimrc	/^augroup html$/;"	a
httpBadRequest	plugged/fzf/src/server.go	/^	httpBadRequest   = "HTTP\/1.1 400 Bad Request" + crlf$/;"	c	package:fzf
httpOk	plugged/fzf/src/server.go	/^	httpOk           = "HTTP\/1.1 200 OK" + crlf$/;"	c	package:fzf
httpReadTimeout	plugged/fzf/src/server.go	/^	httpReadTimeout  = 10 * time.Second$/;"	c	package:fzf
httpServer	plugged/fzf/src/server.go	/^type httpServer struct {$/;"	s	package:fzf
httpUnauthorized	plugged/fzf/src/server.go	/^	httpUnauthorized = "HTTP\/1.1 401 Unauthorized" + crlf$/;"	c	package:fzf
httpUnavailable	plugged/fzf/src/server.go	/^	httpUnavailable  = "HTTP\/1.1 503 Service Unavailable" + crlf$/;"	c	package:fzf
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        for(i  in 1:2)$/;"	g
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        for(i in 1:2){$/;"	g
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    for (i in 1:n) {$/;"	v	function:latlon.format
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    for (i in 1:n)$/;"	v	function:lon.format
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    if (ismat) for (i in seq_len(differences)) r <- r[i1, , drop = FALSE] -$/;"	v	function:foo
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^for (i in 1:num.stations) {$/;"	g
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^for(i in 1:10){$/;"	g
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^for(i in 1:l){$/;"	g
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        for(i  in 1:2)$/;"	g
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        for(i in 1:2){$/;"	g
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    for (i in 1:n) {$/;"	v	function:latlon.format
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    for (i in 1:n)$/;"	v	function:lon.format
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    if (ismat) for (i in seq_len(differences)) r <- r[i1, , drop = FALSE] -$/;"	v	function:foo
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^for (i in 1:num.stations) {$/;"	g
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^for(i in 1:10){$/;"	g
i	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^for(i in 1:l){$/;"	g
i	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def i(str)$/;"	f
i1	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^for(i1 in lista1)$/;"	g
i1	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^for(i1 in lista1)$/;"	g
i2	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    for(i2 in lista2)$/;"	g
i2	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    for(i2 in lista2)$/;"	g
i3	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        for(i3 in lista3)$/;"	g
i3	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        for(i3 in lista3)$/;"	g
i4	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^            for(i4 in lista4)$/;"	g
i4	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            for(i4 in lista4)$/;"	g
iS	plugged/ultisnips/ftplugin/snippets.vim	/^onoremap <silent><buffer> iS :<C-U>call <SID>UltiSnippetTextObj(1)<CR>$/;"	m
iS	plugged/ultisnips/ftplugin/snippets.vim	/^xnoremap <silent><buffer> iS :<C-U>call <SID>UltiSnippetTextObj(1)<CR>$/;"	m
iTerm2 color scheme	plugged/seoul256.vim/README.md	/^iTerm2 color scheme$/;"	s
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.AutoField(primary_key=True)$/;"	v	class:BuildPlatform
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.AutoField(primary_key=True)$/;"	v	class:JobGroup
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.AutoField(primary_key=True)$/;"	v	class:JobType
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.AutoField(primary_key=True)$/;"	v	class:MachinePlatform
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.AutoField(primary_key=True)$/;"	v	class:NamedModel
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.AutoField(primary_key=True)$/;"	v	class:OptionCollection
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.AutoField(primary_key=True)$/;"	v	class:Repository
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.AutoField(primary_key=True)$/;"	v	class:RunnableJob
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.BigAutoField(primary_key=True)$/;"	v	class:BugJobMap
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.BigAutoField(primary_key=True)$/;"	v	class:ClassifiedFailure
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.BigAutoField(primary_key=True)$/;"	v	class:FailureLine
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.BigAutoField(primary_key=True)$/;"	v	class:Group
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.BigAutoField(primary_key=True)$/;"	v	class:Job
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.BigAutoField(primary_key=True)$/;"	v	class:JobDetail
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.BigAutoField(primary_key=True)$/;"	v	class:JobNote
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.BigAutoField(primary_key=True)$/;"	v	class:TextLogError
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.BigAutoField(primary_key=True)$/;"	v	class:TextLogErrorMatch
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.BigAutoField(primary_key=True)$/;"	v	class:TextLogStep
id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    id = models.PositiveIntegerField(primary_key=True)$/;"	v	class:Bugscache
ident	plugged/completor.vim/pythonx/completers/common/filename.py	/^    ident = r"""[@a-zA-Z0-9(){}$+_~.'"\\x80-\\xff\\u4e00-\\u9fff\\[\\]-]*"""$/;"	v	class:Filename
ident	plugged/completor.vim/pythonx/completers/javascript/__init__.py	/^    ident = re.compile(r"""(\\w+)|(["'][^"']*)""", re.U)$/;"	v	class:Tern
ident	plugged/completor.vim/pythonx/completor/__init__.py	/^    ident = re.compile(r'\\w+', re.U)$/;"	v	class:Completor
ident_match	plugged/completor.vim/pythonx/completor/__init__.py	/^    def ident_match(self, pat):$/;"	m	class:Completor
ident_rmatch	plugged/completor.vim/pythonx/completor/__init__.py	/^    def ident_rmatch(self, pat):$/;"	m	class:Completor
if-blocks	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^  describe "if-blocks" do$/;"	d
if-let and match	plugged/splitjoin.vim/spec/plugin/rust_spec.rb	/^  describe "if-let and match" do$/;"	d
ignore	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^    def ignore(self, args):$/;"	m	class:JediProcessor
ignore	plugged/fzf/src/util/eventbox.go	/^	ignore map[EventType]bool$/;"	m	struct:util.EventBox	typeref:typename:map[EventType]bool
ignore_exception	plugged/completor.vim/pythonx/completor/utils.py	/^def ignore_exception(fallback=()):$/;"	f
ignore_missing_imports	plugged/ultisnips/mypy.ini	/^ignore_missing_imports = True$/;"	k	section:mypy-unidecode
ignore_missing_imports	plugged/ultisnips/mypy.ini	/^ignore_missing_imports = True$/;"	k	section:mypy-vim
ignores	plugged/ultisnips/test/test_Selection.py	/^    ignores = ["H"]$/;"	v	class:SelectModeMappings_IgnoreMappings1_ECR
ignores	plugged/ultisnips/test/test_Selection.py	/^    ignores = ["e", "H"]$/;"	v	class:SelectModeMappings_IgnoreMappings2_ECR
ignores	plugged/ultisnips/test/test_Selection.py	/^    ignores = ["e"]$/;"	v	class:SelectModeMappings_IgnoreMappings_ECR
ignores	plugged/ultisnips/test/test_Selection.py	/^    ignores = []$/;"	v	class:_SelectModeMappings
image	plugged/fzf/src/terminal.go	/^	image     bool$/;"	m	struct:fzf.previewed	typeref:typename:bool
image_exists	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^def image_exists():$/;"	f
image_repro	plugged/ultisnips/Makefile	/^image_repro: image_vim_82_py39$/;"	t
image_vim_80_py35	plugged/ultisnips/Makefile	/^image_vim_80_py35:$/;"	t
image_vim_80_py36	plugged/ultisnips/Makefile	/^image_vim_80_py36:$/;"	t
image_vim_81_py35	plugged/ultisnips/Makefile	/^image_vim_81_py35:$/;"	t
image_vim_81_py36	plugged/ultisnips/Makefile	/^image_vim_81_py36:$/;"	t
image_vim_81_py37	plugged/ultisnips/Makefile	/^image_vim_81_py37:$/;"	t
image_vim_81_py38	plugged/ultisnips/Makefile	/^image_vim_81_py38:$/;"	t
image_vim_81_py39	plugged/ultisnips/Makefile	/^image_vim_81_py39:$/;"	t
image_vim_82_py35	plugged/ultisnips/Makefile	/^image_vim_82_py35:$/;"	t
image_vim_82_py36	plugged/ultisnips/Makefile	/^image_vim_82_py36:$/;"	t
image_vim_82_py37	plugged/ultisnips/Makefile	/^image_vim_82_py37:$/;"	t
image_vim_82_py38	plugged/ultisnips/Makefile	/^image_vim_82_py38:$/;"	t
image_vim_82_py39	plugged/ultisnips/Makefile	/^image_vim_82_py39:$/;"	t
image_vim_git_py310	plugged/ultisnips/Makefile	/^image_vim_git_py310:$/;"	t
image_vim_git_py35	plugged/ultisnips/Makefile	/^image_vim_git_py35:$/;"	t
image_vim_git_py36	plugged/ultisnips/Makefile	/^image_vim_git_py36:$/;"	t
image_vim_git_py37	plugged/ultisnips/Makefile	/^image_vim_git_py37:$/;"	t
image_vim_git_py38	plugged/ultisnips/Makefile	/^image_vim_git_py38:$/;"	t
image_vim_git_py39	plugged/ultisnips/Makefile	/^image_vim_git_py39:$/;"	t
impls,trait implementations	plugged/splitjoin.vim/spec/support/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?impl([ \\t\\n]*<[^>]*>)?[ \\t]+(([a-zA-Z0-9_:]+)[ \\t]*(<[^>/;"	k	langdef:Rust
import_completer	plugged/completor.vim/pythonx/completor/__init__.py	/^def import_completer(ft):$/;"	f
imports	plugged/splitjoin.vim/spec/plugin/rust_spec.rb	/^  describe "imports" do$/;"	d
inBytes	plugged/fzf/src/util/chars.go	/^	inBytes         bool$/;"	m	struct:util.Chars	typeref:typename:bool
inHandle	plugged/fzf/src/tui/light.go	/^	inHandle        uintptr$/;"	m	struct:tui.LightRenderer	typeref:typename:uintptr
inLiteral	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      inLiteral: false,$/;"	p	class:complete.query
indent_to_spaces	plugged/ultisnips/pythonx/UltiSnips/indent_util.py	/^    def indent_to_spaces(self, indent):$/;"	m	class:IndentUtil
index	plugged/fzf/src/matcher.go	/^	index   int$/;"	m	struct:fzf.partialResult	typeref:typename:int
index	plugged/fzf/src/options.go	/^	index    int$/;"	m	struct:fzf.tmuxOptions	typeref:typename:int
index	plugged/fzf/src/options.go	/^	index   int$/;"	m	struct:fzf.heightSpec	typeref:typename:int
indexAt	plugged/fzf/src/algo/algo.go	/^func indexAt(index int, max int, forward bool) int {$/;"	f	package:algo	typeref:typename:int
index_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        index_together = ($/;"	v	class:FailureLine.Meta
index_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        index_together = [$/;"	v	class:Job.Meta
infoCommand	plugged/fzf/src/terminal.go	/^	infoCommand        string$/;"	m	struct:fzf.Terminal	typeref:typename:string
infoDefault	plugged/fzf/src/options.go	/^	infoDefault infoStyle = iota$/;"	c	package:fzf	typeref:type:infoStyle
infoHidden	plugged/fzf/src/options.go	/^	infoHidden$/;"	c	package:fzf
infoInline	plugged/fzf/src/options.go	/^	infoInline$/;"	c	package:fzf
infoInlineRight	plugged/fzf/src/options.go	/^	infoInlineRight$/;"	c	package:fzf
infoPrefix	plugged/fzf/src/terminal.go	/^	infoPrefix         string$/;"	m	struct:fzf.Terminal	typeref:typename:string
infoRight	plugged/fzf/src/options.go	/^	infoRight$/;"	c	package:fzf
infoStyle	plugged/fzf/src/options.go	/^type infoStyle int$/;"	t	package:fzf	typeref:typename:int
infoStyle	plugged/fzf/src/terminal.go	/^	infoStyle          infoStyle$/;"	m	struct:fzf.Terminal	typeref:typename:infoStyle
init	plugged/fzf/src/algo/algo_test.go	/^func init() {$/;"	f	package:algo
init	plugged/fzf/src/options.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/pattern.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/pattern_test.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/server.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/terminal.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/tui/tui.go	/^func init() {$/;"	f	package:tui
init	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def init(:ok) do$/;"	f	module:Broadcaster	access:public
init	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def init(:ok) do$/;"	f	module:C	access:public
init	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def init(:ok) do$/;"	f	module:Printer	access:public
init	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def init(:ok) do$/;"	f	module:QueueBroadcaster	access:public
init	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def init(_) do$/;"	f	module:RateLimiter	access:public
init	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def init(counter) do$/;"	f	module:A	access:public
init	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def init(number) do$/;"	f	module:B	access:public
init	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^      def init(:ok) do$/;"	f	module:C	access:public
init	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^      def init(args) do$/;"	f	module:RateLimiter	access:public
init	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @callback init(args :: term) ::$/;"	c	module:RateLimiter
init	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def init(_) do$/;"	f	method:example.project.config.test.test.test.project.test.create.double.double.double.test_another_feature
init	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/atom_spec.rb	/^          def init(args) do$/;"	f
initDelay	plugged/fzf/src/terminal.go	/^	initDelay          time.Duration$/;"	m	struct:fzf.Terminal	typeref:typename:time.Duration
initFunc	plugged/fzf/src/terminal.go	/^	initFunc           func() error$/;"	m	struct:fzf.Terminal	typeref:typename:func() error
initPalette	plugged/fzf/src/tui/tui.go	/^func initPalette(theme *ColorTheme) {$/;"	f	package:tui
initPlatform	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) initPlatform() (err error) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(err error)
initPlatform	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
initProfiling	plugged/fzf/src/options_no_pprof.go	/^func (o *Options) initProfiling() error {$/;"	f	unknown:fzf.Options	typeref:typename:error
initProfiling	plugged/fzf/src/options_pprof.go	/^func (o *Options) initProfiling() error {$/;"	f	unknown:fzf.Options	typeref:typename:error
initScreen	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) initScreen() error {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:error
initTheme	plugged/fzf/src/tui/tui.go	/^func initTheme(theme *ColorTheme, baseTheme *ColorTheme, forceBlack bool) {$/;"	f	package:tui
initialCharClass	plugged/fzf/src/algo/algo.go	/^	initialCharClass = charWhite$/;"	v	package:algo
initialDelay	plugged/fzf/src/constants.go	/^	initialDelay      = 20 * time.Millisecond$/;"	c	package:fzf
initialDelayTac	plugged/fzf/src/constants.go	/^	initialDelayTac   = 100 * time.Millisecond$/;"	c	package:fzf
initialPreviewOpts	plugged/fzf/src/terminal.go	/^	initialPreviewOpts previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:previewOpts
initial_line	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_BackspaceOneChar
initial_line	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_DeleteOneChar
initial_line	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_InsertOneChar
initial_line	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_InsertOneChar1
initial_line	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    initial_line = 0$/;"	v	class:TestGuessing_Noop0
initialize	plugged/fzf/test/test_go.rb	/^  def initialize(shell = :bash)$/;"	f	class:Tmux
initialize	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^              def initialize$/;"	f	class:Foo.Bar.Baz
initialize	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^          def initialize$/;"	f	class:Baz
initialize	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^    initialize = function(name = NA, hair = NA) {$/;"	m	class:Person	constructor:function
initialize	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def initialize$/;"	f	class:Differ
initialize	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def initialize(vim, type)$/;"	f	class:Buffer
initialize_request	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def initialize_request(self, project_name, project_path):$/;"	m	class:Lsp
initialized_request	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def initialized_request(self):$/;"	m	class:Lsp
inner	plugged/completor.vim/pythonx/completor/_vim.py	/^        def inner(*args, **kwargs):$/;"	f	function:_patch_nvim.function	file:
input	plugged/fzf/src/terminal.go	/^	input              []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
inside_docker	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^def inside_docker():$/;"	f
install	plugged/fzf/Makefile	/^install: bin\/fzf$/;"	t
instance	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def self.instance$/;"	S	class:Differ
instant	plugged/validator.vim/pythonx/lints/go/golangci.py	/^    instant = False$/;"	v	class:Golangci
instant	plugged/validator.vim/pythonx/lints/go/gometalinter.py	/^    instant = False$/;"	v	class:Gometalinter
instant	plugged/validator.vim/pythonx/lints/rust.py	/^    instant = False$/;"	v	class:Cargo
instant	plugged/validator.vim/pythonx/lints/thrift.py	/^    instant = False$/;"	v	class:Thrift
instant	plugged/validator.vim/pythonx/validator/__init__.py	/^    instant = True$/;"	v	class:Validator
instantiate	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def instantiate(self, snippet_instance, initial_text, indent):$/;"	m	class:SnippetDefinition
instantiate	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/snipmate.py	/^    def instantiate(self, snippet_instance, initial_text, indent):$/;"	m	class:SnipMateSnippetDefinition
instantiate	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/ulti_snips.py	/^    def instantiate(self, snippet_instance, initial_text, indent):$/;"	m	class:UltiSnipsSnippetDefinition
integer_types	plugged/completor.vim/pythonx/completor/compat.py	/^    integer_types = (int, long)$/;"	v
interactive	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^                   interactive = interactive),$/;"	n	list:makeRestart.anonListb1d136150307
interactive	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            interactive = interactive),$/;"	n	list:makeRestart.anonListe36e773c0307
interpretCode	plugged/fzf/src/ansi.go	/^func interpretCode(ansiCode string, prevState *ansiState) ansiState {$/;"	f	package:fzf	typeref:typename:ansiState
inv	plugged/fzf/src/pattern.go	/^	inv           bool$/;"	m	struct:fzf.term	typeref:typename:bool
inverse	plugged/fzf/src/options.go	/^	inverse bool$/;"	m	struct:fzf.heightSpec	typeref:typename:bool
ip	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def ip(str)$/;"	f
is24	plugged/fzf/src/tui/tui.go	/^func (c Color) is24() bool {$/;"	f	type:tui.Color	typeref:typename:bool
isAlphabet	plugged/fzf/src/options.go	/^func isAlphabet(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isAscii	plugged/fzf/src/algo/algo.go	/^func isAscii(runes []rune) bool {$/;"	f	package:algo	typeref:typename:bool
isCtrlSeqStart	plugged/fzf/src/ansi.go	/^func isCtrlSeqStart(c uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isExecuteAction	plugged/fzf/src/options.go	/^func isExecuteAction(str string) actionType {$/;"	f	package:fzf	typeref:typename:actionType
isMintty345	plugged/fzf/src/winpty_windows.go	/^func isMintty345() bool {$/;"	f	package:fzf	typeref:typename:bool
isNumeric	plugged/fzf/src/options.go	/^func isNumeric(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isPrint	plugged/fzf/src/ansi.go	/^func isPrint(c uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isSymlinkToDir	plugged/fzf/src/reader.go	/^func isSymlinkToDir(path string, de os.DirEntry) bool {$/;"	f	package:fzf	typeref:typename:bool
is_blocking	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^    def is_blocking():$/;"	m	class:RemotePDB
is_buffer_changed_outside	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def is_buffer_changed_outside(self):$/;"	m	class:VimBufferProxy
is_bytes	plugged/completor.vim/pythonx/completor/compat.py	/^def is_bytes(s):$/;"	f
is_comment_or_string	plugged/completor.vim/pythonx/completor/__init__.py	/^    def is_comment_or_string(self):$/;"	m	class:Completor
is_common	plugged/completor.vim/pythonx/completers/common/__init__.py	/^    def is_common(cls, comp):$/;"	m	class:Common
is_complete_edit	plugged/ultisnips/pythonx/UltiSnips/diff.py	/^def is_complete_edit(initial_line, original, wanted, cmds):$/;"	f
is_enable	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^    def is_enable():$/;"	m	class:RemotePDB
is_exe	plugged/validator.vim/pythonx/validator/utils.py	/^    def is_exe(fpath):$/;"	f	function:exe_exist	file:
is_focused	plugged/ultisnips/test/vim_interface.py	/^    def is_focused(self, title=None):$/;"	m	class:VimInterfaceWindows
is_fully_autoclassified	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def is_fully_autoclassified(self):$/;"	m	class:Job
is_fully_verified	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def is_fully_verified(self):$/;"	m	class:Job
is_group	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^def is_group(word, heading):$/;"	f
is_killed	plugged/ultisnips/pythonx/UltiSnips/text_objects/tabstop.py	/^    def is_killed(self):$/;"	m	class:TabStop
is_message_end	plugged/completor.vim/pythonx/completers/rust.py	/^    def is_message_end(self, msg):$/;"	m	class:Racer
is_message_end	plugged/completor.vim/pythonx/completor/__init__.py	/^    def is_message_end(self, msg):$/;"	m	class:Completor
is_message_end	plugged/completor.vim/pythonx/completor/api.py	/^def is_message_end(args):$/;"	f
is_process_running	plugged/ultisnips/test/vim_interface.py	/^def is_process_running(pid):$/;"	f
is_set	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def is_set(self):$/;"	m	class:_SnippetUtilCursor
is_try_repo	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    is_try_repo = models.BooleanField(default=False)$/;"	v	class:Repository
item	plugged/fzf/src/result.go	/^	item   *Item$/;"	m	struct:fzf.Result	typeref:typename:*Item
item	plugged/fzf/src/terminal.go	/^	item *Item$/;"	m	struct:fzf.selectedItem	typeref:typename:*Item
itemLine	plugged/fzf/src/terminal.go	/^type itemLine struct {$/;"	s	package:fzf
itemLines	plugged/fzf/src/terminal.go	/^func (t *Terminal) itemLines(item *Item, atMost int) ([][]rune, bool) {$/;"	f	struct:fzf.Terminal	typeref:typename:([][]rune, bool)
item_count	plugged/fzf/test/test_go.rb	/^          def item_count$/;"	f	method:Tmux.until
items	plugged/fzf/src/chunklist.go	/^	items [chunkSize]Item$/;"	m	struct:fzf.Chunk	typeref:typename:[chunkSize]Item
iter	plugged/fzf/src/pattern.go	/^func (p *Pattern) iter(pfun algo.Algo, tokens []Token, caseSensitive bool, normalize bool, forwa/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
iwd	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        iwd <- as.integer(substr(fmt, Iind + 1, regexpr("\\\\.\\\\", fmt) - 1))$/;"	g
iwd	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        iwd <- as.integer(substr(fmt, Iind + 1, regexpr('[\\\\.\\\\(]', fmt) - 1))$/;"	g
iwd	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        iwd <- as.integer(substr(fmt, Iind + 1, regexpr('[\\\\.\\\\)]', fmt) - 1))$/;"	g
iwd	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        iwd <- as.integer(substr(fmt, Iind + 1, regexpr("\\\\.\\\\", fmt) - 1))$/;"	g
iwd	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        iwd <- as.integer(substr(fmt, Iind + 1, regexpr('[\\\\.\\\\(]', fmt) - 1))$/;"	g
iwd	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        iwd <- as.integer(substr(fmt, Iind + 1, regexpr('[\\\\.\\\\)]', fmt) - 1))$/;"	g
j	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^            for(j in 1:k)$/;"	g
j	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            for(j in 1:k)$/;"	g
java	plugged/splitjoin.vim/spec/plugin/java_spec.rb	/^describe "java" do$/;"	d
javascript	plugged/splitjoin.vim/spec/plugin/js_spec.rb	/^describe "javascript" do$/;"	d
jedi_context	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^    def jedi_context(self, args):$/;"	m	class:JediProcessor
jj	vimrc	/^inoremap jj <esc>$/;"	m
jk	vimrc	/^inoremap jk <esc>$/;"	m
job	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job = models.ForeignKey(Job, on_delete=models.CASCADE)$/;"	v	class:BugJobMap
job	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job = models.ForeignKey(Job, on_delete=models.CASCADE)$/;"	v	class:JobNote
job	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job = models.ForeignKey(Job, on_delete=models.CASCADE, related_name="job_details")$/;"	v	class:JobDetail
job	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job = models.ForeignKey(Job, on_delete=models.CASCADE, related_name="job_log")$/;"	v	class:JobLog
job	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job = models.ForeignKey(Job, on_delete=models.CASCADE, related_name="text_log_step")$/;"	v	class:TextLogStep
job	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job = models.OneToOneField($/;"	v	class:TaskclusterMetadata
job_group	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job_group = models.ForeignKey(JobGroup, on_delete=models.CASCADE, default=2)$/;"	v	class:RunnableJob
job_group	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job_group = models.ForeignKey(JobGroup, on_delete=models.CASCADE, related_name='jobs')$/;"	v	class:Job
job_group_name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job_group_name = models.CharField(max_length=100, blank=True, db_index=True)$/;"	v	class:ReferenceDataSignatures
job_group_symbol	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job_group_symbol = models.CharField(max_length=25, blank=True, db_index=True)$/;"	v	class:ReferenceDataSignatures
job_guid	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job_guid = models.CharField(max_length=50)$/;"	v	class:FailureLine
job_log	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job_log = models.ForeignKey(JobLog, on_delete=models.CASCADE, null=True, related_name="failu/;"	v	class:FailureLine
job_type	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job_type = models.ForeignKey(JobType, on_delete=models.CASCADE)$/;"	v	class:RunnableJob
job_type	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job_type = models.ForeignKey(JobType, on_delete=models.CASCADE, related_name='jobs')$/;"	v	class:Job
job_type_name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job_type_name = models.CharField(max_length=100, db_index=True)$/;"	v	class:ReferenceDataSignatures
job_type_symbol	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    job_type_symbol = models.CharField(max_length=25, blank=True, db_index=True)$/;"	v	class:ReferenceDataSignatures
join	plugged/splitjoin.vim/spec/support/vim.rb	/^    def join$/;"	f	module:Support.Vim
joinTokens	plugged/fzf/src/tokenizer.go	/^func joinTokens(tokens []Token) string {$/;"	f	package:fzf	typeref:typename:string
joining a record	plugged/splitjoin.vim/spec/plugin/elm_spec.rb	/^    describe 'joining a record' do$/;"	d
joining a tuple	plugged/splitjoin.vim/spec/plugin/elm_spec.rb	/^    describe 'joining a tuple' do$/;"	d
joining comma-separated arguments	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^  describe "joining comma-separated arguments" do$/;"	d
js	plugged/completor.vim/Makefile	/^js:$/;"	t
jsonContentType	plugged/fzf/src/server.go	/^	jsonContentType  = "Content-Type: application\/json" + crlf$/;"	c	package:fzf
jumpAcceptEnabled	plugged/fzf/src/terminal.go	/^	jumpAcceptEnabled$/;"	c	package:fzf
jumpDisabled	plugged/fzf/src/terminal.go	/^	jumpDisabled jumpMode = iota$/;"	c	package:fzf	typeref:type:jumpMode
jumpEnabled	plugged/fzf/src/terminal.go	/^	jumpEnabled$/;"	c	package:fzf
jumpLabels	plugged/fzf/src/terminal.go	/^	jumpLabels         string$/;"	m	struct:fzf.Terminal	typeref:typename:string
jumpMode	plugged/fzf/src/terminal.go	/^type jumpMode int$/;"	t	package:fzf	typeref:typename:int
jump_backwards	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def jump_backwards(self):$/;"	m	class:SnippetManager
jump_forwards	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def jump_forwards(self):$/;"	m	class:SnippetManager
jump_or_expand	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def jump_or_expand(self):$/;"	m	class:SnippetManager
jumping	plugged/fzf/src/terminal.go	/^	jumping            jumpMode$/;"	m	struct:fzf.Terminal	typeref:typename:jumpMode
k	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        k <- length(arglist)$/;"	g
k	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        k <- length(arglist)$/;"	g
keepRight	plugged/fzf/src/terminal.go	/^	keepRight          bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
keyChan	plugged/fzf/src/terminal.go	/^	keyChan            chan tui.Event$/;"	m	struct:fzf.Terminal	typeref:typename:chan tui.Event
keyMatch	plugged/fzf/src/terminal.go	/^func keyMatch(key tui.Event, event tui.Event) bool {$/;"	f	package:fzf	typeref:typename:bool
keymap	plugged/fzf/src/terminal.go	/^	keymap             map[tui.Event][]*action$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event][]*action
keymapOrg	plugged/fzf/src/terminal.go	/^	keymapOrg          map[tui.Event][]*action$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event][]*action
keys	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = " " + EA + "Hello" + JF + "World"$/;"	v	class:Anon_NoTrigger_FirstCharOfLine
keys	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = "123 abc" + EA + "123" + JF + "456"$/;"	v	class:Anon_Trigger_Multi
keys	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = "abc " + EA$/;"	v	class:Anon_NoTrigger_AfterSpace
keys	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = "abc" + EA + "123" + JF + "456"$/;"	v	class:Anon_NoTrigger_Multi
keys	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = "abc" + EA + "\\nabc" + EX$/;"	v	class:Anon_Trigger_Twice
keys	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = "abc" + EA$/;"	v	class:Anon_NoTrigger_Simple
keys	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = "abc" + EA$/;"	v	class:Anon_Trigger_Simple
keys	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = "blah blah abc" + EA$/;"	v	class:Anon_Trigger_Opts
keys	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    keys = EA + "Hello" + JF + "World"$/;"	v	class:Anon_NoTrigger_BeginningOfLine
keys	plugged/ultisnips/test/test_Autocommands.py	/^    keys = ($/;"	v	class:Autocommands
keys	plugged/ultisnips/test/test_Autotrigger.py	/^    keys = "a"$/;"	v	class:Autotrigger_CanMatchSimpleTrigger
keys	plugged/ultisnips/test/test_Autotrigger.py	/^    keys = "a"$/;"	v	class:Autotrigger_GlobalDisable
keys	plugged/ultisnips/test/test_Autotrigger.py	/^    keys = "a\\na"$/;"	v	class:Autotrigger_CanMatchContext
keys	plugged/ultisnips/test/test_Autotrigger.py	/^    keys = "abc"$/;"	v	class:Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne
keys	plugged/ultisnips/test/test_Autotrigger.py	/^    keys = "if" + EX + "=" + ESC + "o="$/;"	v	class:Autotrigger_CanMatchPreviouslySelectedPlaceholder
keys	plugged/ultisnips/test/test_Autotrigger.py	/^    keys = ($/;"	v	class:Autotrigger_CanToggle
keys	plugged/ultisnips/test/test_Autotrigger.py	/^    keys = ($/;"	v	class:Autotrigger_GlobalDisableThenToggle
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "\\ttest" + EX$/;"	v	class:DoNotTrimSpacesAtEndOfLinesByDefault
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "\\ttest" + EX$/;"	v	class:TrimSpacesAtEndOfLines
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "oouu trig b" + 2 * ARR_L + EX$/;"	v	class:NoUmlautsBeforeTriggerAndCharsAfter
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "te ül" + EX + "hello"$/;"	v	class:Snippet_With_Umlauts_Mirrors
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "te ül" + EX + "hüüll"$/;"	v	class:Snippet_With_Umlauts_Python
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "te ül" + EX + "more text" + JF + JF + "end"$/;"	v	class:Snippet_With_Umlauts_OverwriteFirst
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "te ül" + EX + "more text"$/;"	v	class:Snippet_With_Umlauts_TypeOn
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "te ül" + EX + JF + "more text" + JF + "end"$/;"	v	class:Snippet_With_Umlauts_OverwriteSecond
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "te ül" + EX + JF + JF + "end"$/;"	v	class:Snippet_With_Umlauts_OverwriteNone
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "te" + LS + "2\\n"$/;"	v	class:Snippet_With_DoubleQuote_List
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "te" + LS + "2\\n"$/;"	v	class:Snippet_With_SingleQuote_List
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "te" + LS + "2\\n"$/;"	v	class:Snippet_With_Umlauts_List
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "te'st" + EX$/;"	v	class:Snippet_With_SingleQuote
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "test" + EX + "j" + JF + "k"$/;"	v	class:TrailingNewline_TabStop_EndNL
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "test" + EX + "j" + JF + "k"$/;"	v	class:TrailingNewline_TabStop_EndStartNL
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "test" + EX + "j" + JF + "k"$/;"	v	class:TrailingNewline_TabStop_ExtraNL_ECR
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "test" + EX + "j" + JF + "k"$/;"	v	class:TrailingNewline_TabStop_JustNL
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "test" + EX + "j" + JF + "k"$/;"	v	class:TrailingNewline_TabStop_NLInsideStuffBehind
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "test" + EX + "j" + JF + "k"$/;"	v	class:TrailingNewline_TabStop_NotEndStartNL
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "test" + EX + "j" + JF + "k"$/;"	v	class:TrailingNewline_TabStop_StartNL
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "test" + EX + "z" + JF + "y"$/;"	v	class:MultiLineDefault_Type
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "test" + EX + BS + JF + "Goodbye"$/;"	v	class:LeaveTrailingWhitespace
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "test" + EX + BS + JF + "Goodbye"$/;"	v	class:RemoveTrailingWhitespace
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "test" + EX + BS + JF + "y"$/;"	v	class:MultiLineDefault_BS
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "test" + EX + JF + "y"$/;"	v	class:MultiLineDefault_Jump
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "teüst" + EX$/;"	v	class:Snippet_With_Umlauts
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = "ööuu trig b" + 2 * ARR_L + EX$/;"	v	class:UmlautsBeforeTriggerAndCharsAfter
keys	plugged/ultisnips/test/test_Chars.py	/^    keys = 'te"st' + EX$/;"	v	class:Snippet_With_DoubleQuote
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX + "1 "$/;"	v	class:Choices_MoreThan9Candidates_ShouldTerminateWithSpace
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX + "1 is a color"$/;"	v	class:Choices_With_Mirror_ContinueMirroring_EvenAfterSelectionDone
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX + "1"$/;"	v	class:Choices_MoreThan9Candidates_ShouldWaitForInputs
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX + "1"$/;"	v	class:Choices_With_Mirror
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX + "2"$/;"	v	class:Choices_CanEscapeCommaInsideChoiceItem
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX + "2"$/;"	v	class:Choices_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX + "2"$/;"	v	class:Choices_WilNotMessWithTabstopsAfterIt
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX + "3"$/;"	v	class:Choices_WillAbandonSelection_If_InputIsGreaterThanMaxSelectionIndex
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX + "char"$/;"	v	class:Choices_WillAbandonSelection_If_CharTyped
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX + "input"$/;"	v	class:Choices_AsNestedElement_ShallNotTakeActionIfParentInput
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX + JF + "1"$/;"	v	class:Choices_AsNestedElement_CanBeTabbedInto
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX + JF + JF + "input"$/;"	v	class:Choices_AsNestedElement_CanBeTabbedThrough
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX$/;"	v	class:Choices_AsNestedElement_ShouldOverwriteDefaultText
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX$/;"	v	class:Choices_CanTakeNonAsciiCharacters
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX$/;"	v	class:Choices_EmptyChoiceWillBeDiscarded
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX$/;"	v	class:Choices_ShouldThrowErrorWithZeroTabstop
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX$/;"	v	class:Choices_WillBeExpandedToInlineSelection
keys	plugged/ultisnips/test/test_Choices.py	/^    keys = "test" + EX$/;"	v	class:Choices_WillNotExpand_If_ChoiceListIsEmpty
keys	plugged/ultisnips/test/test_Completion.py	/^    keys = ($/;"	v	class:Completion_SimpleExample_ECR
keys	plugged/ultisnips/test/test_Completion.py	/^    keys = COMPLETION_OPTIONS + "test" + EX + "com" + COMPL_KW + JF + "foo"$/;"	v	class:Completion_ForwardsJumpWithoutCOMPL_ACCEPT
keys	plugged/ultisnips/test/test_Completion.py	/^    keys = COMPLETION_OPTIONS + "test" + EX + "foo" + JF + "com" + COMPL_KW + JB + "foo"$/;"	v	class:Completion_BackwardsJumpWithoutCOMPL_ACCEPT
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "a" + EX$/;"	v	class:ContextSnippets_DoNotExpandOnFalse
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "a" + EX$/;"	v	class:ContextSnippets_ExpandOnTrue
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "a" + EX$/;"	v	class:ContextSnippets_Header_DoNotExpandOnFalse
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "a" + EX$/;"	v	class:ContextSnippets_Header_ExpandOnTrue
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "a" + EX$/;"	v	class:ContextSnippets_SimpleSnippet
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "a" + EX$/;"	v	class:ContextSnippets_UseContext
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "adup" + EX + "\\n" + word + "dup" + EX$/;"	v	class:ContextSnippets_Before
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "e" + EX + " " + "e" + EX$/;"	v	class:ContextSnippets_ContextIsClearedBeforeExpand
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "e" + EX$/;"	v	class:ContextSnippets_CursorIsZeroBased
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "e" + EX$/;"	v	class:ContextSnippets_ReportError
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "e" + EX$/;"	v	class:ContextSnippets_ReportErrorOnIndexOutOfRange
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = "i" + EX$/;"	v	class:ContextSnippets_PriorityKeyword
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = ($/;"	v	class:ContextSnippets_ContextHasAccessToVisual
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = ($/;"	v	class:ContextSnippets_SnippetPriority
keys	plugged/ultisnips/test/test_ContextSnippets.py	/^    keys = negative + EX + positive + EX$/;"	v	class:ContextSnippets_ContextHasAccessToReMatch
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "first line\\n\\n\\n\\n\\n\\nthird line" + ESC + "3k0itest" + EX + ESC + "u6j"$/;"	v	class:Undo_RemoveWholeSnippet
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "hello test" + EX + "upsi" + ESC + "hh" + "iabcdef" + ESC + "u"$/;"	v	class:Undo_RemoveEditInTabstop
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "i" + EX + "asd" + JF + "feh" + ESC + "uuuu"$/;"	v	class:Undo_CompletelyUndoSnippet
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "i" + EX + "asd" + JF + ESC + "u"$/;"	v	class:Undo_ChangesInPlaceholder
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "i" + EX + "i" + EX + ESC + "u"$/;"	v	class:Undo_RemoveOneSnippetByTime
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "i" + EX + "i" + EX + ESC + "uu"$/;"	v	class:Undo_RemoveOneSnippetByTime2
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + "A" + JF + BS + "BBB"$/;"	v	class:Backspace_TabStop_NotZero
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + "A" + JF + BS + "BBB"$/;"	v	class:Backspace_TabStop_Zero
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + "a b c" + JF + "shallnot"$/;"	v	class:JumpForward_DefSnippet
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + "a" + JF + "test" + EX + ESC + "u" + JF$/;"	v	class:DoNotCrashOnUndoAndJumpInNestedSnippet
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + "a" + JF + BS + JF + "Int" + JF + "body"$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove2
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + "aaaaa" + JF + BS + JF + "3333"$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove1
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + ESC + "Vkx" + "i\\nworld\\n"$/;"	v	class:DeleteSnippetInsertion0
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + ESC + "ddi" + JB$/;"	v	class:DeleteCurrentTabStop1_JumpBack
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + ESC + "j2dd"$/;"	v	class:DeleteLastTwoLinesInSnippet
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + ESC + "u"$/;"	v	class:DeleteSnippetInsertion1
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + ESC + "u"$/;"	v	class:Undo_RemoveMultilineSnippet
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + JF + ESC + "ddi" + JB + "hello"$/;"	v	class:DeleteCurrentTabStop2_JumpBack
keys	plugged/ultisnips/test/test_Editing.py	/^    keys = "test" + EX + JF + ESC + "ddkji" + JB + "hello" + JF + "world"$/;"	v	class:DeleteCurrentTabStop3_JumpAround
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "Wie hallo gehts" + ESC + "bhi" + EX + "Huiui!"$/;"	v	class:MultilineExpandTestTyping_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "Wie hallo gehts" + ESC + "bhi" + EX$/;"	v	class:ExpandInTheMiddleOfLine_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "Wie hallo gehts" + ESC + "bhi" + EX$/;"	v	class:MultilineExpand_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "hallo " + EX$/;"	v	class:DoNotExpandAfterSpace_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "hallo" + EX + "\\nAnd more"$/;"	v	class:SimpleExpandEndingWithNewline_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "hallo" + EX + "\\nHallo Welt!\\n\\n\\b\\b\\b\\b\\b"$/;"	v	class:SimpleExpandNewLineAndBackspae_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "hallo" + EX + "\\nhallo" + EX$/;"	v	class:SimpleExpandTwice_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "hallo" + EX + "and again"$/;"	v	class:SimpleExpandTypeAfterExpand_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "hallo" + EX + BS + ESC + "o" + ESC + "P"$/;"	v	class:SimpleExpand_DoNotClobberDefaultRegister
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "hallo" + EX$/;"	v	class:SimpleExpandExpandOrJump_Expand
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "hallo" + EX$/;"	v	class:SimpleExpandJumpOrExpand_Expand
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "hallo" + EX$/;"	v	class:SimpleExpand_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "na du hallo" + EX + "and again\\b\\b\\b\\b\\bblub"$/;"	v	class:SimpleExpandTypeAndDelete_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "test" + EX + EX + "foo"$/;"	v	class:SimpleExpandExpandOrJump_Ambiguity
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "test" + EX + EX + "foo"$/;"	v	class:SimpleExpandJumpOrExpand_Ambiguity
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "test" + EX + EX$/;"	v	class:ExitSnippetModeAfterTabstopZero
keys	plugged/ultisnips/test/test_Expand.py	/^    keys = "test" + EX + JF + "foo"$/;"	v	class:SimpleExpand_Issue1343
keys	plugged/ultisnips/test/test_Fixes.py	/^    keys = "  test" + EX + "hello" + JF + "world" + JF + "blub"$/;"	v	class:Bug1251994
keys	plugged/ultisnips/test/test_Fixes.py	/^    keys = "\\t\\t\\tpd" + EX + "2"$/;"	v	class:VirtualEdit
keys	plugged/ultisnips/test/test_Fixes.py	/^    keys = "foobar " + NULL_BYTE + "test" + EX$/;"	v	class:NullByte_ExpandAfter
keys	plugged/ultisnips/test/test_Fixes.py	/^    keys = "foobar" + NULL_BYTE + LS + "\\n"$/;"	v	class:NullByte_ListSnippets
keys	plugged/ultisnips/test/test_Fixes.py	/^    keys = "test" + EX + "foo"$/;"	v	class:ShiftWidthZero
keys	plugged/ultisnips/test/test_Fixes.py	/^    keys = "yank" + ESC + "by4lea test" + EX + "HELLO" + JF + JF + ESC + "p"$/;"	v	class:RetainsTheUnnamedRegister
keys	plugged/ultisnips/test/test_Fixes.py	/^    keys = ($/;"	v	class:NonUnicodeDataInUnnamedRegister
keys	plugged/ultisnips/test/test_Fixes.py	/^    keys = ($/;"	v	class:PassThroughNonexecutedTrigger
keys	plugged/ultisnips/test/test_Fixes.py	/^    keys = ($/;"	v	class:RetainsTheUnnamedRegister_ButOnlyOnce
keys	plugged/ultisnips/test/test_Folding.py	/^    keys = "fold" + EX + "hi" + ESC + "jdd"$/;"	v	class:Fold_DeleteMiddleLine_ECR
keys	plugged/ultisnips/test/test_Folding.py	/^    keys = "fold" + EX + "hi"$/;"	v	class:FoldOverwrite_Simple_ECR
keys	plugged/ultisnips/test/test_Folding.py	/^    keys = "test" + EX + "Ball"$/;"	v	class:FoldingEnabled_SnippetWithFold_ExpectNoFolding
keys	plugged/ultisnips/test/test_Folding.py	/^    keys = "test" + EX + JF + "sub junk {}"$/;"	v	class:PerlSyntaxFold
keys	plugged/ultisnips/test/test_Format.py	/^    keys = "    test" + EX + "Hui"$/;"	v	class:ProperIndenting_SimpleCase_ECR
keys	plugged/ultisnips/test/test_Format.py	/^    keys = "    test" + EX + "\\n" + "blah"$/;"	v	class:ProperIndenting_AutoIndentAndNewline_ECR
keys	plugged/ultisnips/test/test_Format.py	/^    keys = "    test" + EX + "blah"$/;"	v	class:ProperIndenting_SingleLineNoReindenting_ECR
keys	plugged/ultisnips/test/test_Format.py	/^    keys = "inc" + EX + "cstdl"$/;"	v	class:ProperIndenting_FirstLineInFileComplete_ECR
keys	plugged/ultisnips/test/test_Format.py	/^    keys = "inc" + EX + "foo"$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
keys	plugged/ultisnips/test/test_Format.py	/^    keys = "m" + EX + "m1" + EX + "\\nHallo"$/;"	v	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
keys	plugged/ultisnips/test/test_Format.py	/^    keys = "m" + EX$/;"	v	class:RecTabStopsWithExpandtab_SimpleExample_ECR
keys	plugged/ultisnips/test/test_Format.py	/^    keys = "test" + EX + "This is a longer text that should wrap"$/;"	v	class:FOTextBeforeAndAfter_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Format.py	/^    keys = "test" + EX + "This is a longersnippet that should wrap properly"$/;"	v	class:FOWrapOnLongWord_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Format.py	/^    keys = ($/;"	v	class:FOSimple_Break_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Format.py	/^    keys = ($/;"	v	class:FOTextAfter_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "    test" + EX$/;"	v	class:PythonCodeOld_IndentedMultiline
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "    test" + EX$/;"	v	class:PythonCode_MultilineIndented
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "    test" + EX$/;"	v	class:TabStop_VimScriptInterpolation_SimpleExample
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = " " * 8 + "test" + EX  # < 8 works.$/;"	v	class:PythonCode_IndentProblem
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = """    test""" + EX$/;"	v	class:PythonCode_IndentEtSwOffset
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = """   test""" + EX$/;"	v	class:PythonCode_IndentEtSw
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = """   test""" + EX$/;"	v	class:PythonCode_IndentNoetSwTs
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = """test""" + EX + "ups"$/;"	v	class:PythonCode_LongerTextThanSource_Chars
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = """test""" + EX + "ups"$/;"	v	class:PythonCode_LongerTextThanSource_MultiLine
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = """test""" + EX$/;"	v	class:PythonCode_Locals
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = """test""" + EX$/;"	v	class:PythonCode_OptExists
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = """test""" + EX$/;"	v	class:PythonCode_OptNoExists
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "blablub" + ESC + "0v6l" + EX + "test" + EX$/;"	v	class:PythonVisual_SelectOneWord
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX$/;"	v	class:PythonVisual_LineSelect_Simple
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + "Hallo Welt"$/;"	v	class:PythonCodeOld_ReferencePlaceholderBefore
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + "Hallo Welt"$/;"	v	class:PythonCode_ReferencePlaceholderBefore
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + "aaa"$/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteFirst
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + "abc"$/;"	v	class:PythonVisual_NoVisualSelection_Ignore
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + "and more"$/;"	v	class:TabStop_Shell_SimpleExample
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + "and more"$/;"	v	class:TabStop_Shell_TextInNextLine
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + "and more"$/;"	v	class:TabStop_Shell_WithUmlauts
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + "blah" + ", bah"$/;"	v	class:PythonCode_CanOverwriteTabstop
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + "ho"$/;"	v	class:PythonCodeOld_ReferencePlaceholderAfter
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + "ho"$/;"	v	class:PythonCode_ReferencePlaceholder
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + "overwrite" + JF + "and more"$/;"	v	class:TabStop_Shell_InDefValue_Overwrite
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + ESC + "otest" + EX + JF + ESC$/;"	v	class:PythonVisual_HasAccessToSelectedPlaceholders
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + ESC + "otest" + EX + JF + JF + JF + JF$/;"	v	class:PythonVisual_HasAccessToZeroPlaceholders
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + JF + "and more"$/;"	v	class:TabStop_Shell_InDefValue_Leave
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + JF + "and more"$/;"	v	class:TabStop_Shell_ShebangPython
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX + JF + "okay"$/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteSecond
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX$/;"	v	class:PythonCodeOld_SimpleExample
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX$/;"	v	class:PythonCodeOld_TransformedBeforeMultiLine
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX$/;"	v	class:PythonCode_MultiAppend
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX$/;"	v	class:PythonCode_SimpleAppend
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX$/;"	v	class:PythonCode_SimpleExample
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX$/;"	v	class:PythonCode_SimpleExample_ReturnValueIsEmptyString
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX$/;"	v	class:PythonCode_TransformedBeforeMultiLine
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX$/;"	v	class:PythonCode_UseNewOverOld
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX$/;"	v	class:Python_SnipRvCanBeNonText
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX$/;"	v	class:TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "test" + EX$/;"	v	class:TabStop_Shell_TestEscapedChars_Overwrite
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = "ups test" + EX$/;"	v	class:PythonCode_TrickyReferences
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = ($/;"	v	class:PythonCode_MultiAppendShift
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = ($/;"	v	class:PythonCode_MultiAppendShiftMethods
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = ($/;"	v	class:PythonCode_MultiAppendSimpleIndent
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = ($/;"	v	class:PythonCode_ResetIndent
keys	plugged/ultisnips/test/test_Interpolation.py	/^    keys = ($/;"	v	class:PythonCode_SimpleMkline
keys	plugged/ultisnips/test/test_ListSnippets.py	/^    keys = " " + LS + "3\\n"$/;"	v	class:ListAllAvailable_SpaceInFront_ExpectCorrectResult
keys	plugged/ultisnips/test/test_ListSnippets.py	/^    keys = "" + LS + "3\\n"$/;"	v	class:ListAllAvailable_NothingTyped_ExpectCorrectResult
keys	plugged/ultisnips/test/test_ListSnippets.py	/^    keys = "hallo qualle" + LS + "Hi"$/;"	v	class:ListAllAvailable_NonDefined_NoExpectionShouldBeRaised
keys	plugged/ultisnips/test/test_ListSnippets.py	/^    keys = "hallo test" + LS + "1\\n"$/;"	v	class:ListAllAvailable_testtypedSecondOpt_ExpectCorrectResult
keys	plugged/ultisnips/test/test_ListSnippets.py	/^    keys = "hallo test" + LS + "2\\n"$/;"	v	class:ListAllAvailable_Disabled_ExpectCorrectResult
keys	plugged/ultisnips/test/test_ListSnippets.py	/^    keys = "hallo test" + LS + "2\\n"$/;"	v	class:ListAllAvailable_testtyped_ExpectCorrectResult
keys	plugged/ultisnips/test/test_ListSnippets.py	/^    keys = "} " + LS + "3\\n"$/;"	v	class:ListAllAvailable_BraceInFront_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "hallo test" + EX + "auch" + ESC + "ehihi" + ESC + "bb" + "ino" + JF + "end"$/;"	v	class:Mirror_TestKill_InsertEnd_Kill
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "hallo test" + EX + "auch" + ESC + "eiab" + ESC + "bb" + "ino" + JF + "end"$/;"	v	class:Mirror_TestKill_InsertAfter_NoKill
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "hallo test" + EX + "auch" + ESC + "wahi" + ESC + "bb" + "ino" + JF + "end"$/;"	v	class:Mirror_TestKill_InsertBeginning_Kill
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "hallo test" + EX + "auch" + ESC + "wihi" + ESC + "bb" + "ino" + JF + "end"$/;"	v	class:Mirror_TestKill_InsertBefore_NoKill
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "hallo test" + EX + "elt"$/;"	v	class:Mirror_TestKillTabstop_Kill
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "outer" + EX + "test" + EX + "hallo"$/;"	v	class:SimpleMirrorSameLineNoSpaceInsideOtherSpaceAfter_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "outer" + EX + "test" + EX + "hallo"$/;"	v	class:SimpleMirrorSameLineNoSpaceInsideOther_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "a"$/;"	v	class:MirrorBeforeTabstopOverwrite_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo Du\\nHi"$/;"	v	class:MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo Du\\nHi"$/;"	v	class:MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo Du\\nHi\\b\\bAch Blah"$/;"	v	class:MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo du"$/;"	v	class:SimpleMirrorSameLineMany_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo du\\nwie gehts"$/;"	v	class:SimpleMirrorSameLineManyMultiline_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo foo"$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_ECR
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo test"$/;"	v	class:TextTabStopTextSurroundedTab_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo welt"$/;"	v	class:TextTabStopAllSurrounded_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo welt"$/;"	v	class:TextTabStopSurroundMirror_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo"$/;"	v	class:SimpleMirrorMultilineMany_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo"$/;"	v	class:SimpleMirrorSameLineNoSpaceSpaceAfter_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo"$/;"	v	class:SimpleMirrorSameLineNoSpace_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo"$/;"	v	class:SimpleMirrorSameLine_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo"$/;"	v	class:TextTabStopAfterMirror_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo"$/;"	v	class:TextTabStopSimpleMirrorMultiline_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo"$/;"	v	class:TextTabStopTextAfterTab_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo"$/;"	v	class:TextTabStopTextBeforeMirror_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo"$/;"	v	class:TextTabStopTextBeforeTab_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo\\b\\b"$/;"	v	class:SimpleMirrorDelete_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo\\b\\bhups"$/;"	v	class:SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "hallo\\nagain"$/;"	v	class:TextTabStopSimpleMirrorMultilineMirrorInFront_ECR
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "stdin" + JF + "do snap"$/;"	v	class:TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "stdin" + JF + "overwritten"$/;"	v	class:TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "stdin" + JF + "overwritten"$/;"	v	class:TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "stdin" + JF + JF + "end"$/;"	v	class:TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "stdin"$/;"	v	class:TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "stdin"$/;"	v	class:TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "world"$/;"	v	class:SimpleTabstopWithDefaultComplexType_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + "world"$/;"	v	class:SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX + BS + "hallo foo"$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX$/;"	v	class:MirrorBeforeTabstopLeave_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX$/;"	v	class:SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX$/;"	v	class:SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX$/;"	v	class:TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "test" + EX$/;"	v	class:TabstopWithMirrorInDefaultNoType_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = "ups test blah" + ESC + "02f i" + EX + "hallo"$/;"	v	class:SimpleMirrorSameLine_InText_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = ($/;"	v	class:MirrorRealLifeExample_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Mirror.py	/^    keys = ($/;"	v	class:TabstopWithMirrorManyFromAll_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Movement.py	/^    keys = "<trh" + EX + "blah" + JF + BS + BS + JF + "end"$/;"	v	class:CursorMovement_BS_InEditMode
keys	plugged/ultisnips/test/test_Movement.py	/^    keys = "hello test this" + ESC + "02f i" + EX + "tab" + 3 * ARR_L + JF + "hallo"$/;"	v	class:IMMoving_NotExitingWhenBarelyOutsideLeft_ECR
keys	plugged/ultisnips/test/test_Movement.py	/^    keys = "hello test this" + ESC + "02f i" + EX + "tab" + 4 * ARR_L + JF + "hallo"$/;"	v	class:IMMoving_ExitWhenOutsideLeft_ECR
keys	plugged/ultisnips/test/test_Movement.py	/^    keys = "hello test this" + ESC + "02f i" + EX + "tab" + 7 * ARR_L + JF + "hallo"$/;"	v	class:IMMoving_NoExiting_ECR
keys	plugged/ultisnips/test/test_Movement.py	/^    keys = "hello test this" + ESC + "02f i" + EX + "tab" + ARR_R + JF + "hallo"$/;"	v	class:IMMoving_ExitWhenOutsideRight_ECR
keys	plugged/ultisnips/test/test_Movement.py	/^    keys = "hello test this" + ESC + "02f i" + EX + "tab" + JF + "hallo"$/;"	v	class:IMMoving_NoExitingEventAtEnd_ECR
keys	plugged/ultisnips/test/test_Movement.py	/^    keys = "test" + EX + "text" + 3 * ARR_U + 6 * ARR_D$/;"	v	class:IMMoving_CursorsKeys_ECR
keys	plugged/ultisnips/test/test_Movement.py	/^    keys = "test" + EX + "this is something\\nvery nice\\nnot" + JF + "more text"$/;"	v	class:CursorMovement_Multiline_ECR
keys	plugged/ultisnips/test/test_Movement.py	/^    keys = "test" + EX + "this" + 2 * ARR_L + "hallo\\nwelt"$/;"	v	class:IMMoving_AcceptInputWhenMoved_ECR
keys	plugged/ultisnips/test/test_Movement.py	/^    keys = ($/;"	v	class:IMMoving_ExitWhenOutsideAbove_ECR
keys	plugged/ultisnips/test/test_Movement.py	/^    keys = ($/;"	v	class:IMMoving_ExitWhenOutsideBelow_ECR
keys	plugged/ultisnips/test/test_MultipleMatches.py	/^    keys = "test" + EX + " " + ESC + ESC + "ahi"$/;"	v	class:Multiple_ManySnippetsOneTrigger_ECR
keys	plugged/ultisnips/test/test_MultipleMatches.py	/^    keys = "test" + EX + "0\\n" + "hi"$/;"	v	class:Multiple_SimpleCaseSelectZero_EEscape
keys	plugged/ultisnips/test/test_MultipleMatches.py	/^    keys = "test" + EX + "1\\n"$/;"	v	class:Multiple_SimpleCaseSelectFirst_ECR
keys	plugged/ultisnips/test/test_MultipleMatches.py	/^    keys = "test" + EX + "2\\n"$/;"	v	class:Multiple_SimpleCaseSelectSecond_ECR
keys	plugged/ultisnips/test/test_MultipleMatches.py	/^    keys = "test" + EX + "5\\n"$/;"	v	class:Multiple_SimpleCaseSelectTooHigh_ESelectLast
keys	plugged/ultisnips/test/test_MultipleMatches.py	/^    keys = "test" + EX + ESC + "hi"$/;"	v	class:Multiple_SimpleCaseEscapeOut_ECR
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "ab" + EX + "\\nac" + EX$/;"	v	class:ParseSnippets_Global_Python
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "ab" + EX + "\\nac" + EX$/;"	v	class:ParseSnippets_Global_Python_After
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "ab" + EX$/;"	v	class:ParseSnippets_Global_Local_Python
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "abc def" + EX$/;"	v	class:ParseSnippets_MultiWord_RE1
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "foo" + EX + " bar" + EX + "\\nbar" + EX$/;"	v	class:ParseSnippets_MultiWord_RE2
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "inv snip" + EX$/;"	v	class:ParseSnippets_MultiWord_UnmatchedContainer
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "snip test" + EX$/;"	v	class:ParseSnippets_MultiWord_Description
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "snippet test" + EX$/;"	v	class:ParseSnippets_MultiWord_Description_Option
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "test snip" + EX$/;"	v	class:ParseSnippets_MultiWord_NoContainer
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "test snip" + EX$/;"	v	class:ParseSnippets_MultiWord_Quotes
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "test snip" + EX$/;"	v	class:ParseSnippets_MultiWord_Simple
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "test test test" + EX$/;"	v	class:ParseSnippets_MultiWord_RE3
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "test" + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippet
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "test" + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippetContext
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "test" + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippetLocation
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "test" + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippetPostAction
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "test" + EX$/;"	v	class:ParseSnippets_PrintErroneousSnippetPreAction
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "test" + EX$/;"	v	class:ParseSnippets_PrintPythonStacktrace
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "test" + EX$/;"	v	class:ParseSnippets_PrintPythonStacktraceMultiline
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "testsnip" + EX$/;"	v	class:ParseSnippets_ClearAll
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "testsnip" + EX$/;"	v	class:ParseSnippets_ExtendsWithoutFiletype
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "testsnip" + EX$/;"	v	class:ParseSnippets_InvalidPriorityLine
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "testsnip" + EX$/;"	v	class:ParseSnippets_InvalidPriorityLine1
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "testsnip" + EX$/;"	v	class:ParseSnippets_MissingEndSnippet
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "testsnip" + EX$/;"	v	class:ParseSnippets_SimpleSnippet
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "testsnip" + EX$/;"	v	class:ParseSnippets_UnknownDirective
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "toclear" + EX + "\\n" + "testsnip" + EX$/;"	v	class:ParseSnippets_ClearOne
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = "toclear" + EX + "\\n" + "testsnip" + EX$/;"	v	class:ParseSnippets_ClearTwo
keys	plugged/ultisnips/test/test_ParseSnippets.py	/^    keys = '"test snip"' + EX$/;"	v	class:ParseSnippets_MultiWord_WithQuotes
keys	plugged/ultisnips/test/test_Plugin.py	/^    keys = ($/;"	v	class:Plugin_SuperTab_SimpleTest
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "form_for user, namespace: some_namespace, html: {i" + EX + "i" + EX$/;"	v	class:RecTabStops_ChildTriggerContainsParentTextObjects
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "    hallo m" + EX + "hi"$/;"	v	class:RecTabStops_InNewlineManualIndentTextInFront_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "    m" + EX + "hi"$/;"	v	class:RecTabStops_InNewlineManualIndent_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "hello m" + EX + "world m" + EX + "end"$/;"	v	class:RecTabsStops_TypeInZero2_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "hi" + JF + "m" + EX + "again" + JF + "m1" + EX + "CD" + JF + "DE"$/;"	v	class:RecTabStops_ExpandedInZeroTSTwice_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "hi" + JF + "m" + EX + "m1" + EX + "CD" + JF + "DE" + JF + "AB"$/;"	v	class:RecTabStops_ExpandedInZeroTSSecondTime_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "hi" + JF + "m1" + EX + "CD" + JF + "DE"$/;"	v	class:RecTabStops_ExpandedInZeroTS_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m" + EX + "a" + 4 * ARR_L + JF + "hallo" + JF + "world"$/;"	v	class:RecTabStops_LeavingInner_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m" + EX + "hello" + JF + "world" + JF + "ups" + JF + "end"$/;"	v	class:RecTabStops_SimpleCase_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m" + EX + "hello" + JF + "world" + JF + JF + JF + "end"$/;"	v	class:RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m" + EX + "hello" + JF + JF + JF + "world" + JF + "end"$/;"	v	class:RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m" + EX + "hi" + JF + "hallo" + JF + "end"$/;"	v	class:RecTabStops_InNewlineMultilineWithNonZeroTS_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m" + EX + "hi"$/;"	v	class:RecTabStops_InNewlineMultilineWithIndent_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m" + EX + "m" + EX + "a" + 6 * ARR_L + JF + "hallo" + JF + "end"$/;"	v	class:RecTabStops_LeavingInnerInnerTwo_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m" + EX$/;"	v	class:RecTabStops_InNewlineMultiline_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m1" + EX + " m1" + EX + "hi" + JF + "two" + JF + "end"$/;"	v	class:RecTabStops_InnerWOTabStopTwiceDirectly_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m1" + EX + "CD" + JF + "DE"$/;"	v	class:RecTabStops_OuterOnlyWithZeroTS_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m1" + EX + "CD" + JF + "DE"$/;"	v	class:RecTabStops_OuterOnlyWithZero_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m1" + EX + "hi" + JF + "two" + JF + "end"$/;"	v	class:RecTabStops_InnerWOTabStop_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + "m1" + EX + JF + "m1" + EX + "hi" + JF + "end"$/;"	v	class:RecTabStops_InnerWOTabStopTwice_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = "m" + EX + JF + JF + BS + "m" + EX$/;"	v	class:RecTabsStops_BackspaceZero_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = ($/;"	v	class:RecTabStops_BarelyNotLeavingInner_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = ($/;"	v	class:RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = ($/;"	v	class:RecTabStops_InNewlineInTabstop_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = ($/;"	v	class:RecTabStops_LeavingInnerInner_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = ($/;"	v	class:RecTabStops_MirrorInnerSnippet_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = ($/;"	v	class:RecTabStops_MirroredZeroTS_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = ($/;"	v	class:RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = ($/;"	v	class:RecTabStops_ZeroTSisNothingSpecial_ECR
keys	plugged/ultisnips/test/test_Recursive.py	/^    keys = ($/;"	v	class:RecTabsStops_TypeInZero_ECR
keys	plugged/ultisnips/test/test_Selection.py	/^    keys = "for" + EX + "k" + JF$/;"	v	class:ExclusiveSelection_RealWorldCase_Test
keys	plugged/ultisnips/test/test_Selection.py	/^    keys = "for" + EX + "k" + JF$/;"	v	class:OldSelection_RealWorldCase_Test
keys	plugged/ultisnips/test/test_Selection.py	/^    keys = "test" + EX + "Hello"$/;"	v	class:_SelectModeMappings
keys	plugged/ultisnips/test/test_Selection.py	/^    keys = "test" + EX + "ui" + JF$/;"	v	class:ExclusiveSelection_SimpleTabstop_Test
keys	plugged/ultisnips/test/test_Selection.py	/^    keys = "test" + EX + "ui" + JF$/;"	v	class:OldSelection_SimpleTabstop_Test
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "$frac" + EX + JF + JF + "blub"$/;"	v	class:snipMate_Issue1325
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "blablub" + ESC + "0v6l" + EX + "v" + EX$/;"	v	class:snipMate_Visual_Simple
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "def" + EX$/;"	v	class:snipMate_OverwrittenByRegExpTrigger
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "for" + EX + "blub" + JF + "j" + JF + "hi"$/;"	v	class:snipMate_TestMirrors
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "hello" + EX + "2\\n"$/;"	v	class:snipMate_MultiMatches
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "hello" + EX + "\\nhello1" + EX + "\\nhello2" + EX$/;"	v	class:snipMate_SimpleSnippetInSnippetFile
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "hello" + EX + ESC + ":set ft=blubi\\nohello" + EX$/;"	v	class:snipMate_OtherFiletype
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "hello" + EX$/;"	v	class:snipMate_Disabled
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "hello" + EX$/;"	v	class:snipMate_SimpleSnippet
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "hello" + EX$/;"	v	class:snipMate_SimpleSnippetSubDirectory
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "opt" + EX + "some" + JF + "not" + JF + "ende"$/;"	v	class:snipMate_TestMirrorsInPlaceholders_Overwrite
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "opt" + EX + "some" + JF + JF + "ende"$/;"	v	class:snipMate_TestMirrorsInPlaceholders
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "os." + EX + "foo\\n." + EX$/;"	v	class:snipMate_Issue1344
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "test" + EX + "blub" + JF + "blah"$/;"	v	class:snipMate_TestNoBraceTabstops
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "test" + EX + "blub" + JF + "blah"$/;"	v	class:snipMate_TestNoBraceTabstopsAndMirrors
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "test" + EX + JF + "hi"$/;"	v	class:snipMate_NoNestedTabstops
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "test" + EX$/;"	v	class:snipMate_EmptyLinesContinueSnippets
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "test" + EX$/;"	v	class:snipMate_Interpolation
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = "test" + EX$/;"	v	class:snipMate_InterpolationWithSystem
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = ESC + ":set fo=r\\n" + "i\/*" + EX + "1\\n2"$/;"	v	class:snipMate_Issue658
keys	plugged/ultisnips/test/test_SnipMate.py	/^    keys = ESC + ":set ft=a\\n" + "itest1" + EX$/;"	v	class:snipMate_Extends
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "[]" + ARR_L + "a" + EX + "1" + JF + "2"$/;"	v	class:SnippetActions_PostActionModifiesCharAfterSnippet
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "\\n3" + ARR_U + "a" + EX + "1" + JF + "2"$/;"	v	class:SnippetActions_PostActionModifiesLineAfterSnippet
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "\\ni" + EX + "i" + EX + "x" + JF + "y" + JF + JF + "z"$/;"	v	class:SnippetActions_CanModifyParentBody
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "\\ni" + EX + "i" + EX + "x"$/;"	v	class:SnippetActions_EnsureIndent
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "\\ni" + EX + "x" + JF + "y"$/;"	v	class:SnippetActions_PostActionCanUseSnippetRange
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "a" + EX + "123"$/;"	v	class:SnippetActions_DoNotBreakCursorOnSingleLikeChange
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "a" + EX$/;"	v	class:SnippetActions_ErrorOnBufferModificationThroughCommand
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "a" + EX$/;"	v	class:SnippetActions_PostActionModifiesBuffer
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "a" + EX$/;"	v	class:SnippetActions_PreActionModifiesBuffer
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "i" + EX + "blah" + JF + "n" + EX + JF + "pass"$/;"	v	class:SnippetActions_CanExpandSnippetInDifferentPlace
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "i" + EX + "p" + EX + JF + "z"$/;"	v	class:SnippetActions_MoveParentSnippetFromChildInPreAction
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "i" + EX + "x" + JF + "1" + JF + "2" + JF + ";"$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpAction
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "i" + EX + "x" + JF + JF + "1" + JF + "2" + JF + ";"$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "i" + EX$/;"	v	class:SnippetActions_CanUseContextFromContextMatch
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "i" + EX$/;"	v	class:SnippetActions_ErrorOnModificationSnippetLine
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "test" + EX + "1" + JF + "2" + JF + "3" + JF + " or 4" + JF + "5"$/;"	v	class:SnippetActions_CanExpandAnonSnippetOnFirstJump
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "test" + EX + "1" + JF + "2" + JF + "3" + JF + "4"$/;"	v	class:SnippetActions_CanEvenWrapSnippetInPreAction
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "test" + EX + "1" + JF + "2" + JF + "3"$/;"	v	class:SnippetActions_CanExpandAnonOnPreExpand
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = "test" + EX + "1" + JF + "2"$/;"	v	class:SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = ($/;"	v	class:SnippetActions_CanMirrorTabStopsOutsideOfSnippet
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = ($/;"	v	class:SnippetActions_MoveVisual
keys	plugged/ultisnips/test/test_SnippetActions.py	/^    keys = ($/;"	v	class:SnippetActions_UseCorrectJumpActions
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "   test it" + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "   test" + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand2
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "  test it" + EX + "1\\n"$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "  test" + EX + "1\\n"$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "  test" + EX$/;"	v	class:No_Tab_Expand_ET_Leading_Spaces
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "  test" + EX$/;"	v	class:No_Tab_Expand_Leading_Spaces
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = " ." + EX$/;"	v	class:SnippetOptions_Regex_Self_Space
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = " .a" + EX$/;"	v	class:SnippetOptions_Regex_Self_TextAfter
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "$test" + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "-test" + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "." + EX$/;"	v	class:SnippetOptions_Regex_Self_Start
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "[[test" + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix3
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "\\t\\thi" + EX$/;"	v	class:No_Tab_Expand_RealWorld
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "\\ttest" + EX$/;"	v	class:No_Tab_Expand_Leading_Tabs
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "a test it" + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "a test it" + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "a test" + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "a test" + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "a(test" + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix2
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "a-test it" + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_ExpandSuffix
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "a-test" + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "a." + EX$/;"	v	class:SnippetOptions_Regex_Self_TextBefore
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "abc test test" + EX$/;"	v	class:SnippetOptions_Regex_SameLine_Long_Start
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "abc test test" + EX$/;"	v	class:SnippetOptions_Regex_SameLine_Simple
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "atest it" + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "atest it" + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_NoExpand
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "atest" + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippets_SimpleExpand
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "atest" + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_NoExpand
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test " + EX$/;"	v	class:SnippetOptions_Regex_WithSpace
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test cabfed" + EX$/;"	v	class:SnippetOptions_Regex_PythonBlockMatch
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test cabfed" + EX$/;"	v	class:SnippetOptions_Regex_PythonBlockNoMatch
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test it" + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test it" + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_NormalExpand
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test it" + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test me" + EX$/;"	v	class:MultiWordSnippet_Simple
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test test abc" + EX$/;"	v	class:SnippetOptions_Regex_SameLine_Long_End
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test test test" + EX$/;"	v	class:SnippetOptions_Regex_Multiple
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test" + EX$/;"	v	class:No_Tab_Expand_ET
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test" + EX$/;"	v	class:No_Tab_Expand_ET_SW
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test" + EX$/;"	v	class:No_Tab_Expand_ET_SW_TS
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test" + EX$/;"	v	class:No_Tab_Expand_No_TS
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test" + EX$/;"	v	class:No_Tab_Expand_Simple
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test" + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippets_ExpandSingle
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test" + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_NormalExpand
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test" + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "test" + EX$/;"	v	class:SnippetOptions_Regex_Expand
keys	plugged/ultisnips/test/test_SnippetOptions.py	/^    keys = "ßßtest" + EX$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3
keys	plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = "test me" + EX$/;"	v	class:SnippetPriorities_MultiWordTriggerOverwriteExisting
keys	plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = "test" + EX + "1\\n\\n" + "test" + EX + "2\\n"$/;"	v	class:SnippetPriorities_OverwriteThenChoose_ECR
keys	plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = "test" + EX$/;"	v	class:SnippetPriorities_AddedHasHigherThanFile
keys	plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = "test" + EX$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded
keys	plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = "test" + EX$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded_neg_prio
keys	plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = "test" + EX$/;"	v	class:SnippetPriorities_OverwriteExisting
keys	plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = "test" + EX$/;"	v	class:SnippetPriorities_OverwriteTwice_ECR
keys	plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = "test" + EX$/;"	v	class:SnippetPriorities_SimpleClear
keys	plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = "test" + EX$/;"	v	class:SnippetPriorities_SimpleClear2
keys	plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = "test1" + EX$/;"	v	class:SnippetPriorities_DoNotCareAboutNonMatchings
keys	plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = ($/;"	v	class:SnippetPriorities_ClearedByChild
keys	plugged/ultisnips/test/test_SnippetPriorities.py	/^    keys = ESC + ":set ft=c\\n" + "itest" + EX$/;"	v	class:SnippetPriorities_ClearedByParent
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "echo" + EX + "test"$/;"	v	class:TabStop_Exit_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "echo" + EX$/;"	v	class:TabStopNoReplace_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "hallo" + EX + "Nase"$/;"	v	class:TabStopSimpleReplaceSurrounded1_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "hallo" + EX + "Nase"$/;"	v	class:TabStopSimpleReplaceSurrounded_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "hallo" + EX + "Test" + JF + "Hi" + JF + JF + "du"$/;"	v	class:TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "hallo" + EX + "haselnut" + 2 * ARR_L + "hips" + JF + "end"$/;"	v	class:TabStopNavigatingInInsertModeSimple_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "hallo" + EX + "na" + JF + "Du Nase"$/;"	v	class:TabStopSimpleReplaceReversed_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "hallo" + EX + "na" + JF + "Du Nase"$/;"	v	class:TabStopSimpleReplace_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "hallo" + EX + "ship"$/;"	v	class:TabStopWithOneChar_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "hallo" + EX + JF + "Test" + JF + "Hi"$/;"	v	class:TabStopTestJumping2_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "hallo" + EX + JF + "Test" + JF + "Hi"$/;"	v	class:TabStopTestJumping_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "i" + EX + EX + "1" + JF + "2" + JF + " after" + JF + "3"$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "i" + EX + EX + "1" + JF + "2" + JF + " after" + JF + "3"$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + " blah" + JF + "Hallo"$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "Hallo"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite0
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "Hallo"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite1
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "Hallo"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "Hello" + JF + "World" + JF$/;"	v	class:TabStop_AdjacentTabStopAddText_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "Hello" + JF + "World"$/;"	v	class:TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "Nothing"$/;"	v	class:TabStop_Multiline_MirrorInFront_Overwrite
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "Nothing"$/;"	v	class:TabStop_Multiline_Overwrite
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "WORLD" + JF + "End"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "[ -u -v -d ]"$/;"	v	class:TabStop_EscapingChars_RealLife
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "blub" + JF + "hello"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "hello" + JF + "world"$/;"	v	class:TabStop_EscapingChars_Backslash4
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "hi"$/;"	v	class:TabStop_EscapingCharsDollars
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + "ups" + JF + "End"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + BS + JF + "Hallo"$/;"	v	class:TabStop_TSInDefaultTextRLExample_DeleteFirst
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + BS + JF + "Nothing"$/;"	v	class:TabStop_Multiline_DelFirstOverwriteSecond_Overwrite
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + ESC + "0ihi"$/;"	v	class:TabStopEscapingWhenSelectedNoCharTS_ECR
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + ESC + "0ihi"$/;"	v	class:TabStopEscapingWhenSelectedSingleCharTS_ECR
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + ESC + "0ihi"$/;"	v	class:TabStopEscapingWhenSelected_ECR
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "Blah"$/;"	v	class:TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "Hallo" + JF + "Ende"$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "Hallo"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "Hallo"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "WORLD" + JF + "End"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "\\n" + JF + "t"$/;"	v	class:TabStop_CROnlyOnSelectedNear
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "hello"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "longertext" + JB + "overwrite" + JF + "End"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "longertext" + JB + JF + "overwrite" + JF + "End"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "longertext" + JB + JF + JF + "End"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "no" + JF + "End" + JB + "yes" + JF + "Begin" + JF + "Hi"$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "no" + JF + "End"$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecond
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + "ups" + JF + "End"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + JF + "Hallo" + JB + JB + "Blah" + JF + "Ende"$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpAround
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX + JF + JF + "Hallo" + JF + "Ende"$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpToThird
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX$/;"	v	class:TabStop_EscapingCharsBackticks
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX$/;"	v	class:TabStop_EscapingCharsDollars1
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfDefinitionText
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfLine
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX$/;"	v	class:TabStop_EscapingChars_Backslash
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX$/;"	v	class:TabStop_EscapingChars_Backslash2
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX$/;"	v	class:TabStop_EscapingChars_Backslash3
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX$/;"	v	class:TabStop_Multiline_Leave
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX$/;"	v	class:TabStop_Multiline_MirrorInFront_Leave
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = "test" + EX$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_DoNothing
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = ($/;"	v	class:TabStopTestBackwardJumping2_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = ($/;"	v	class:TabStopTestBackwardJumping_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = ($/;"	v	class:TabStopTestMultilineExpand_ExpectCorrectResult
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = ($/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack
keys	plugged/ultisnips/test/test_TabStop.py	/^    keys = ($/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "ascii" + EX + "éèàçôïÉÈÀÇÔÏ€"$/;"	v	class:Transformation_LowerCaseAsciiResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "ascii" + EX + "éèàçôïÉÈÀÇÔÏ€"$/;"	v	class:Transformation_SimpleCaseAsciiResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "hallo test" + EX + "AUCH" + ESC + "ehihi" + ESC + "bb" + "ino" + JF + "end"$/;"	v	class:Transformation_TestKill_InsertEnd_Kill
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "hallo test" + EX + "AUCH" + ESC + "eiab" + ESC + "bb" + "ino" + JF + "end"$/;"	v	class:Transformation_TestKill_InsertAfter_NoKill
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "hallo test" + EX + "AUCH" + ESC + "wahi" + ESC + "bb" + "ino" + JF + "end"$/;"	v	class:Transformation_TestKill_InsertBeginning_Kill
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "hallo test" + EX + "AUCH" + ESC + "wihi" + ESC + "bb" + "ino" + JF + "end"$/;"	v	class:Transformation_TestKill_InsertBefore_NoKill
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "hallo test" + EX + "b"$/;"	v	class:Transformation_TabIsAtEndNoTextType_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "hallo test" + EX + "some\\b\\b\\b\\b\\b"$/;"	v	class:Transformation_TabIsAtEndAndDeleted_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "hallo test" + EX + "some\\b\\b\\b\\bmore"$/;"	v	class:Transformation_TabIsAtEndAndDeleted1_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "hallo test" + EX$/;"	v	class:Transformation_TabIsAtEndNoTextLeave_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "HALLO"$/;"	v	class:Transformation_CleverTransformLongLower_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "Hallo"$/;"	v	class:Transformation_CleverTransformLowercaseChar_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "SomE tExt "$/;"	v	class:Transformation_MultipleTransformations_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "TEST"$/;"	v	class:Transformation_OptionIgnoreCase_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "a b  c d e f ghhh h oha"$/;"	v	class:Transformation_ConditionalInsertRWEllipsis_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "a some more text"$/;"	v	class:Transformation_ConditionalInsertionSimple_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "a some"$/;"	v	class:Transformation_CIBothDefinedPositive_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "a, nice,   building"$/;"	v	class:Transformation_OptionReplaceGlobalMatchInReplace_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "a, nice, building"$/;"	v	class:Transformation_OptionReplaceGlobal_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "aa"$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "aa"$/;"	v	class:Transformation_ConditionalWithEscapedDelimiter
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "ab"$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter1
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "b some"$/;"	v	class:Transformation_CIBothDefinedNegative_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "dead parrot"$/;"	v	class:Transformation_BackreferenceTwice_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "foo boo aoo"$/;"	v	class:Transformation_Backreference_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "hallo foo boy"$/;"	v	class:Transformation_SimpleCase_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "hallo foo"$/;"	v	class:Transformation_SimpleCaseTransformInFrontDefVal_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "hallo foo"$/;"	v	class:Transformation_SimpleCaseTransformInFront_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "hallo"$/;"	v	class:Transformation_CleverTransformLongUpper_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "hallo"$/;"	v	class:Transformation_CleverTransformUpercaseChar_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "hallo"$/;"	v	class:Transformation_SimpleCaseNoTransform_ExpectCorrectResult
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "hi" + JF + BS$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "sometext" + JF + "overwrite"$/;"	v	class:Transformation_InsideTabOvertype_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "sometext" + JF$/;"	v	class:Transformation_InsideTabLeaveAtDefault_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "test, hallo"$/;"	v	class:Transformation_CINewlines_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "test, hallo"$/;"	v	class:Transformation_CITabstop_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + "test, halul"$/;"	v	class:Transformation_CIEscapedParensinReplace_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + BS + "hallo"$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + BS + JF + "hi"$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test" + EX + BS$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValue_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = "test\\ntest\\ntest" + ESC + "V2k" + EX + "test" + EX$/;"	v	class:Transformation_OptionMultiline_ECR
keys	plugged/ultisnips/test/test_Transformation.py	/^    keys = ($/;"	v	class:Transformation_ConditionalInConditional_ECR
keys	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = "abc test" + EX$/;"	v	class:AddFunc_Opt
keys	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = "abc test" + EX$/;"	v	class:AddFunc_Simple
keys	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = "te'=(UltiSnips#SnippetsInCurrentScope()[{}]".format(akey) + ")\\n"$/;"	v	class:VerifyVimDict3
keys	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = "testme" + EX + "hi1" + JF + "hi2" + JF + "hi3" + JF + "hi4"$/;"	v	class:TestLangmapWithUtf8_ExpectCorrectResult
keys	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = "testme" + EX + "hi1" + JF + "hi2" + JF + "hi3" + JF + "hi4"$/;"	v	class:TestNonEmptyLangmap_ExpectCorrectResult
keys	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = "testme" + EX + "hi;" + JF + "hi2" + JF + "hi3" + JF + "hi4" + ESC + ";Hello"$/;"	v	class:TestNonEmptyLangmapWithSemi_ExpectCorrectResult
keys	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = 'te"=(UltiSnips#SnippetsInCurrentScope()[{}]'.format(akey) + ")\\n"$/;"	v	class:VerifyVimDict2
keys	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = ($/;"	v	class:AddNewSnippetSource
keys	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    keys = ($/;"	v	class:VerifyVimDict1
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "    hello\\n    nice\\n\\tworld" + ESC + "Vkk" + EX + "test" + EX$/;"	v	class:Visual_LineSelect_CheckIndentTwice
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "\\tblablub" + ESC + "5hv3l" + EX + "test" + EX$/;"	v	class:Visual_SelectOneWord_ProblemAfterTab
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "bla blub\\n  helloi" + ESC + "0k4lvjll" + EX + "test" + EX$/;"	v	class:Visual_CrossOneLine
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "blablub" + ESC + "0lv4l" + EX + "test" + EX$/;"	v	class:Visual_SelectOneWord_Inword
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "blablub" + ESC + "0v$" + EX + "test" + EX + ESC + "o"$/;"	v	class:Visual_SelectOneWord_TillEndOfLine
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "blablub" + ESC + "0v6l" + EX + "test" + EX + "\\ntest" + EX$/;"	v	class:Visual_ExpandTwice
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "blablub" + ESC + "0v6l" + EX + "test" + EX + "hello"$/;"	v	class:Visual_InDefaultText_SelectOneWord
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "blablub" + ESC + "0v6l" + EX + "test" + EX + JF + "hello"$/;"	v	class:Visual_InDefaultText_SelectOneWord_NoOverwrite
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "blablub" + ESC + "0v6l" + EX + "test" + EX$/;"	v	class:VisualTransformationWithDefault_ExpandWithVisual
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "blablub" + ESC + "0v6l" + EX + "test" + EX$/;"	v	class:VisualTransformation_SelectOneWord
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "blablub" + ESC + "0v6l" + EX + "test" + EX$/;"	v	class:VisualWithDefault_ExpandWithVisual
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "blablub" + ESC + "0v6l" + EX + "test" + EX$/;"	v	class:Visual_SelectOneWord
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "blablub" + ESC + "0v6l" + EX + "test" + EX$/;"	v	class:Visual_SelectOneWord_TwiceVisual
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX + "jup" + JF + "hi"$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_Overwrite
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX + "jup" + JF + "hi"$/;"	v	class:Visual_InDefaultText_LineSelect_Overwrite
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX + "super" + JF + "done"$/;"	v	class:Visual_LineSelect_WithTabStop
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX + "ups" + JF + "hi"$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_Overwrite
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX + JF + "hi"$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_NoOverwrite
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX + JF + "hi"$/;"	v	class:Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX + JF + "hi"$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX + JF + "hi"$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX + JF + "hi"$/;"	v	class:Visual_InDefaultText_LineSelect_NoOverwrite
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX$/;"	v	class:VisualTransformation_LineSelect_Simple
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX$/;"	v	class:Visual_LineSelect_CheckIndentSimple
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX$/;"	v	class:Visual_LineSelect_CheckIndentWithTS_NoOverwrite
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "hello\\nnice\\nworld" + ESC + "Vkk" + EX + "test" + EX$/;"	v	class:Visual_LineSelect_Simple
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "test" + EX + "abc"$/;"	v	class:Visual_NoVisualSelection_Ignore
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "test" + EX + "hi"$/;"	v	class:VisualTransformationWithDefault_ExpandWithoutVisual
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "test" + EX + "hi"$/;"	v	class:VisualWithDefaultWithSlashes_ExpandWithoutVisual
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "test" + EX + "hi"$/;"	v	class:VisualWithDefault_ExpandWithoutVisual
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "xxxyyyyxxx" + ESC + "4|vlll" + EX + "test" + EX$/;"	v	class:Visual_SelectOneWordExclusive
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = "xxxyyyyxxx" + ESC + "4|vlll" + EX + "test" + EX$/;"	v	class:Visual_SelectOneWordInclusive
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = ($/;"	v	class:Visual_LineSelect_DedentLine
keys	plugged/ultisnips/test/test_Visual.py	/^    keys = ($/;"	v	class:Visual_SelectOneWordWithTabstop_TillEndOfLine
keys	plugged/ultisnips/test/vim_test_case.py	/^    keys = ""$/;"	v	class:VimTestCase
keywords	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    keywords = models.TextField(blank=True)$/;"	v	class:Bugscache
kill	plugged/fzf/test/test_go.rb	/^  def kill$/;"	f	class:Tmux
killChan	plugged/fzf/src/terminal.go	/^	killChan           chan bool$/;"	m	struct:fzf.Terminal	typeref:typename:chan bool
killPreview	plugged/fzf/src/terminal.go	/^func (t *Terminal) killPreview() {$/;"	f	struct:fzf.Terminal
killed	plugged/fzf/src/reader.go	/^	killed   bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
kitty color theme	plugged/seoul256.vim/README.md	/^kitty color theme$/;"	s
l	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^l <- length(mm)$/;"	g
l	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^l <- length(mm)$/;"	g
label	plugged/fzf/src/options.go	/^	label  string$/;"	m	struct:fzf.labelOpts	typeref:typename:string
label	plugged/fzf/src/terminal.go	/^	label     string$/;"	m	struct:fzf.itemLine	typeref:typename:string
labelOpts	plugged/fzf/src/options.go	/^type labelOpts struct {$/;"	s	package:fzf
labelPrinter	plugged/fzf/src/terminal.go	/^type labelPrinter func(tui.Window, int)$/;"	t	package:fzf	typeref:typename:func(tui.Window, int)
labels	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    maes$tipom <- factor(maes$tipom, levels = c(1, 2), labels = c("Casada", "Solteira"))$/;"	n	vector:anonVecb1d136150206	constructor:c
labels	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    maes$tipom <- factor(maes$tipom, levels = c(1, 2), labels = c("Casada", "Solteira"))$/;"	n	vector:anonVece36e773c0206	constructor:c
lambda expressions	plugged/splitjoin.vim/spec/plugin/java_spec.rb	/^  describe "lambda expressions" do$/;"	d
land	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    land <- c("#FBC784","#F1C37A","#E6B670","#DCA865","#D19A5C",$/;"	c
land	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    land <- c("#FBC784","#F1C37A","#E6B670","#DCA865","#D19A5C",$/;"	c
lastAction	plugged/fzf/src/terminal.go	/^	lastAction         actionType$/;"	m	struct:fzf.Terminal	typeref:typename:actionType
lastAction	plugged/fzf/src/terminal.go	/^	lastAction actionType$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:actionType
lastChunk	plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) lastChunk() *Chunk {$/;"	f	struct:fzf.ChunkList	typeref:typename:*Chunk
lastFocus	plugged/fzf/src/terminal.go	/^	lastFocus          int32$/;"	m	struct:fzf.Terminal	typeref:typename:int32
lastKey	plugged/fzf/src/terminal.go	/^	lastKey            string$/;"	m	struct:fzf.Terminal	typeref:typename:string
lastX	plugged/fzf/src/tui/tcell.go	/^	lastX       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
lastY	plugged/fzf/src/tui/tcell.go	/^	lastY       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
last_modified	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    last_modified = models.DateTimeField(auto_now=True, db_index=True)$/;"	v	class:Job
last_touched	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    last_touched = models.DateTimeField(auto_now=True)$/;"	v	class:RunnableJob
lastplace_plugin	plugged/vim-lastplace/plugin/vim-lastplace.vim	/^augroup lastplace_plugin$/;"	a
latlon.format	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^latlon.format <- function(lat, lon, digits=max(6, getOption("digits") - 1))$/;"	f
latlon.format	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^latlon.format <- function(lat, lon, digits=max(6, getOption("digits") - 1))$/;"	f
launch	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def launch(self, text_before, visual_content, parent, start, end):$/;"	m	class:SnippetDefinition
launch	plugged/ultisnips/test/vim_interface.py	/^    def launch(self, config=[]):$/;"	m	class:VimInterface
launch	plugged/ultisnips/test/vim_interface.py	/^    def launch(self, config=[]):$/;"	m	class:VimInterfaceTmuxNeovim
launch_watchman	plugged/vim-coiled-snake/tests/issues/dummy_repo_16/git/hooks/fsmonitor-watchman.sample	/^sub launch_watchman {$/;"	s
layout	plugged/fzf/src/terminal.go	/^	layout             layoutType$/;"	m	struct:fzf.Terminal	typeref:typename:layoutType
layoutDefault	plugged/fzf/src/options.go	/^	layoutDefault layoutType = iota$/;"	c	package:fzf	typeref:type:layoutType
layoutReverse	plugged/fzf/src/options.go	/^	layoutReverse$/;"	c	package:fzf
layoutReverseList	plugged/fzf/src/options.go	/^	layoutReverseList$/;"	c	package:fzf
layoutType	plugged/fzf/src/options.go	/^type layoutType int$/;"	t	package:fzf	typeref:typename:int
lbg	plugged/fzf/src/ansi.go	/^	lbg  tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
leave_with_wait	plugged/ultisnips/test/vim_interface.py	/^    def leave_with_wait(self):$/;"	m	class:VimInterface
left	plugged/fzf/src/tui/light.go	/^	left     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
left	plugged/fzf/src/tui/tcell.go	/^	left        int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
left	plugged/fzf/src/tui/tui.go	/^	left        rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
lessbar	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^lessbar = function() …$/;"	f
lessbar_	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^lessbar_ = function() …$/;"	f
level	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    level = models.CharField(max_length=8, choices=STATUS_CHOICES, blank=True, null=True)$/;"	v	class:FailureLine
libname	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^"__LoadingNamespaceInfo__" <- list(libname = package.lib,$/;"	n	list:"__LoadingNamespaceInfo__"
libname	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^"__LoadingNamespaceInfo__" <- list(libname = package.lib,$/;"	n	list:"__LoadingNamespaceInfo__"
libs	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    libs: [],$/;"	p	class:genConfig.defaultConfig
limit	plugged/fzf/src/server.go	/^	limit  int$/;"	m	struct:fzf.getParams	typeref:typename:int
line	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      end: {line: line, ch: col},$/;"	p	class:complete.query.end
line	plugged/fzf/src/terminal.go	/^	line string$/;"	m	struct:fzf.eachLine	typeref:typename:string
line	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    line = models.PositiveIntegerField()$/;"	v	class:FailureLine
line	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    line = models.TextField()$/;"	v	class:TextLogError
line_index	plugged/ultisnips/pythonx/UltiSnips/text.py	/^    def line_index(self):$/;"	m	class:LineIterator
line_number	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    line_number = models.PositiveIntegerField()$/;"	v	class:TextLogError
line_till_cursor	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^    def line_till_cursor(self):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
lines	plugged/fzf/src/history.go	/^	lines    []string$/;"	m	struct:fzf.History	typeref:typename:[]string
lines	plugged/fzf/src/terminal.go	/^	lines      []string$/;"	m	struct:fzf.previewer	typeref:typename:[]string
lines	plugged/fzf/src/terminal.go	/^	lines   []string$/;"	m	struct:fzf.previewResult	typeref:typename:[]string
link_fzf_in_path	plugged/fzf/install	/^link_fzf_in_path() {$/;"	f
list	plugged/fzf/src/terminal.go	/^	list         []*Item$/;"	m	struct:fzf.previewRequest	typeref:typename:[]*Item
list	plugged/vim-coiled-snake/tests/corner_cases/indented_struct.py	/^    list = [$/;"	v
list_snippets	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def list_snippets(self):$/;"	m	class:SnippetManager
listenAddr	plugged/fzf/src/terminal.go	/^	listenAddr         *listenAddress$/;"	m	struct:fzf.Terminal	typeref:typename:*listenAddress
listenAddress	plugged/fzf/src/server.go	/^type listenAddress struct {$/;"	s	package:fzf
listenPort	plugged/fzf/src/terminal.go	/^	listenPort         *int$/;"	m	struct:fzf.Terminal	typeref:typename:*int
listenUnsafe	plugged/fzf/src/terminal.go	/^	listenUnsafe       bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
listener	plugged/fzf/src/terminal.go	/^	listener           net.Listener$/;"	m	struct:fzf.Terminal	typeref:typename:net.Listener
lists	plugged/fzf/src/merger.go	/^	lists    [][]Result$/;"	m	struct:fzf.Merger	typeref:typename:[][]Result
load	plugged/completor.vim/pythonx/completor/__init__.py	/^def load(ft, input_data=b''):$/;"	f
load	plugged/completor.vim/pythonx/completor/api.py	/^def load(args):$/;"	f
loadEagerly	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    loadEagerly: false,$/;"	p	class:genConfig.defaultConfig
loadPlugins	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^function loadPlugins(projectDir, config) {$/;"	f
load_apps	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/get_repos.exs	/^  defp load_apps do$/;"	f	module:LoadRepos	access:private
load_checkers	plugged/validator.vim/pythonx/validator/__init__.py	/^def load_checkers(ft):$/;"	f
load_completer	plugged/completor.vim/pythonx/completor/__init__.py	/^def load_completer(ft, input_data):$/;"	f
location	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def location(self):$/;"	m	class:SnippetDefinition
log_file	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^log_file = os.path.join(os.path.dirname(__file__), 'completor_python.log')$/;"	v
logger	plugged/completor.vim/pythonx/completers/ale.py	/^logger = logging.getLogger("completor")$/;"	v
logger	plugged/completor.vim/pythonx/completers/common/__init__.py	/^logger = logging.getLogger('completor')$/;"	v
logger	plugged/completor.vim/pythonx/completers/common/buffer.py	/^logger = logging.getLogger('completor')$/;"	v
logger	plugged/completor.vim/pythonx/completers/common/filename.py	/^logger = logging.getLogger('completor')$/;"	v
logger	plugged/completor.vim/pythonx/completers/common/neoinclude.py	/^logger = logging.getLogger('completor')$/;"	v
logger	plugged/completor.vim/pythonx/completers/common/omni.py	/^logger = logging.getLogger('completor')$/;"	v
logger	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^logger = logging.getLogger('completor')$/;"	v
logger	plugged/completor.vim/pythonx/completers/go.py	/^logger = logging.getLogger('completor')$/;"	v
logger	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^logger = logging.getLogger('completor')$/;"	v
logger	plugged/completor.vim/pythonx/completers/lsp/action.py	/^logger = logging.getLogger("completor")$/;"	v
logger	plugged/completor.vim/pythonx/completers/lsp/models.py	/^logger = logging.getLogger("completor")$/;"	v
logger	plugged/completor.vim/pythonx/completers/python/__init__.py	/^logger = logging.getLogger('completor')$/;"	v
logger	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^logger = logging.getLogger('python-jedi')$/;"	v
logger	plugged/completor.vim/pythonx/completor/__init__.py	/^logger = logging.getLogger('completor')$/;"	v
logger	plugged/completor.vim/pythonx/completor/api.py	/^logger = logging.getLogger('completor')$/;"	v
logger	plugged/completor.vim/pythonx/completor/utils.py	/^logger = logging.getLogger('completor')$/;"	v
logger	plugged/validator.vim/pythonx/lints/go/golangci.py	/^logger = logging.getLogger('validator')$/;"	v
logger	plugged/validator.vim/pythonx/lints/rust.py	/^logger = logging.getLogger('validator')$/;"	v
logger	plugged/validator.vim/pythonx/validator/__init__.py	/^logger = logging.getLogger('validator')$/;"	v
logger	plugged/vim-coiled-snake/tests/issues/test_3.py	/^logger = logging.getLogger(__name__)$/;"	v
lol	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^    def lol do$/;"	f
lol	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/blocks_spec.rb	/^    def lol do$/;"	f
lon.format	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^lon.format <- function(lon, digits=max(6, getOption("digits") - 1))$/;"	f
lon.format	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^lon.format <- function(lon, digits=max(6, getOption("digits") - 1))$/;"	f
lower case	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/sigil_spec.rb	/^  describe 'lower case' do$/;"	d
lua	plugged/splitjoin.vim/spec/plugin/lua_spec.rb	/^describe "lua" do$/;"	d
machine	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    machine = models.ForeignKey(Machine, on_delete=models.CASCADE)$/;"	v	class:Job
machine_architecture	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    machine_architecture = models.CharField(max_length=25, db_index=True)$/;"	v	class:ReferenceDataSignatures
machine_os_name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    machine_os_name = models.CharField(max_length=25, db_index=True)$/;"	v	class:ReferenceDataSignatures
machine_platform	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    machine_platform = models.CharField(max_length=100, db_index=True)$/;"	v	class:ReferenceDataSignatures
machine_platform	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    machine_platform = models.ForeignKey(MachinePlatform, on_delete=models.CASCADE)$/;"	v	class:Job
machine_platform	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    machine_platform = models.ForeignKey(MachinePlatform, on_delete=models.CASCADE)$/;"	v	class:RunnableJob
macros,macro definitions	plugged/splitjoin.vim/spec/support/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*macro_rules![ \\t]+([a-zA-Z0-9_]+)\/\\1\/d,macros,macro definitions\/$/;"	k	langdef:Rust
maes	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    maes <- subset(b, (age < 40) & (sex == "Female") &$/;"	g
maes	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    maes <- subset(b, (age < 40) & (sex == "Female") &$/;"	g
main	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^def main():$/;"	f
main	plugged/fzf/main.go	/^func main() {$/;"	f	package:main
main	plugged/fzf/main.go	/^package main$/;"	p
main	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^def main():$/;"	f
main	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/get_repos.exs	/^  def main do$/;"	f	module:LoadRepos	access:public
main	plugged/ultisnips/test_all.py	/^    def main():$/;"	f
main_syntax	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^  let main_syntax = 'eelixir'$/;"	v
main_syntax	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/elixir.vim	/^  let main_syntax = "elixir"$/;"	v
main_syntax	plugged/splitjoin.vim/spec/support/vim-javascript/syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
major	plugged/fzf/src/core.go	/^	major int$/;"	m	struct:fzf.revision	typeref:typename:int
makeImageBorder	plugged/fzf/src/terminal.go	/^func (t *Terminal) makeImageBorder(width int, top bool) string {$/;"	f	struct:fzf.Terminal	typeref:typename:string
makeRestart	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^makeRestart <- function(name = "",$/;"	f
makeRestart	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^makeRestart <- function(name = "",$/;"	f
makeSpace	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) makeSpace() {$/;"	f	struct:tui.LightRenderer
makeSpinner	plugged/fzf/src/terminal.go	/^func makeSpinner(unicode bool) []string {$/;"	f	package:fzf	typeref:typename:[]string
manPage	plugged/fzf/main.go	/^var manPage []byte$/;"	v	package:main	typeref:typename:[]byte
mapleader	vimrc	/^let mapleader = ' '$/;"	v
maps	plugged/splitjoin.vim/spec/plugin/yaml_spec.rb	/^  describe "maps" do$/;"	d
maps	plugged/ultisnips/test/test_Selection.py	/^    maps = ("", "")$/;"	v	class:_SelectModeMappings
maps	plugged/ultisnips/test/test_Selection.py	/^    maps = ("H", "x")$/;"	v	class:SelectModeMappings_DisableRemoveBeforeSelecting_ECR
maps	plugged/ultisnips/test/test_Selection.py	/^    maps = ("H", "x")$/;"	v	class:SelectModeMappings_RemoveBeforeSelecting_ECR
maps	plugged/ultisnips/test/test_Selection.py	/^    maps = ("H", "x"), ("e", "l")$/;"	v	class:SelectModeMappings_IgnoreMappings1_ECR
maps	plugged/ultisnips/test/test_Selection.py	/^    maps = ("H", "x"), ("e", "l")$/;"	v	class:SelectModeMappings_IgnoreMappings_ECR
maps	plugged/ultisnips/test/test_Selection.py	/^    maps = ("e", "l"), ("H", "x")$/;"	v	class:SelectModeMappings_IgnoreMappings2_ECR
margin	plugged/fzf/src/terminal.go	/^	margin             [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
markEmptyLine	plugged/fzf/src/terminal.go	/^func (t *Terminal) markEmptyLine(line int) {$/;"	f	unknown:fzf.Terminal
markOtherLine	plugged/fzf/src/terminal.go	/^func (t *Terminal) markOtherLine(line int) {$/;"	f	unknown:fzf.Terminal
markdown	vimrc	/^augroup markdown$/;"	a
marker	plugged/fzf/src/terminal.go	/^	marker             string$/;"	m	struct:fzf.Terminal	typeref:typename:string
markerBottom	plugged/fzf/src/terminal.go	/^	markerBottom$/;"	c	package:fzf
markerClass	plugged/fzf/src/terminal.go	/^type markerClass int$/;"	t	package:fzf	typeref:typename:int
markerEmpty	plugged/fzf/src/terminal.go	/^	markerEmpty        string$/;"	m	struct:fzf.Terminal	typeref:typename:string
markerLen	plugged/fzf/src/terminal.go	/^	markerLen          int$/;"	m	struct:fzf.Terminal	typeref:typename:int
markerMiddle	plugged/fzf/src/terminal.go	/^	markerMiddle$/;"	c	package:fzf
markerMultiLine	plugged/fzf/src/terminal.go	/^	markerMultiLine    [3]string$/;"	m	struct:fzf.Terminal	typeref:typename:[3]string
markerSingle	plugged/fzf/src/terminal.go	/^	markerSingle markerClass = iota$/;"	c	package:fzf	typeref:type:markerClass
markerTop	plugged/fzf/src/terminal.go	/^	markerTop$/;"	c	package:fzf
maskActionContents	plugged/fzf/src/options.go	/^func maskActionContents(action string) string {$/;"	f	package:fzf	typeref:typename:string
match	plugged/completor.vim/pythonx/completers/common/filename.py	/^    def match(self, input_data):$/;"	m	class:Filename
match	plugged/completor.vim/pythonx/completers/common/neoinclude.py	/^    def match(self, input_data):$/;"	m	class:Neoinclude
match	plugged/completor.vim/pythonx/completor/__init__.py	/^    def match(self, input_data):$/;"	m	class:Completor
match	plugged/fzf/src/result.go	/^	match  bool$/;"	m	struct:fzf.colorOffset	typeref:typename:bool
match	plugged/fzf/src/terminal_test.go	/^	match  string \/\/ output is matched against this regex (when output is empty string)$/;"	m	struct:fzf.want	typeref:typename:string
match clauses	plugged/splitjoin.vim/spec/plugin/rust_spec.rb	/^  describe "match clauses" do$/;"	d
match expressions	plugged/splitjoin.vim/spec/plugin/rust_spec.rb	/^  describe "match expressions" do$/;"	d
matchChunk	plugged/fzf/src/pattern.go	/^func (p *Pattern) matchChunk(chunk *Chunk, space []Result, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
matchControlSequence	plugged/fzf/src/ansi.go	/^func matchControlSequence(s string) int {$/;"	f	package:fzf	typeref:typename:int
matchOperatingSystemCommand	plugged/fzf/src/ansi.go	/^func matchOperatingSystemCommand(s string) int {$/;"	f	package:fzf	typeref:typename:int
match_count	plugged/fzf/test/test_go.rb	/^          def match_count$/;"	f	method:Tmux.until
matched	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def matched(self):$/;"	m	class:SnippetDefinition
matcher_name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    matcher_name = models.CharField(max_length=255)$/;"	v	class:TextLogErrorMatch
matches	plugged/fzf/src/matcher.go	/^	matches []Result$/;"	m	struct:fzf.partialResult	typeref:typename:[]Result
matches	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def matches(self, before, visual_content=None):$/;"	m	class:SnippetDefinition
matchtagalways	plugged/MatchTagAlways/autoload/MatchTagAlways.vim	/^  augroup matchtagalways$/;"	a
matchtagalways	plugged/MatchTagAlways/plugin/MatchTagAlways.vim	/^augroup matchtagalways$/;"	a
maxContentLength	plugged/fzf/src/server.go	/^	maxContentLength = 1024 * 1024$/;"	c	package:fzf
maxDiff	plugged/ultisnips/test/vim_test_case.py	/^    maxDiff = None  # Show all diff output, always.$/;"	v	class:VimTestCase
maxFocusEvents	plugged/fzf/src/terminal.go	/^const maxFocusEvents = 10000$/;"	c	package:fzf
maxHeightFunc	plugged/fzf/src/tui/light.go	/^	maxHeightFunc func(int) int$/;"	m	struct:tui.LightRenderer	typeref:typename:func(int) int
maxInputBuffer	plugged/fzf/src/tui/light.go	/^	maxInputBuffer  = 1024 * 1024$/;"	c	package:tui
maxItems	plugged/fzf/src/terminal.go	/^func (t *Terminal) maxItems() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
maxMulti	plugged/fzf/src/constants.go	/^	maxMulti          = math.MaxInt32$/;"	c	package:fzf
maxPartitions	plugged/fzf/src/constants.go	/^	maxPartitions           = 32$/;"	c	package:fzf
maxPatternLength	plugged/fzf/src/constants.go	/^	maxPatternLength  = 300$/;"	c	package:fzf
maxSize	plugged/fzf/src/history.go	/^	maxSize  int$/;"	m	struct:fzf.History	typeref:typename:int
mayTriggerPreview	plugged/fzf/src/terminal.go	/^func mayTriggerPreview(opts *Options) bool {$/;"	f	package:fzf	typeref:typename:bool
menu	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^        var comp = {word: completion.name, menu: completion.type};$/;"	p	class:AnonymousFunctionfb12f65a0600.comp
merge	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^  function merge(base, value) {$/;"	f	function:genConfig
merge	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) merge(other ColorPair, except Color) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
merged	plugged/fzf/src/merger.go	/^	merged   []Result$/;"	m	struct:fzf.Merger	typeref:typename:[]Result
mergedGet	plugged/fzf/src/merger.go	/^func (mg *Merger) mergedGet(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
merger	plugged/fzf/src/terminal.go	/^	merger             *Merger$/;"	m	struct:fzf.Terminal	typeref:typename:*Merger
mergerCache	plugged/fzf/src/matcher.go	/^	mergerCache    map[string]*Merger$/;"	m	struct:fzf.Matcher	typeref:typename:map[string]*Merger
mergerCacheMax	plugged/fzf/src/constants.go	/^	mergerCacheMax int = 100000$/;"	c	package:fzf	typeref:typename:int
message	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    message = models.TextField(blank=True, null=True)$/;"	v	class:FailureLine
meta	plugged/completor.vim/pythonx/completor/__init__.py	/^    meta = None$/;"	v	class:Completor
metadata	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def metadata(self):$/;"	m	class:TextLogError
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = "textDocument\/hover"$/;"	v	class:Hover
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = "textDocument\/implementation"$/;"	v	class:Implementation
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = "textDocument\/references"$/;"	v	class:References
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = "textDocument\/signatureHelp"$/;"	v	class:Signature
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = "workspace\/didChangeConfiguration"$/;"	v	class:DidChangeConfiguration
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = "workspace\/symbol"$/;"	v	class:Symbol
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = ''$/;"	v	class:Base
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = 'initialize'$/;"	v	class:Initialize
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = 'initialized'$/;"	v	class:Initialized
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = 'textDocument\/codeAction'$/;"	v	class:CodeAction
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = 'textDocument\/completion'$/;"	v	class:Completion
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = 'textDocument\/definition'$/;"	v	class:Definition
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = 'textDocument\/didChange'$/;"	v	class:DidChange
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = 'textDocument\/didOpen'$/;"	v	class:DidOpen
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = 'textDocument\/didSave'$/;"	v	class:DidSave
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = 'textDocument\/documentSymbol'$/;"	v	class:DocumentSymbol
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = 'textDocument\/formatting'$/;"	v	class:Format
method	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    method = 'textDocument\/rename'$/;"	v	class:Rename
method	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/tuples_spec.rb	/^  def method do$/;"	f	method:xpto
method	plugged/vim-coiled-snake/tests/test_decorators.py	/^    def method():$/;"	m	class:Class
method	plugged/vim-coiled-snake/tests/test_everything.py	/^    def method():$/;"	m	class:Class
method arguments	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "method arguments" do$/;"	d
method calls	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "method calls" do$/;"	d
method options	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "method options" do$/;"	d
method_1	plugged/vim-coiled-snake/tests/test_label.py	/^    def method_1():$/;"	m	class:Documented
method_2	plugged/vim-coiled-snake/tests/test_label.py	/^    def method_2():$/;"	m	class:Documented
method_3	plugged/vim-coiled-snake/tests/test_label.py	/^    def method_3():$/;"	m	class:Documented
minHeight	plugged/fzf/src/terminal.go	/^	minHeight = 3$/;"	c	package:fzf
minIndex	plugged/fzf/src/merger.go	/^	minIndex int32$/;"	m	struct:fzf.Merger	typeref:typename:int32
minItem	plugged/fzf/src/item.go	/^var minItem = Item{text: util.Chars{Index: math.MinInt32}}$/;"	v	package:fzf
minRank	plugged/fzf/src/result.go	/^func minRank() Result {$/;"	f	package:fzf	typeref:typename:Result
minWidth	plugged/fzf/src/terminal.go	/^	minWidth  = 4$/;"	c	package:fzf
minimatch	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^var minimatch = require('minimatch');$/;"	v
minor	plugged/fzf/src/core.go	/^	minor int$/;"	m	struct:fzf.revision	typeref:typename:int
mkfifo	plugged/fzf/src/proxy_unix.go	/^func mkfifo(path string, mode uint32) (string, error) {$/;"	f	package:fzf	typeref:typename:(string, error)
mkfifo	plugged/fzf/src/proxy_windows.go	/^func mkfifo(path string, mode uint32) (string, error) {$/;"	f	package:fzf	typeref:typename:(string, error)
mkline	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def mkline(self, line="", indent=None):$/;"	m	class:SnippetUtil
mm	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^mm <- methods(ff)$/;"	g
mm	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^mm <- methods(ff)$/;"	g
mode	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def mode(self):$/;"	m	class:VimPosition
mode	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def mode(self):$/;"	m	class:VisualContentPreserver
modified	plugged/fzf/src/history.go	/^	modified map[int]string$/;"	m	struct:fzf.History	typeref:typename:map[int]string
modified	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    modified = models.DateTimeField()$/;"	v	class:Bugscache
modified	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    modified = models.DateTimeField(auto_now=True)$/;"	v	class:ClassifiedFailure
modified	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    modified = models.DateTimeField(auto_now=True)$/;"	v	class:FailureLine
module namespaces	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "module namespaces" do$/;"	d
modules,module names	plugged/splitjoin.vim/spec/support/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?mod[ \\t]+([a-zA-Z0-9_]+)\/\\2\/m,modules,module names\/$/;"	k	langdef:Rust
more_code	plugged/vim-coiled-snake/tests/test_everything.py	/^more_code = 1$/;"	v
morebar	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^morebar = function() …$/;"	f
mouse	plugged/fzf/src/tui/light.go	/^	mouse         bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
mouse	plugged/fzf/src/tui/tui.go	/^	mouse        bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
mouseSequence	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) mouseSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
move	plugged/fzf/src/terminal.go	/^func (t *Terminal) move(y int, x int, clear bool) {$/;"	f	struct:fzf.Terminal
move	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) move(y int, x int) {$/;"	f	struct:tui.LightRenderer
move	plugged/ultisnips/pythonx/UltiSnips/position.py	/^    def move(self, pivot, delta):$/;"	m	class:Position
moveCursor	plugged/fzf/src/tui/tcell.go	/^	moveCursor  bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
msg	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    msg <- NULL$/;"	v	function:attr.all.equal
msg	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    msg <- NULL$/;"	v	function:attr.all.equal
multi	plugged/fzf/src/terminal.go	/^	multi              int$/;"	m	struct:fzf.Terminal	typeref:typename:int
multiLine	plugged/fzf/src/terminal.go	/^	multiLine          bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
mutex	plugged/fzf/src/cache.go	/^	mutex sync.Mutex$/;"	m	struct:fzf.ChunkCache	typeref:typename:sync.Mutex
mutex	plugged/fzf/src/chunklist.go	/^	mutex  sync.Mutex$/;"	m	struct:fzf.ChunkList	typeref:typename:sync.Mutex
mutex	plugged/fzf/src/reader.go	/^	mutex    sync.Mutex$/;"	m	struct:fzf.Reader	typeref:typename:sync.Mutex
mutex	plugged/fzf/src/terminal.go	/^	mutex              sync.Mutex$/;"	m	struct:fzf.Terminal	typeref:typename:sync.Mutex
my_function	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/with_spec.rb	/^  def my_function do$/;"	f	method:resend_confirmation.create_user
mypy	plugged/ultisnips/mypy.ini	/^[mypy]$/;"	s
mypy-unidecode	plugged/ultisnips/mypy.ini	/^[mypy-unidecode]$/;"	s
mypy-vim	plugged/ultisnips/mypy.ini	/^[mypy-vim]$/;"	s
mypy_path	plugged/ultisnips/mypy.ini	/^mypy_path=pythonx\/UltiSnips$/;"	k	section:mypy
mysql_fts_operators_re	plugged/vim-coiled-snake/tests/issues/test_3.py	/^mysql_fts_operators_re = re.compile(r'[-+@<>()~*"]')$/;"	v
n	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    n <- length(lon)$/;"	v	function:latlon.format
n	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    n <- length(lon)$/;"	v	function:lon.format
n	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    n <- length(lon)$/;"	v	function:latlon.format
n	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    n <- length(lon)$/;"	v	function:lon.format
n	vimrc	/^nnoremap n nzz$/;"	m
na.rm	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^              arr = mean(arr <- delay, na.rm = TRUE),$/;"	g
na.rm	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^              dep = mean(dep <- delay, na.rm = TRUE)$/;"	g
na.rm	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^              arr = mean(arr <- delay, na.rm = TRUE),$/;"	g
na.rm	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^              dep = mean(dep <- delay, na.rm = TRUE)$/;"	g
name	plugged/completor.vim/pythonx/completers/javascript/package.json	/^  "name": "tern_wrapper",$/;"	s
name	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      name: filename,$/;"	p	class:complete.file
name	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^    name = NULL,$/;"	f	class:Person
name	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    structure(list(name = name, exit = NULL, handler = handler,$/;"	n	list:makeRestart.anonListb1d136150307
name	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    structure(list(name = name, exit = NULL, handler = handler,$/;"	n	list:makeRestart.anonListe36e773c0307
name	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/blocks_spec.rb	/^    def name(param) do$/;"	f	method:name
name	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/blocks_spec.rb	/^    def name(param) do$/;"	f	method:name.name
name	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/blocks_spec.rb	/^    def name, do: IO.puts "bobmarley"$/;"	f
name	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/blocks_spec.rb	/^    def name, do: IO.puts "bobmarley"$/;"	f	method:name
name	plugged/splitjoin.vim/spec/support/vim-elm-syntax/addon-info.json	/^  "name": "vim-elm-syntax",$/;"	s
name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    name = models.CharField(max_length=100)$/;"	v	class:JobGroup
name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    name = models.CharField(max_length=100)$/;"	v	class:JobType
name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    name = models.CharField(max_length=100, unique=True)$/;"	v	class:NamedModel
name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    name = models.CharField(max_length=200)$/;"	v	class:TextLogStep
name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    name = models.CharField(max_length=255)$/;"	v	class:ReferenceDataSignatures
name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    name = models.CharField(max_length=255, unique=True)$/;"	v	class:Group
name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    name = models.CharField(max_length=50)$/;"	v	class:JobLog
name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    name = models.CharField(max_length=50, unique=True)$/;"	v	class:Matcher
name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    name = models.CharField(max_length=50, unique=True, db_index=True)$/;"	v	class:Repository
name_temp	plugged/ultisnips/test/vim_interface.py	/^    def name_temp(self, file_path):$/;"	m	class:TempFileManager
namespaceImport	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^namespaceImport <- function(self, ...)$/;"	f
namespaceImport	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^namespaceImport <- function(self, ...)$/;"	f
needPreviewWindow	plugged/fzf/src/terminal.go	/^func (t *Terminal) needPreviewWindow() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
needWinpty	plugged/fzf/src/winpty.go	/^func needWinpty(_ *Options) bool {$/;"	f	package:fzf	typeref:typename:bool
needWinpty	plugged/fzf/src/winpty_windows.go	/^func needWinpty(opts *Options) bool {$/;"	f	package:fzf	typeref:typename:bool
negative	plugged/ultisnips/test/test_ContextSnippets.py	/^    negative = "no xxx"$/;"	v	class:ContextSnippets_ContextHasAccessToReMatch
neocomplete#sources#ultisnips#define	plugged/ultisnips/autoload/neocomplete/sources/ultisnips.vim	/^function! neocomplete#sources#ultisnips#define() abort$/;"	f
neovim:	plugged/vim-lastplace/README.md	/^### neovim:$/;"	S	section:vim-lastplace v4.6.0""Install
nested_function	plugged/vim-coiled-snake/tests/test_everything.py	/^    def nested_function():$/;"	f	function:function	file:
nested_method	plugged/vim-coiled-snake/tests/test_everything.py	/^        def nested_method():$/;"	f	member:Class.method	file:
new	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def self.new$/;"	S	module:EexBuffer
new	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def self.new$/;"	S	module:ExBuffer
newItem	plugged/fzf/src/terminal_test.go	/^func newItem(str string) *Item {$/;"	f	package:fzf	typeref:typename:*Item
newItems	plugged/fzf/src/terminal_test.go	/^func newItems(str ...string) []*Item {$/;"	f	package:fzf	typeref:typename:[]*Item
newRange	plugged/fzf/src/tokenizer.go	/^func newRange(begin int, end int) Range {$/;"	f	package:fzf	typeref:typename:Range
new_scratch_buffer	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def new_scratch_buffer(text):$/;"	f
new_shell	plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestBash
new_shell	plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestFish
new_shell	plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestZsh
next	plugged/fzf/src/history.go	/^func (h *History) next() string {$/;"	f	struct:fzf.History	typeref:typename:string
nextAnsiEscapeSequence	plugged/fzf/src/ansi.go	/^func nextAnsiEscapeSequence(s string) (int, int) {$/;"	f	package:fzf	typeref:typename:(int, int)
nextInt	plugged/fzf/src/options.go	/^func nextInt(args []string, i *int, message string) (int, error) {$/;"	f	package:fzf	typeref:typename:(int, error)
nextString	plugged/fzf/src/options.go	/^func nextString(args []string, i *int, message string) (string, error) {$/;"	f	package:fzf	typeref:typename:(string, error)
nm	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        nm <- attributes(envir)[["names", exact = TRUE]]$/;"	v	function:topenv
nm	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        nm <- attributes(envir)[["names", exact = TRUE]]$/;"	v	function:topenv
noSeparatorLine	plugged/fzf/src/terminal.go	/^func (t *Terminal) noSeparatorLine() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
noSeparatorLine	plugged/fzf/src/terminal.go	/^func noSeparatorLine(style infoStyle, separator bool) bool {$/;"	f	package:fzf	typeref:typename:bool
no_unidecode_available	plugged/ultisnips/test/util.py	/^def no_unidecode_available():$/;"	f
none_exists	plugged/validator.vim/tests/test_javascript.py	/^def none_exists(monkeypatch):$/;"	f
normal	plugged/fzf/src/tui/tcell.go	/^	normal      ColorPair$/;"	m	struct:tui.TcellWindow	typeref:typename:ColorPair
normal_func	plugged/vim-coiled-snake/tests/issues/test_6.py	/^def normal_func(db):$/;"	f
normalize	plugged/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
normalize	plugged/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.term	typeref:typename:bool
normalizeRune	plugged/fzf/src/algo/algo.go	/^func normalizeRune(r rune) rune {$/;"	f	package:algo	typeref:typename:rune
normalize_file_path	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/common.py	/^def normalize_file_path(path: str) -> str:$/;"	f	typeref:typename:str
normalized	plugged/fzf/src/algo/normalize.go	/^var normalized = map[rune]rune{$/;"	v	package:algo
nothing	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^nothing <- function(x)$/;"	f
nothing	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^nothing <- function(x)$/;"	f
notify	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    notify = False$/;"	v	class:Base
notify	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    notify = True$/;"	v	class:DidChange
notify	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    notify = True$/;"	v	class:DidChangeConfiguration
notify	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    notify = True$/;"	v	class:DidOpen
notify	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    notify = True$/;"	v	class:DidSave
notify	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    notify = True$/;"	v	class:Initialized
notifyOnCont	plugged/fzf/src/terminal_unix.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnCont	plugged/fzf/src/terminal_windows.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	plugged/fzf/src/terminal_unix.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	plugged/fzf/src/terminal_windows.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyStop	plugged/fzf/src/terminal_unix.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
notifyStop	plugged/fzf/src/terminal_windows.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
ns	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        ns <- loadNamespace(package, c(which.lib.loc, lib.loc),$/;"	v	function:foo
ns	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    for (ns in list(...)) namespaceImportFrom(self, asNamespace(ns))$/;"	v	function:namespaceImport
ns	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    ns <- tryCatch(asNamespace(pkg), hasNoNamespaceError = function(e) NULL)$/;"	v	function:"::"
ns	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        ns <- loadNamespace(package, c(which.lib.loc, lib.loc),$/;"	v	function:foo
ns	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    for (ns in list(...)) namespaceImportFrom(self, asNamespace(ns))$/;"	v	function:namespaceImport
ns	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    ns <- tryCatch(asNamespace(pkg), hasNoNamespaceError = function(e) NULL)$/;"	v	function:"::"
nsInfo	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^nsInfo <- if(file.exists(nsInfoFilePath)) .readRDS(nsInfoFilePath)$/;"	g
nsInfo	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^nsInfo <- if(file.exists(nsInfoFilePath)) .readRDS(nsInfoFilePath)$/;"	g
nsInfoFilePath	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^nsInfoFilePath <- file.path(pkgpath, "Meta", "nsInfo.rds")$/;"	g
nsInfoFilePath	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^nsInfoFilePath <- file.path(pkgpath, "Meta", "nsInfo.rds")$/;"	g
ntabs_to_proper_indent	plugged/ultisnips/pythonx/UltiSnips/indent_util.py	/^    def ntabs_to_proper_indent(self, ntabs):$/;"	m	class:IndentUtil
nth	plugged/fzf/src/pattern.go	/^	nth           []Range$/;"	m	struct:fzf.Pattern	typeref:typename:[]Range
numItemLines	plugged/fzf/src/terminal.go	/^func (t *Terminal) numItemLines(item *Item, atMost int) (int, bool) {$/;"	f	struct:fzf.Terminal	typeref:typename:(int, bool)
numLines	plugged/fzf/src/terminal.go	/^	numLines  int$/;"	m	struct:fzf.itemLine	typeref:typename:int
numLines	plugged/fzf/src/terminal.go	/^	numLines  int$/;"	m	struct:fzf.previewed	typeref:typename:int
numPartitionsMultiplier	plugged/fzf/src/constants.go	/^	numPartitionsMultiplier = 8$/;"	c	package:fzf
number	plugged/fzf/src/terminal.go	/^	number        bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
number	plugged/ultisnips/pythonx/UltiSnips/text_objects/tabstop.py	/^    def number(self):$/;"	m	class:TabStop
number	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^    def number(self):  # pylint:disable=no-self-use$/;"	m	class:VimBuffer
o	autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
o	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
o	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^      nmap <buffer> o <plug>(plug-preview)$/;"	m
obj	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    obj = (0, 3)$/;"	v	class:MovePosition_DelSameLine1
obj	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    obj = (0, 3)$/;"	v	class:MovePosition_InsSameLine1
obj	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    obj = (0, 9)$/;"	v	class:MovePosition_DelSameLine
obj	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    obj = (0, 9)$/;"	v	class:MovePosition_InsSameLine2
obj	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    obj = (1, 0)$/;"	v	class:MovePosition_DelSecondLine
obj	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    obj = (1, 3)$/;"	v	class:MovePosition_DelSecondLine1
objects	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    objects = JobManager()$/;"	v	class:Job
objects	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    objects = OptionCollectionManager()$/;"	v	class:OptionCollection
objects	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    objects = models.Manager()$/;"	v	class:BugJobMap
obtain_lock	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/receive_spec.rb	/^  def obtain_lock(pid, key, timeout \\\\ 60_000) do$/;"	f
octal	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/numbers_spec.rb	/^  describe 'octal' do$/;"	d
offset	plugged/fzf/src/ansi.go	/^	offset [2]int32$/;"	m	struct:fzf.ansiOffset	typeref:typename:[2]int32
offset	plugged/fzf/src/result.go	/^	offset [2]int32$/;"	m	struct:fzf.colorOffset	typeref:typename:[2]int32
offset	plugged/fzf/src/server.go	/^	offset int$/;"	m	struct:fzf.getParams	typeref:typename:int
offset	plugged/fzf/src/terminal.go	/^	offset             int$/;"	m	struct:fzf.Terminal	typeref:typename:int
offset	plugged/fzf/src/terminal.go	/^	offset     int$/;"	m	struct:fzf.previewer	typeref:typename:int
offset	plugged/fzf/src/terminal.go	/^	offset    int$/;"	m	struct:fzf.previewed	typeref:typename:int
offset	plugged/fzf/src/terminal.go	/^	offset  int$/;"	m	struct:fzf.previewResult	typeref:typename:int
offsetComponentRegex	plugged/fzf/src/terminal.go	/^var offsetComponentRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
offsetPollTries	plugged/fzf/src/tui/light.go	/^	offsetPollTries = 10$/;"	c	package:tui
offsetRegexp	plugged/fzf/src/tui/light.go	/^var offsetRegexp = regexp.MustCompile("(.*)\\x1b\\\\[([0-9]+);([0-9]+)R")$/;"	v	package:tui
offsetRegexpBegin	plugged/fzf/src/tui/light.go	/^var offsetRegexpBegin = regexp.MustCompile("^\\x1b\\\\[[0-9]+;[0-9]+R")$/;"	v	package:tui
offsetTrimCharsRegex	plugged/fzf/src/terminal.go	/^var offsetTrimCharsRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
on_code_action	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def on_code_action(self, data):$/;"	m	class:Lsp
on_complete	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^    def on_complete(self, items):$/;"	m	class:Clang
on_complete	plugged/completor.vim/pythonx/completers/go.py	/^    def on_complete(self, items):$/;"	m	class:Go
on_complete	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def on_complete(self, data):$/;"	m	class:Lsp
on_complete	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    def on_complete(self, data):$/;"	m	class:Jedi
on_complete	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^    def on_complete(self, args):$/;"	m	class:JediProcessor
on_complete	plugged/completor.vim/pythonx/completers/rust.py	/^    def on_complete(self, items):$/;"	m	class:Racer
on_data	plugged/completor.vim/pythonx/completor/__init__.py	/^    def on_data(self, action, data):$/;"	m	class:Completor
on_data	plugged/completor.vim/pythonx/completor/api.py	/^def on_data(args):$/;"	f
on_definition	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^    def on_definition(self, items):$/;"	m	class:Clang
on_definition	plugged/completor.vim/pythonx/completers/go.py	/^    def on_definition(self, items):$/;"	m	class:Go
on_definition	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def on_definition(self, data):$/;"	m	class:Lsp
on_definition	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    def on_definition(self, data):$/;"	m	class:Jedi
on_definition	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^    def on_definition(self, args):$/;"	m	class:JediProcessor
on_definition	plugged/completor.vim/pythonx/completers/rust.py	/^    def on_definition(self, items):$/;"	m	class:Racer
on_doc	plugged/completor.vim/pythonx/completers/go.py	/^    def on_doc(self, items):$/;"	m	class:Go
on_doc	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    on_doc = on_definition$/;"	v	class:Jedi
on_doc	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^    def on_doc(self, args):$/;"	m	class:JediProcessor
on_doc	plugged/completor.vim/pythonx/completers/rust.py	/^    def on_doc(self, items):$/;"	m	class:Racer
on_document_symbol	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def on_document_symbol(self, data):$/;"	m	class:Lsp
on_exit	plugged/completor.vim/pythonx/completor/__init__.py	/^    def on_exit(self):$/;"	m	class:Completor
on_exit	plugged/completor.vim/pythonx/completor/api.py	/^def on_exit(args):$/;"	f
on_format	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def on_format(self, data):$/;"	m	class:Lsp
on_hover	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def on_hover(self, data):$/;"	m	class:Lsp
on_implementation	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def on_implementation(self, data):$/;"	m	class:Lsp
on_references	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def on_references(self, data):$/;"	m	class:Lsp
on_rename	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def on_rename(self, data):$/;"	m	class:Lsp
on_signature	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def on_signature(self, data):$/;"	m	class:Lsp
on_signature	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    on_signature = on_definition$/;"	v	class:Jedi
on_signature	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^    def on_signature(self, args):$/;"	m	class:JediProcessor
on_stream	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def on_stream(self, action, data):$/;"	m	class:Lsp
on_stream	plugged/completor.vim/pythonx/completor/__init__.py	/^    def on_stream(self, action, msg):$/;"	m	class:Completor
on_stream	plugged/completor.vim/pythonx/completor/api.py	/^def on_stream(args):$/;"	f
on_symbol	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def on_symbol(self, data):$/;"	m	class:Lsp
oneline method definitions	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "oneline method definitions" do$/;"	d
openTty	plugged/fzf/src/tui/light_unix.go	/^func openTty(mode int) (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
openTtyIn	plugged/fzf/src/tui/light_unix.go	/^func openTtyIn() (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
openTtyIn	plugged/fzf/src/tui/light_windows.go	/^func openTtyIn() (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
openTtyOut	plugged/fzf/src/tui/light_unix.go	/^func openTtyOut() (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
openTtyOut	plugged/fzf/src/tui/light_windows.go	/^func openTtyOut() (*os.File, error) {$/;"	f	package:tui	typeref:typename:(*os.File, error)
open_request	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def open_request(self):$/;"	m	class:Lsp
opt	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def opt(self, option, default=None):  # pylint:disable=no-self-use$/;"	m	class:SnippetUtil
optString	plugged/fzf/src/options.go	/^func optString(arg string, prefixes ...string) (bool, string) {$/;"	f	package:fzf	typeref:typename:(bool, string)
option	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    option = models.ForeignKey(Option, on_delete=models.CASCADE, db_index=True)$/;"	v	class:OptionCollection
option_collection_hash	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    option_collection_hash = models.CharField(max_length=40)$/;"	v	class:OptionCollection
option_collection_hash	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    option_collection_hash = models.CharField(max_length=64)$/;"	v	class:Job
option_collection_hash	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    option_collection_hash = models.CharField(max_length=64)$/;"	v	class:RunnableJob
option_collection_hash	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    option_collection_hash = models.CharField(max_length=64, blank=True, db_index=True)$/;"	v	class:ReferenceDataSignatures
option_set_to	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def option_set_to(name, new_value):$/;"	f
optionalNextString	plugged/fzf/src/options.go	/^func optionalNextString(args []string, i *int) (bool, string) {$/;"	f	package:fzf	typeref:typename:(bool, string)
optionalNumeric	plugged/fzf/src/options.go	/^func optionalNumeric(args []string, i *int, defaultValue int) (int, error) {$/;"	f	package:fzf	typeref:typename:(int, error)
optionalRunes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) optionalRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
options	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @type options :: keyword()$/;"	y	module:RateLimiter	access:public
opts.sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! opts.sink(lines) closure$/;"	f
opts.sinklist	plugged/fzf/plugin/fzf.vim	/^    function! opts.sinklist(lines) abort$/;"	f
optsFor	plugged/fzf/src/options_test.go	/^func optsFor(words ...string) *Options {$/;"	f	package:fzf	typeref:typename:*Options
origState	plugged/fzf/src/tui/light.go	/^	origState     *term.State$/;"	m	struct:tui.LightRenderer	typeref:typename:*term.State
origStateInput	plugged/fzf/src/tui/light.go	/^	origStateInput  uint32$/;"	m	struct:tui.LightRenderer	typeref:typename:uint32
origStateOutput	plugged/fzf/src/tui/light.go	/^	origStateOutput uint32$/;"	m	struct:tui.LightRenderer	typeref:typename:uint32
origText	plugged/fzf/src/item.go	/^	origText    *[]byte       \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]byte
origVarName	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^           origVarName <- symNames[i]$/;"	v	function:anonFuncb1d136150400
origVarName	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        origVarName <- symNames[i]$/;"	v	function:anonFunce36e773c0400
origin	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) origin() {$/;"	f	struct:tui.LightRenderer
os	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    os = models.CharField(max_length=64, blank=True)$/;"	v	class:Bugscache
os_name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    os_name = models.CharField(max_length=25)$/;"	v	class:BuildPlatform
os_name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    os_name = models.CharField(max_length=25)$/;"	v	class:MachinePlatform
other	plugged/fzf/src/terminal.go	/^	other     bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
other	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^                  other <- result$/;"	g
other	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^             other <- result$/;"	g
other languages	plugged/completor.vim/README.md	/^#### other languages$/;"	t	section:Completor""Completers
outHandle	plugged/fzf/src/tui/light.go	/^	outHandle       uintptr$/;"	m	struct:tui.LightRenderer	typeref:typename:uintptr
output	plugged/fzf/src/terminal.go	/^func (t *Terminal) output() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
output	plugged/fzf/src/terminal_test.go	/^	output string \/\/ literal output$/;"	m	struct:fzf.want	typeref:typename:string
output	plugged/ultisnips/test/vim_test_case.py	/^    output = ""$/;"	v	class:VimTestCase
overflow	plugged/fzf/src/terminal.go	/^func (t *Terminal) overflow(runes []rune, max int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
overflow32	plugged/fzf/src/util/chars.go	/^	overflow32 uint32 = 0x80808080$/;"	c	package:util	typeref:typename:uint32
overflow64	plugged/fzf/src/util/chars.go	/^	overflow64 uint64 = 0x8080808080808080$/;"	c	package:util	typeref:typename:uint64
override	plugged/fzf/src/history.go	/^func (h *History) override(str string) {$/;"	f	struct:fzf.History
overwrite	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def overwrite(self, buf, gtext):$/;"	m	class:TextObject
overwrite_with_initial_text	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def overwrite_with_initial_text(self, buf):$/;"	m	class:TextObject
p	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def p(self):$/;"	m	class:SnippetUtil
pad	plugged/fzf/src/terminal.go	/^	pad int$/;"	m	struct:fzf.fitpad	typeref:typename:int
padding	plugged/fzf/src/terminal.go	/^	padding            [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
paragraph_break	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^paragraph_break = function() {}$/;"	f
parse	plugged/completor.vim/pythonx/completers/ale.py	/^    def parse(self, base):$/;"	m	class:ALE
parse	plugged/completor.vim/pythonx/completers/common/__init__.py	/^    def parse(self, base):$/;"	m	class:Common
parse	plugged/completor.vim/pythonx/completers/common/buffer.py	/^    def parse(self, base):$/;"	m	class:Buffer
parse	plugged/completor.vim/pythonx/completers/common/filename.py	/^    def parse(self, base):$/;"	m	class:Filename
parse	plugged/completor.vim/pythonx/completers/common/neoinclude.py	/^    def parse(self, base):$/;"	m	class:Neoinclude
parse	plugged/completor.vim/pythonx/completers/common/omni.py	/^    def parse(self, base):$/;"	m	class:Omni
parse	plugged/completor.vim/pythonx/completers/common/ultisnips.py	/^    def parse(self, base):$/;"	m	class:Ultisnips
parse	plugged/completor.vim/pythonx/completers/javascript/__init__.py	/^    def parse(self, data):$/;"	m	class:Tern
parseActionList	plugged/fzf/src/options.go	/^func parseActionList(masked string, original string, prevActions []*action, putAllowed bool) ([]/;"	f	package:fzf	typeref:typename:([]*action, error)
parseAlgo	plugged/fzf/src/options.go	/^func parseAlgo(str string) (algo.Algo, error) {$/;"	f	package:fzf	typeref:typename:(algo.Algo, error)
parseAnsiCode	plugged/fzf/src/ansi.go	/^func parseAnsiCode(s string, delimiter byte) (int, byte, string) {$/;"	f	package:fzf	typeref:typename:(int, byte, string)
parseBorder	plugged/fzf/src/options.go	/^func parseBorder(str string, optional bool) (tui.BorderShape, error) {$/;"	f	package:fzf	typeref:typename:(tui.BorderShape, error)
parseGetParams	plugged/fzf/src/server.go	/^func parseGetParams(query string) getParams {$/;"	f	package:fzf	typeref:typename:getParams
parseHeight	plugged/fzf/src/options.go	/^func parseHeight(str string, index int) (heightSpec, error) {$/;"	f	package:fzf	typeref:typename:(heightSpec, error)
parseInfoStyle	plugged/fzf/src/options.go	/^func parseInfoStyle(str string) (infoStyle, string, error) {$/;"	f	package:fzf	typeref:typename:(infoStyle, string, error)
parseKeyChords	plugged/fzf/src/options.go	/^func parseKeyChords(str string, message string) (map[tui.Event]string, error) {$/;"	f	package:fzf	typeref:typename:(map[tui.Event]string, error)
parseKeyChordsImpl	plugged/fzf/src/options.go	/^func parseKeyChordsImpl(str string, message string) (map[tui.Event]string, error) {$/;"	f	package:fzf	typeref:typename:(map[tui.Event]string, error)
parseKeymap	plugged/fzf/src/options.go	/^func parseKeymap(keymap map[tui.Event][]*action, str string) error {$/;"	f	package:fzf	typeref:typename:error
parseLabelPosition	plugged/fzf/src/options.go	/^func parseLabelPosition(opts *labelOpts, arg string) error {$/;"	f	package:fzf	typeref:typename:error
parseLayout	plugged/fzf/src/options.go	/^func parseLayout(str string) (layoutType, error) {$/;"	f	package:fzf	typeref:typename:(layoutType, error)
parseListenAddress	plugged/fzf/src/server.go	/^func parseListenAddress(address string) (listenAddress, error) {$/;"	f	package:fzf	typeref:typename:(listenAddress, error)
parseMargin	plugged/fzf/src/options.go	/^func parseMargin(opt string, margin string) ([4]sizeSpec, error) {$/;"	f	package:fzf	typeref:typename:([4]sizeSpec, error)
parseMarkerMultiLine	plugged/fzf/src/options.go	/^func parseMarkerMultiLine(str string) (*[3]string, error) {$/;"	f	package:fzf	typeref:typename:(*[3]string, error)
parseOptions	plugged/fzf/src/options.go	/^func parseOptions(index *int, opts *Options, allArgs []string) error {$/;"	f	package:fzf	typeref:typename:error
parsePlaceholder	plugged/fzf/src/terminal.go	/^func parsePlaceholder(match string) (bool, string, placeholderFlags) {$/;"	f	package:fzf	typeref:typename:(bool, string, placeholderFlags)
parsePreviewWindow	plugged/fzf/src/options.go	/^func parsePreviewWindow(opts *previewOpts, input string) error {$/;"	f	package:fzf	typeref:typename:error
parsePreviewWindowImpl	plugged/fzf/src/options.go	/^func parsePreviewWindowImpl(opts *previewOpts, input string) error {$/;"	f	package:fzf	typeref:typename:error
parsePrompt	plugged/fzf/src/terminal.go	/^func (t *Terminal) parsePrompt(prompt string) (func(), int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(func(), int)
parseSingleActionList	plugged/fzf/src/options.go	/^func parseSingleActionList(str string) ([]*action, error) {$/;"	f	package:fzf	typeref:typename:([]*action, error)
parseSize	plugged/fzf/src/options.go	/^func parseSize(str string, maxPercent float64, label string) (sizeSpec, error) {$/;"	f	package:fzf	typeref:typename:(sizeSpec, error)
parseTerms	plugged/fzf/src/pattern.go	/^func parseTerms(fuzzy bool, caseMode Case, normalize bool, str string) []termSet {$/;"	f	package:fzf	typeref:typename:[]termSet
parseTheme	plugged/fzf/src/options.go	/^func parseTheme(defaultTheme *tui.ColorTheme, str string) (*tui.ColorTheme, error) {$/;"	f	package:fzf	typeref:typename:(*tui.ColorTheme, error)
parseTiebreak	plugged/fzf/src/options.go	/^func parseTiebreak(str string) ([]criterion, error) {$/;"	f	package:fzf	typeref:typename:([]criterion, error)
parseTmuxOptions	plugged/fzf/src/options.go	/^func parseTmuxOptions(arg string, index int) (*tmuxOptions, error) {$/;"	f	package:fzf	typeref:typename:(*tmuxOptions, error)
parseToggleSort	plugged/fzf/src/options.go	/^func parseToggleSort(keymap map[tui.Event][]*action, str string) error {$/;"	f	package:fzf	typeref:typename:error
parseWalkerOpts	plugged/fzf/src/options.go	/^func parseWalkerOpts(str string) (walkerOpts, error) {$/;"	f	package:fzf	typeref:typename:(walkerOpts, error)
parse_and_instantiate	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/snipmate.py	/^def parse_and_instantiate(parent_to, text, indent):$/;"	f
parse_and_instantiate	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/ulti_snips.py	/^def parse_and_instantiate(parent_to, text, indent):$/;"	f
parse_args	plugged/ultisnips/test_all.py	/^    def parse_args():$/;"	f
parse_arguments	plugged/validator.vim/pythonx/validator/__init__.py	/^    def parse_arguments(self, file):$/;"	m	class:Validator
parse_ast_dump	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^def parse_ast_dump(data, word, line, column):$/;"	f
parse_buffers	plugged/completor.vim/pythonx/completers/common/buffer.py	/^    def parse_buffers(self, base):$/;"	m	class:TokenStore
parse_config	plugged/completor.vim/pythonx/completor/__init__.py	/^    def parse_config(self, files):$/;"	m	class:Completor
parse_data	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def parse_data(self):$/;"	m	class:Lsp
parse_loclist	plugged/validator.vim/pythonx/lints/go/golangci.py	/^    def parse_loclist(self, loclist, bufnr):$/;"	m	class:Golangci
parse_loclist	plugged/validator.vim/pythonx/lints/rust.py	/^    def parse_loclist(self, loclist, bufnr):$/;"	m	class:Cargo
parse_loclist	plugged/validator.vim/pythonx/validator/__init__.py	/^    def parse_loclist(self, loclist, bufnr):$/;"	m	class:Validator
parse_loclist	plugged/validator.vim/pythonx/validator/api.py	/^def parse_loclist(args):$/;"	f
parse_symbols	plugged/completor.vim/pythonx/completers/lsp/action.py	/^def parse_symbols(items):$/;"	f
parse_uri	plugged/completor.vim/pythonx/completers/lsp/utils.py	/^def parse_uri(uri):$/;"	f
partialResult	plugged/fzf/src/matcher.go	/^type partialResult struct {$/;"	s	package:fzf
partitions	plugged/fzf/src/matcher.go	/^	partitions     int$/;"	m	struct:fzf.Matcher	typeref:typename:int
pass	plugged/fzf/src/merger.go	/^	pass     bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
passThroughRegex	plugged/fzf/src/terminal.go	/^var passThroughRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
paste	plugged/fzf/test/test_go.rb	/^  def paste(str)$/;"	f	class:Tmux
pat	plugged/completor.vim/pythonx/completers/common/buffer.py	/^    pat = re.compile(r'[^\\W\\d]{3}\\w{0,45}', re.U)$/;"	v	class:TokenStore
path	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^path = os.path.dirname(__file__)$/;"	v
path	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^var path = require('path');$/;"	v
path	plugged/fzf/src/history.go	/^	path     string$/;"	m	struct:fzf.History	typeref:typename:string
paths	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    paths <- c(paths,$/;"	c	function:foo
paths	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    paths <- c(paths,$/;"	c	function:foo
pattern	plugged/fzf/src/matcher.go	/^	pattern  *Pattern$/;"	m	struct:fzf.MatchRequest	typeref:typename:*Pattern
pattern	plugged/fzf/src/merger.go	/^	pattern  *Pattern$/;"	m	struct:fzf.Merger	typeref:typename:*Pattern
patternBuilder	plugged/fzf/src/matcher.go	/^	patternBuilder func([]rune) *Pattern$/;"	m	struct:fzf.Matcher	typeref:typename:func([]rune) *Pattern
paused	plugged/fzf/src/terminal.go	/^	paused             bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
pausedState	plugged/fzf/src/terminal.go	/^	pausedState$/;"	c	package:fzf
payload	plugged/vim-coiled-snake/tests/issues/test_29.py	/^payload = ($/;"	v
pborder	plugged/fzf/src/terminal.go	/^	pborder            tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
peek	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def peek(self, count=1):$/;"	m	class:_TextIterator
peek	plugged/ultisnips/pythonx/UltiSnips/text.py	/^    def peek(self):$/;"	m	class:LineIterator
percent	plugged/fzf/src/options.go	/^	percent bool$/;"	m	struct:fzf.heightSpec	typeref:typename:bool
percent	plugged/fzf/src/options.go	/^	percent bool$/;"	m	struct:fzf.sizeSpec	typeref:typename:bool
performance_alerts_enabled	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    performance_alerts_enabled = models.BooleanField(default=False)$/;"	v	class:Repository
perl	plugged/splitjoin.vim/spec/plugin/perl_spec.rb	/^describe "perl" do$/;"	d
php	plugged/splitjoin.vim/spec/plugin/php_spec.rb	/^describe "php" do$/;"	d
pipes	plugged/splitjoin.vim/spec/plugin/elixir_spec.rb	/^  describe "pipes" do$/;"	d
pkgInfoFP	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^pkgInfoFP <- file.path(pkgpath, "Meta", "package.rds")$/;"	g
pkgInfoFP	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^pkgInfoFP <- file.path(pkgpath, "Meta", "package.rds")$/;"	g
pkgname	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^                                   pkgname = package)$/;"	n	list:"__LoadingNamespaceInfo__"
pkgname	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    pkgname = package)$/;"	n	list:"__LoadingNamespaceInfo__"
placeCursor	plugged/fzf/src/terminal.go	/^func (t *Terminal) placeCursor() {$/;"	f	struct:fzf.Terminal
placeholder	plugged/fzf/src/terminal.go	/^var placeholder *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
placeholder	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def placeholder(self):$/;"	m	class:VisualContentPreserver
placeholderFlags	plugged/fzf/src/terminal.go	/^type placeholderFlags struct {$/;"	s	package:fzf
platform	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    platform = models.CharField(max_length=100, db_index=True)$/;"	v	class:BuildPlatform
platform	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    platform = models.CharField(max_length=100, db_index=True)$/;"	v	class:MachinePlatform
plug#	autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! plug#(repo, ...)$/;"	f
plug#begin	autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#begin	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#begin	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! plug#begin(...)$/;"	f
plug#end	autoload/plug.vim	/^function! plug#end()$/;"	f
plug#end	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#end	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! plug#end()$/;"	f
plug#helptags	autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#helptags	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#helptags	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! plug#helptags()$/;"	f
plug#load	autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#load	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#load	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! plug#load(...)$/;"	f
plug#shellescape	autoload/plug.vim	/^function! plug#shellescape(arg, ...)$/;"	f
plugin_cache_dir	plugged/ultisnips/test/vim_test_case.py	/^def plugin_cache_dir():$/;"	f
plugin_cache_dir	plugged/ultisnips/test_all.py	/^def plugin_cache_dir():$/;"	f
plugins	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    plugins: {doc_comment: true},$/;"	c	class:genConfig.defaultConfig
plugins	plugged/ultisnips/test/test_Plugin.py	/^    plugins = ["ervandew\/supertab"]$/;"	v	class:Plugin_SuperTab_SimpleTest
plugins	plugged/ultisnips/test/vim_test_case.py	/^    plugins = []$/;"	v	class:VimTestCase
plus	plugged/fzf/src/terminal.go	/^	plus          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pm	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^    def pm(cls):$/;"	m	class:RemotePDB
pointer	plugged/fzf/src/terminal.go	/^	pointer            string$/;"	m	struct:fzf.Terminal	typeref:typename:string
pointerEmpty	plugged/fzf/src/terminal.go	/^	pointerEmpty       string$/;"	m	struct:fzf.Terminal	typeref:typename:string
pointerLen	plugged/fzf/src/terminal.go	/^	pointerLen         int$/;"	m	struct:fzf.Terminal	typeref:typename:int
points	plugged/fzf/src/result.go	/^	points [4]uint16$/;"	m	struct:fzf.Result	typeref:typename:[4]uint16
port	plugged/fzf/src/server.go	/^	port int$/;"	m	struct:fzf.listenAddress	typeref:typename:int
pos	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        pos <- match(paste("package", pkg, sep=":"), search(), 0L)$/;"	v	function:"::"
pos	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        pos <- match(paste("package", pkg, sep=":"), search(), 0L)$/;"	v	function:"::"
pos	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def pos(self):$/;"	m	class:_TextIterator
pos	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 5), (0, 5)$/;"	v	class:TestGuessing_DeleteOneChar
pos	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 6), (0, 7)$/;"	v	class:TestGuessing_InsertOneChar
pos	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 6), (0, 7)$/;"	v	class:TestGuessing_Noop0
pos	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 7), (0, 6)$/;"	v	class:TestGuessing_BackspaceOneChar
pos	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 7), (0, 8)$/;"	v	class:TestGuessing_InsertOneChar1
pos	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def pos(self):$/;"	m	class:VimState
posArray	plugged/fzf/src/algo/algo.go	/^func posArray(withPos bool, len int) *[]int {$/;"	f	package:algo	typeref:typename:*[]int
posCenter	plugged/fzf/src/options.go	/^	posCenter$/;"	c	package:fzf
posDown	plugged/fzf/src/options.go	/^	posDown$/;"	c	package:fzf
posLeft	plugged/fzf/src/options.go	/^	posLeft$/;"	c	package:fzf
posRight	plugged/fzf/src/options.go	/^	posRight$/;"	c	package:fzf
posUp	plugged/fzf/src/options.go	/^	posUp windowPosition = iota$/;"	c	package:fzf	typeref:type:windowPosition
position	plugged/fzf/src/options.go	/^	position    windowPosition$/;"	m	struct:fzf.previewOpts	typeref:typename:windowPosition
position	plugged/fzf/src/options.go	/^	position windowPosition$/;"	m	struct:fzf.tmuxOptions	typeref:typename:windowPosition
position_request	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def position_request(self, category):$/;"	m	class:Lsp
positive	plugged/ultisnips/test/test_ContextSnippets.py	/^    positive = "yes xxx"$/;"	v	class:ContextSnippets_ContextHasAccessToReMatch
postProcessOptions	plugged/fzf/src/options.go	/^func postProcessOptions(opts *Options) error {$/;"	f	package:fzf	typeref:typename:error
posx	plugged/fzf/src/tui/light.go	/^	posx     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
posy	plugged/fzf/src/tui/light.go	/^	posy     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
ppos	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 5), (0, 5)$/;"	v	class:TestGuessing_DeleteOneChar
ppos	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 6), (0, 7)$/;"	v	class:TestGuessing_InsertOneChar
ppos	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 6), (0, 7)$/;"	v	class:TestGuessing_Noop0
ppos	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 7), (0, 6)$/;"	v	class:TestGuessing_BackspaceOneChar
ppos	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    ppos, pos = (0, 7), (0, 8)$/;"	v	class:TestGuessing_InsertOneChar1
ppos	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def ppos(self):$/;"	m	class:VimState
prefixLength	plugged/fzf/src/tokenizer.go	/^	prefixLength int32$/;"	m	struct:fzf.Token	typeref:typename:int32
prep	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^def prep():$/;"	f
prepare	plugged/fzf/test/test_go.rb	/^  def prepare$/;"	f	class:Tmux
prepare_request	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    def prepare_request(self, action):$/;"	m	class:Jedi
prepare_request	plugged/completor.vim/pythonx/completers/rust.py	/^    def prepare_request(self, action):$/;"	m	class:Racer
prepare_request	plugged/completor.vim/pythonx/completor/__init__.py	/^    def prepare_request(self, action=b'complete'):$/;"	m	class:Completor
preserve	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def preserve(self):$/;"	m	class:_SnippetUtilCursor
preserveSpace	plugged/fzf/src/terminal.go	/^	preserveSpace bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pressed	plugged/fzf/src/terminal.go	/^	pressed            string$/;"	m	struct:fzf.Terminal	typeref:typename:string
prevDownTime	plugged/fzf/src/tui/light.go	/^	prevDownTime  time.Time$/;"	m	struct:tui.LightRenderer	typeref:typename:time.Time
prevDownTime	plugged/fzf/src/tui/tui.go	/^	prevDownTime time.Time$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:time.Time
prevLines	plugged/fzf/src/terminal.go	/^	prevLines          []itemLine$/;"	m	struct:fzf.Terminal	typeref:typename:[]itemLine
preview	plugged/fzf/src/tui/light.go	/^	preview  bool$/;"	m	struct:tui.LightWindow	typeref:typename:bool
preview	plugged/fzf/src/tui/tcell.go	/^	preview     bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
previewBox	plugged/fzf/src/terminal.go	/^	previewBox         *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
previewCancelWait	plugged/fzf/src/constants.go	/^	previewCancelWait = 500 * time.Millisecond$/;"	c	package:fzf
previewChunkDelay	plugged/fzf/src/constants.go	/^	previewChunkDelay = 100 * time.Millisecond$/;"	c	package:fzf
previewDelayed	plugged/fzf/src/constants.go	/^	previewDelayed    = 500 * time.Millisecond$/;"	c	package:fzf
previewLabel	plugged/fzf/src/terminal.go	/^	previewLabel       labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
previewLabelLen	plugged/fzf/src/terminal.go	/^	previewLabelLen    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
previewLabelOpts	plugged/fzf/src/terminal.go	/^	previewLabelOpts   labelOpts$/;"	m	struct:fzf.Terminal	typeref:typename:labelOpts
previewOpts	plugged/fzf/src/options.go	/^type previewOpts struct {$/;"	s	package:fzf
previewOpts	plugged/fzf/src/terminal.go	/^	previewOpts        previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:previewOpts
previewRequest	plugged/fzf/src/terminal.go	/^type previewRequest struct {$/;"	s	package:fzf
previewResult	plugged/fzf/src/terminal.go	/^type previewResult struct {$/;"	s	package:fzf
previewScrollbar	plugged/fzf/src/terminal.go	/^	previewScrollbar   string$/;"	m	struct:fzf.Terminal	typeref:typename:string
previewed	plugged/fzf/src/terminal.go	/^	previewed          previewed$/;"	m	struct:fzf.Terminal	typeref:typename:previewed
previewed	plugged/fzf/src/terminal.go	/^type previewed struct {$/;"	s	package:fzf
previewer	plugged/fzf/src/terminal.go	/^	previewer          previewer$/;"	m	struct:fzf.Terminal	typeref:typename:previewer
previewer	plugged/fzf/src/terminal.go	/^type previewer struct {$/;"	s	package:fzf
previous	plugged/fzf/src/history.go	/^func (h *History) previous() string {$/;"	f	struct:fzf.History	typeref:typename:string
print.difftime	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^print.difftime <- function(x, digits = getOption("digits"), ...)$/;"	f
print.difftime	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^print.difftime <- function(x, digits = getOption("digits"), ...)$/;"	f
printAll	plugged/fzf/src/terminal.go	/^func (t *Terminal) printAll() {$/;"	f	struct:fzf.Terminal
printBar	plugged/fzf/src/terminal.go	/^func (t *Terminal) printBar(lineNum int, forceRedraw bool, barRange [2]int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
printColoredString	plugged/fzf/src/terminal.go	/^func (t *Terminal) printColoredString(window tui.Window, text []rune, offsets []colorOffset, col/;"	f	struct:fzf.Terminal
printHeader	plugged/fzf/src/terminal.go	/^func (t *Terminal) printHeader() {$/;"	f	struct:fzf.Terminal
printHighlighted	plugged/fzf/src/terminal.go	/^func (t *Terminal) printHighlighted(result Result, colBase tui.ColorPair, colMatch tui.ColorPair/;"	f	struct:fzf.Terminal	typeref:typename:int
printInfo	plugged/fzf/src/terminal.go	/^func (t *Terminal) printInfo() {$/;"	f	struct:fzf.Terminal
printItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) printItem(result Result, line int, maxLine int, index int, current bool, barR/;"	f	struct:fzf.Terminal	typeref:typename:int
printLabel	plugged/fzf/src/terminal.go	/^func (t *Terminal) printLabel(window tui.Window, render labelPrinter, opts labelOpts, length int/;"	f	struct:fzf.Terminal
printList	plugged/fzf/src/terminal.go	/^func (t *Terminal) printList() {$/;"	f	struct:fzf.Terminal
printPreview	plugged/fzf/src/terminal.go	/^func (t *Terminal) printPreview() {$/;"	f	struct:fzf.Terminal
printPreviewDelayed	plugged/fzf/src/terminal.go	/^func (t *Terminal) printPreviewDelayed() {$/;"	f	struct:fzf.Terminal
printPrompt	plugged/fzf/src/terminal.go	/^func (t *Terminal) printPrompt() {$/;"	f	struct:fzf.Terminal
printQuery	plugged/fzf/src/terminal.go	/^	printQuery         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
printQueue	plugged/fzf/src/terminal.go	/^	printQueue         []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
printScript	plugged/fzf/main.go	/^func printScript(label string, content []byte) {$/;"	f	package:main
printString	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) printString(text string, pair ColorPair) {$/;"	f	struct:tui.TcellWindow
print_stack	plugged/ultisnips/pythonx/UltiSnips/debug.py	/^def print_stack():$/;"	f
printer	plugged/fzf/src/terminal.go	/^	printer            func(string)$/;"	m	struct:fzf.Terminal	typeref:typename:func(string)
printsep	plugged/fzf/src/terminal.go	/^	printsep           string$/;"	m	struct:fzf.Terminal	typeref:typename:string
printsep	plugged/fzf/src/terminal.go	/^	printsep   string$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:string
priority	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def priority(self):$/;"	m	class:SnippetDefinition
procFun	plugged/fzf/src/pattern.go	/^	procFun       map[termType]algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:map[termType]algo.Algo
process	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^    def process(self, args):$/;"	m	class:JediProcessor
processExecution	plugged/fzf/src/terminal.go	/^func processExecution(action actionType) bool {$/;"	f	package:fzf	typeref:typename:bool
processScheme	plugged/fzf/src/options.go	/^func processScheme(opts *Options) error {$/;"	f	package:fzf	typeref:typename:error
processTabs	plugged/fzf/src/terminal.go	/^func (t *Terminal) processTabs(runes []rune, prefixWidth int) (string, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(string, int)
product	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    product = models.ForeignKey(Product, on_delete=models.CASCADE)$/;"	v	class:Job
progress	plugged/fzf/src/terminal.go	/^	progress           int$/;"	m	struct:fzf.Terminal	typeref:typename:int
progressMinDuration	plugged/fzf/src/constants.go	/^	progressMinDuration     = 200 * time.Millisecond$/;"	c	package:fzf
project	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def project do$/;"	f	method:example
project	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def project do$/;"	f	method:example.project.config.test.test.test
project	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/atom_spec.rb	/^    def project do$/;"	f
project_specific_id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    project_specific_id = models.PositiveIntegerField(null=True)  # unused, see bug 1328985$/;"	v	class:Job
prompt	plugged/fzf/src/terminal.go	/^	prompt             func()$/;"	m	struct:fzf.Terminal	typeref:typename:func()
prompt	plugged/fzf/src/terminal.go	/^	prompt     string$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:string
promptLen	plugged/fzf/src/terminal.go	/^	promptLen          int$/;"	m	struct:fzf.Terminal	typeref:typename:int
promptLine	plugged/fzf/src/terminal.go	/^func (t *Terminal) promptLine() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
promptString	plugged/fzf/src/terminal.go	/^	promptString       string$/;"	m	struct:fzf.Terminal	typeref:typename:string
protector	plugged/fzf/src/protector/protector.go	/^package protector$/;"	p
protector	plugged/fzf/src/protector/protector_openbsd.go	/^package protector$/;"	p
proxyScript	plugged/fzf/src/terminal.go	/^	proxyScript        string$/;"	m	struct:fzf.Terminal	typeref:typename:string
push	plugged/fzf/src/chunklist.go	/^func (c *Chunk) push(trans ItemBuilder, data []byte) bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
push	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    push = models.ForeignKey(Push, on_delete=models.CASCADE, related_name='commits')$/;"	v	class:Commit
push	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    push = models.ForeignKey(Push, on_delete=models.CASCADE, related_name='jobs')$/;"	v	class:Job
pusher	plugged/fzf/src/reader.go	/^	pusher   func([]byte) bool$/;"	m	struct:fzf.Reader	typeref:typename:func([]byte) bool
pwindow	plugged/fzf/src/terminal.go	/^	pwindow            tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
pwindow	plugged/fzf/src/terminal.go	/^	pwindow      tui.Window$/;"	m	struct:fzf.previewRequest	typeref:typename:tui.Window
pwindowSize	plugged/fzf/src/terminal.go	/^	pwindowSize  tui.TermSize$/;"	m	struct:fzf.previewRequest	typeref:typename:tui.TermSize
pwindowSize	plugged/fzf/src/terminal.go	/^func (t *Terminal) pwindowSize() tui.TermSize {$/;"	f	struct:fzf.Terminal	typeref:typename:tui.TermSize
python	plugged/splitjoin.vim/spec/plugin/python_spec.rb	/^describe "python" do$/;"	d
python_version	plugged/ultisnips/mypy.ini	/^python_version = 3.7$/;"	k	section:mypy
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :call <SID>close_pane()<cr>$/;"	m
q	autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
q	plugged/completor.vim/autoload/completor/action.vim	/^  nnoremap <buffer> q ZQ$/;"	m
q	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
q	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q  :if b:plug_preview==1<bar>pc<bar>endif<bar>bd<cr>$/;"	m
q	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  nnoremap <silent> <buffer> q :q<cr>$/;"	m
query	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    var doc = {query: query, files: [file]};$/;"	p	class:complete.doc
query	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^    var query = {$/;"	c	class:complete
query	plugged/fzf/src/terminal.go	/^	query      string$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:string
query	plugged/fzf/src/terminal_test.go	/^	query    string$/;"	m	struct:fzf.give	typeref:typename:string
queryCache	plugged/fzf/src/cache.go	/^type queryCache map[string][]Result$/;"	t	package:fzf	typeref:typename:map[string][]Result
queryCacheMax	plugged/fzf/src/constants.go	/^	queryCacheMax int = chunkSize \/ 5$/;"	c	package:fzf	typeref:typename:int
queryLen	plugged/fzf/src/terminal.go	/^	queryLen           [2]int$/;"	m	struct:fzf.Terminal	typeref:typename:[2]int
queryLen	plugged/fzf/src/terminal.go	/^	queryLen  int$/;"	m	struct:fzf.itemLine	typeref:typename:int
queued	plugged/fzf/src/tui/light.go	/^	queued        strings.Builder$/;"	m	struct:tui.LightRenderer	typeref:typename:strings.Builder
quitSignal	plugged/fzf/src/terminal.go	/^type quitSignal struct {$/;"	s	package:fzf
r	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    if (ismat) for (i in seq_len(differences)) r <- r[i1, , drop = FALSE] -$/;"	v	function:foo
r	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    if (ismat) for (i in seq_len(differences)) r <- r[i1, , drop = FALSE] -$/;"	v	function:foo
randResult	plugged/fzf/src/merger_test.go	/^func randResult() Result {$/;"	f	package:fzf	typeref:typename:Result
range	plugged/MatchTagAlways/python/tests/mta_core_test.py	/^  range = xrange$/;"	v
rangeEllipsis	plugged/fzf/src/tokenizer.go	/^const rangeEllipsis = 0$/;"	c	package:fzf
readChannel	plugged/fzf/src/reader.go	/^func (r *Reader) readChannel(inputChan chan string) bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readConfig	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^  function readConfig(fileName) {$/;"	f	function:genConfig
readFile	plugged/fzf/src/terminal_test.go	/^func readFile(path string) ([]byte, error) {$/;"	f	package:fzf	typeref:typename:([]byte, error)
readFiles	plugged/fzf/src/reader.go	/^func (r *Reader) readFiles(root string, opts walkerOpts, ignores []string) bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromCommand	plugged/fzf/src/reader.go	/^func (r *Reader) readFromCommand(command string, environ []string) bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromStdin	plugged/fzf/src/reader.go	/^func (r *Reader) readFromStdin() bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readJSON	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^function readJSON(fileName) {$/;"	f
read_data	plugged/vim-coiled-snake/tests/issues/test_6.py	/^async def read_data(db):$/;"	f
readerBufferSize	plugged/fzf/src/constants.go	/^	readerBufferSize       = 64 * 1024$/;"	c	package:fzf
readerPollIntervalMax	plugged/fzf/src/constants.go	/^	readerPollIntervalMax  = 50 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalMin	plugged/fzf/src/constants.go	/^	readerPollIntervalMin  = 10 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalStep	plugged/fzf/src/constants.go	/^	readerPollIntervalStep = 5 * time.Millisecond$/;"	c	package:fzf
readerSlabSize	plugged/fzf/src/constants.go	/^	readerSlabSize         = 128 * 1024$/;"	c	package:fzf
reading	plugged/fzf/src/terminal.go	/^	reading            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
readline	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^var readline = require('readline');$/;"	v
reason	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    reason = models.CharField(max_length=125)$/;"	v	class:Job
receive indent	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/receive_spec.rb	/^describe 'receive indent' do$/;"	d
ref_data_name	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    ref_data_name = models.CharField(max_length=255)$/;"	v	class:RunnableJob
refresh	plugged/ultisnips/pythonx/UltiSnips/snippet/source/base.py	/^    def refresh(self):$/;"	m	class:SnippetSource
refresh	plugged/ultisnips/pythonx/UltiSnips/snippet/source/file/base.py	/^    def refresh(self):$/;"	m	class:SnippetFileSource
regex	plugged/fzf/src/tokenizer.go	/^	regex *regexp.Regexp$/;"	m	struct:fzf.Delimiter	typeref:typename:*regexp.Regexp
regex	plugged/validator.vim/pythonx/lints/cpp.py	/^    regex = r"""$/;"	v	class:Cpp
regex	plugged/validator.vim/pythonx/lints/css.py	/^    regex = r'''$/;"	v	class:Css
regex	plugged/validator.vim/pythonx/lints/cython.py	/^    regex = r"""$/;"	v	class:Cython
regex	plugged/validator.vim/pythonx/lints/go/gofmt.py	/^    regex = r"""$/;"	v	class:GoFmtLint
regex	plugged/validator.vim/pythonx/lints/go/golangci.py	/^    regex = re.compile(r"""$/;"	v	class:Golangci
regex	plugged/validator.vim/pythonx/lints/go/golint.py	/^    regex = r"""$/;"	v	class:GolintLint
regex	plugged/validator.vim/pythonx/lints/go/gometalinter.py	/^    regex = r"""$/;"	v	class:Gometalinter
regex	plugged/validator.vim/pythonx/lints/javascript/eslint.py	/^    regex = r"""$/;"	v	class:EsLint
regex	plugged/validator.vim/pythonx/lints/javascript/jscs.py	/^    regex = r"""$/;"	v	class:Jscs
regex	plugged/validator.vim/pythonx/lints/javascript/jshint.py	/^    regex = r"""$/;"	v	class:Jshint
regex	plugged/validator.vim/pythonx/lints/javascript/standard.py	/^    regex = r"""$/;"	v	class:Standard
regex	plugged/validator.vim/pythonx/lints/json.py	/^    regex = r"""$/;"	v	class:Json
regex	plugged/validator.vim/pythonx/lints/lua/luac.py	/^    regex = r"""$/;"	v	class:LuaCLint
regex	plugged/validator.vim/pythonx/lints/lua/luacheck.py	/^    regex = r"""$/;"	v	class:LuacheckLint
regex	plugged/validator.vim/pythonx/lints/perl/perl.py	/^    regex = r"""$/;"	v	class:PerlLint
regex	plugged/validator.vim/pythonx/lints/perl/perlcritic.py	/^    regex = r"""$/;"	v	class:PerlCriticLint
regex	plugged/validator.vim/pythonx/lints/php.py	/^    regex = r"""$/;"	v	class:Php
regex	plugged/validator.vim/pythonx/lints/python/pyflakes.py	/^    regex = r"""$/;"	v	class:PyFlakes
regex	plugged/validator.vim/pythonx/lints/rst/rst2pseudoxml.py	/^    regex = r"""$/;"	v	class:RST2PseudoXMLLint
regex	plugged/validator.vim/pythonx/lints/ruby/rubocop.py	/^    regex = r"""$/;"	v	class:Rubocop
regex	plugged/validator.vim/pythonx/lints/ruby/ruby.py	/^    regex = r"""$/;"	v	class:Ruby
regex	plugged/validator.vim/pythonx/lints/sh/sh.py	/^    regex = r"""$/;"	v	class:ShLint
regex	plugged/validator.vim/pythonx/lints/sh/shellcheck.py	/^    regex = r"""$/;"	v	class:ShellcheckLint
regex	plugged/validator.vim/pythonx/lints/thrift.py	/^    regex = r"""$/;"	v	class:Thrift
regex	plugged/validator.vim/pythonx/lints/vim/vimlparser.py	/^    regex = r"""$/;"	v	class:VimLParserLint
regex	plugged/validator.vim/pythonx/lints/vim/vint.py	/^    regex = r"""$/;"	v	class:VimVint
regex	plugged/validator.vim/pythonx/lints/zsh/zsh.py	/^    regex = r"""$/;"	v	class:ZshLint
regex	plugged/validator.vim/tests/test_validator.py	/^    regex = r"""$/;"	v	class:NoName
register_snippet_source	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def register_snippet_source(self, name, snippet_source):$/;"	m	class:SnippetManager
registry	plugged/completor.vim/pythonx/completor/__init__.py	/^    registry = {}$/;"	v	class:Meta
reindent	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def reindent(content)$/;"	f	class:Buffer
release	plugged/fzf/Makefile	/^release:$/;"	t
reloadOnStart	plugged/fzf/src/options.go	/^func (opts *Options) reloadOnStart() bool {$/;"	f	struct:fzf.Options	typeref:typename:bool
remember_buffer	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def remember_buffer(self, to):$/;"	m	class:VimState
remember_position	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def remember_position(self):$/;"	m	class:VimState
remember_unnamed_register	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def remember_unnamed_register(self, text_to_expect):$/;"	m	class:VimState
remembered_buffer	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def remembered_buffer(self):$/;"	m	class:VimState
remove	plugged/fzf/uninstall	/^remove() {$/;"	f
removeFiles	plugged/fzf/src/functions.go	/^func removeFiles(files []string) {$/;"	f	package:fzf
remove_indentation	plugged/splitjoin.vim/spec/support/vim.rb	/^    def remove_indentation$/;"	f	module:Support.Vim
remove_line	plugged/fzf/uninstall	/^remove_line() {$/;"	f
rename	plugged/completor.vim/pythonx/completers/lsp/action.py	/^def rename(items):$/;"	f
rename_request	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def rename_request(self, name):$/;"	m	class:Lsp
renderPreviewArea	plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewArea(unchanged bool) {$/;"	f	struct:fzf.Terminal
renderPreviewScrollbar	plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewScrollbar(yoff int, barLength int, barStart int) {$/;"	f	struct:fzf.Terminal
renderPreviewSpinner	plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewSpinner() {$/;"	f	struct:fzf.Terminal
renderPreviewText	plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewText(height int, lines []string, lineNo int, unchanged bool) {$/;"	f	struct:fzf.Terminal
renderer	plugged/fzf/src/tui/light.go	/^	renderer *LightRenderer$/;"	m	struct:tui.LightWindow	typeref:typename:*LightRenderer
repeat	plugged/fzf/src/tui/light.go	/^func repeat(r rune, times int) string {$/;"	f	package:tui	typeref:typename:string
repeat#errmsg	plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#errmsg()$/;"	f
repeat#invalidate	plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#invalidate()$/;"	f
repeat#run	plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#run(count)$/;"	f
repeat#set	plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeat#setreg	plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#setreg(sequence,register)$/;"	f
repeat#wrap	plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#wrap(command,count)$/;"	f
repeat.vim	plugged/vim-repeat/README.markdown	/^# repeat.vim$/;"	c
repeatPlugin	plugged/vim-repeat/autoload/repeat.vim	/^augroup repeatPlugin$/;"	a
repeat_custom_motion	plugged/vim-repeat/autoload/repeat.vim	/^    augroup repeat_custom_motion$/;"	a
replace	plugged/ultisnips/pythonx/UltiSnips/text_objects/transformation.py	/^    def replace(self, match):$/;"	m	class:_CleverReplace
replacePlaceholder	plugged/fzf/src/terminal.go	/^func (t *Terminal) replacePlaceholder(template string, forcePlus bool, input string, list []*Ite/;"	f	struct:fzf.Terminal	typeref:typename:(string, []string)
replacePlaceholder	plugged/fzf/src/terminal.go	/^func replacePlaceholder(params replacePlaceholderParams) (string, []string) {$/;"	f	package:fzf	typeref:typename:(string, []string)
replacePlaceholderParams	plugged/fzf/src/terminal.go	/^type replacePlaceholderParams struct {$/;"	s	package:fzf
replacePlaceholderTest	plugged/fzf/src/terminal_test.go	/^func replacePlaceholderTest(template string, stripAnsi bool, delimiter Delimiter, printsep strin/;"	f	package:fzf	typeref:typename:string
replace_initial_text	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^    def replace_initial_text(self, buf):$/;"	m	class:SnippetInstance
replace_with	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def replace_with(self, other):$/;"	m	class:ClassifiedFailure
replacement	plugged/MatchTagAlways/python/mta_core.py	/^  def replacement( match ):$/;"	f	function:PacifyHtmlComments	file:
replay_user_edits	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^    def replay_user_edits(self, cmds, ctab=None):$/;"	m	class:SnippetInstance
repository	plugged/splitjoin.vim/spec/support/vim-elm-syntax/addon-info.json	/^  "repository": {$/;"	o
repository	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    repository = models.CharField(max_length=50, db_index=True)$/;"	v	class:ReferenceDataSignatures
repository	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    repository = models.ForeignKey(Repository, on_delete=models.CASCADE)$/;"	v	class:FailureLine
repository	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    repository = models.ForeignKey(Repository, on_delete=models.CASCADE)$/;"	v	class:Job
repository	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    repository = models.ForeignKey(Repository, on_delete=models.CASCADE)$/;"	v	class:Push
repository	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    repository = models.ForeignKey(Repository, on_delete=models.CASCADE)$/;"	v	class:RunnableJob
repository_group	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    repository_group = models.ForeignKey('RepositoryGroup', on_delete=models.CASCADE)$/;"	v	class:Repository
repro	plugged/ultisnips/Makefile	/^repro:$/;"	t
reqActivate	plugged/fzf/src/terminal.go	/^	reqActivate$/;"	c	package:fzf
reqBecome	plugged/fzf/src/terminal.go	/^	reqBecome$/;"	c	package:fzf
reqBox	plugged/fzf/src/matcher.go	/^	reqBox         *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
reqBox	plugged/fzf/src/terminal.go	/^	reqBox             *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
reqClose	plugged/fzf/src/terminal.go	/^	reqClose$/;"	c	package:fzf
reqFatal	plugged/fzf/src/terminal.go	/^	reqFatal$/;"	c	package:fzf
reqFullRedraw	plugged/fzf/src/terminal.go	/^	reqFullRedraw$/;"	c	package:fzf
reqHeader	plugged/fzf/src/terminal.go	/^	reqHeader$/;"	c	package:fzf
reqInfo	plugged/fzf/src/terminal.go	/^	reqInfo$/;"	c	package:fzf
reqJump	plugged/fzf/src/terminal.go	/^	reqJump$/;"	c	package:fzf
reqList	plugged/fzf/src/terminal.go	/^	reqList$/;"	c	package:fzf
reqPreviewDelayed	plugged/fzf/src/terminal.go	/^	reqPreviewDelayed$/;"	c	package:fzf
reqPreviewDisplay	plugged/fzf/src/terminal.go	/^	reqPreviewDisplay$/;"	c	package:fzf
reqPreviewEnqueue	plugged/fzf/src/terminal.go	/^	reqPreviewEnqueue$/;"	c	package:fzf
reqPreviewRefresh	plugged/fzf/src/terminal.go	/^	reqPreviewRefresh$/;"	c	package:fzf
reqPrintQuery	plugged/fzf/src/terminal.go	/^	reqPrintQuery$/;"	c	package:fzf
reqPrompt	plugged/fzf/src/terminal.go	/^	reqPrompt util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
reqQuit	plugged/fzf/src/terminal.go	/^	reqQuit$/;"	c	package:fzf
reqRedrawBorderLabel	plugged/fzf/src/terminal.go	/^	reqRedrawBorderLabel$/;"	c	package:fzf
reqRedrawPreviewLabel	plugged/fzf/src/terminal.go	/^	reqRedrawPreviewLabel$/;"	c	package:fzf
reqReinit	plugged/fzf/src/terminal.go	/^	reqReinit$/;"	c	package:fzf
reqReset	plugged/fzf/src/matcher.go	/^	reqReset$/;"	c	package:fzf
reqResize	plugged/fzf/src/terminal.go	/^	reqResize$/;"	c	package:fzf
reqRetry	plugged/fzf/src/matcher.go	/^	reqRetry util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
request	plugged/completor.vim/pythonx/completor/__init__.py	/^    def request(self):$/;"	m	class:Completor
res	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    res <- .Fortran("dqrdc2",$/;"	v	function:foo
res	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    res <- .Fortran("dqrdc2",$/;"	v	function:foo
resend_confirmation	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/with_spec.rb	/^  def resend_confirmation(username) when is_binary(username) do$/;"	f
reset	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def reset(self):$/;"	m	class:Lsp
reset	plugged/completor.vim/pythonx/completor/__init__.py	/^    def reset(self):$/;"	m	class:Completor
reset	plugged/completor.vim/pythonx/completor/api.py	/^def reset(args):$/;"	f
reset	plugged/completor.vim/tests/conftest.py	/^    def reset(self):$/;"	m	class:Vim
reset	plugged/ultisnips/pythonx/UltiSnips/indent_util.py	/^    def reset(self):$/;"	m	class:IndentUtil
reset	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def reset(self):$/;"	m	class:VisualContentPreserver
reset_guru	plugged/completor.vim/tests/test_go.py	/^    def reset_guru(self):$/;"	m	class:TestDoc
reset_indent	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def reset_indent(self):$/;"	m	class:SnippetUtil
resizeWindows	plugged/fzf/src/terminal.go	/^func (t *Terminal) resizeWindows(forcePreview bool) {$/;"	f	struct:fzf.Terminal
resolution	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    resolution = models.CharField(max_length=64, blank=True, db_index=True)$/;"	v	class:Bugscache
resolveFrom	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^var resolveFrom = require('resolve-from');$/;"	v
resolve_ambiguity	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/base.py	/^def resolve_ambiguity(all_tokens, seen_ts):$/;"	f
restart	plugged/fzf/src/reader.go	/^func (r *Reader) restart(command commandSpec, environ []string) {$/;"	f	struct:fzf.Reader
restoreTerminal	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) restoreTerminal() {$/;"	f	unknown:tui.LightRenderer
restoreTerminal	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) restoreTerminal() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
restore_unnamed_register	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def restore_unnamed_register(self):$/;"	m	class:VimState
result	plugged/fzf/src/terminal.go	/^	result    Result$/;"	m	struct:fzf.itemLine	typeref:typename:Result
result	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    result = models.CharField(max_length=25)$/;"	v	class:Job
result	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    result = models.IntegerField(choices=RESULTS)$/;"	v	class:TextLogStep
resumableState	plugged/fzf/src/terminal.go	/^type resumableState int$/;"	t	package:fzf	typeref:typename:int
retire	plugged/fzf/src/cache.go	/^func (cc *ChunkCache) retire(chunk ...*Chunk) {$/;"	f	struct:fzf.ChunkCache
retry_id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    retry_id = models.PositiveIntegerField()$/;"	v	class:TaskclusterMetadata
revision	plugged/fzf/main.go	/^var revision = "devel"$/;"	v	package:main
revision	plugged/fzf/src/core.go	/^type revision struct {$/;"	s	package:fzf
revision	plugged/fzf/src/matcher.go	/^	revision       revision$/;"	m	struct:fzf.Matcher	typeref:typename:revision
revision	plugged/fzf/src/matcher.go	/^	revision revision$/;"	m	struct:fzf.MatchRequest	typeref:typename:revision
revision	plugged/fzf/src/merger.go	/^	revision revision$/;"	m	struct:fzf.Merger	typeref:typename:revision
revision	plugged/fzf/src/terminal.go	/^	revision           revision$/;"	m	struct:fzf.Terminal	typeref:typename:revision
revision	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    revision = models.CharField(max_length=40)$/;"	v	class:Commit
revision	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    revision = models.CharField(max_length=40)$/;"	v	class:Push
right	plugged/fzf/src/tui/tui.go	/^	right       rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
rmcup	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) rmcup() {$/;"	f	struct:tui.LightRenderer
root	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^def root():$/;"	f
rubout	plugged/fzf/src/terminal.go	/^func (t *Terminal) rubout(pattern string) {$/;"	f	struct:fzf.Terminal
ruby	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^describe "ruby" do$/;"	d
ruby_operators	plugged/seoul256.vim/colors/seoul256.vim	/^let ruby_operators = 1$/;"	v
run	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^def run(jedi):$/;"	f
run	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/comment_spec.rb	/^    def run do$/;"	f
run	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/comment_spec.rb	/^    def run(task) when task in [:t1, :t2] do$/;"	f
runInitProfileTests	plugged/fzf/src/options_pprof_test.go	/^var runInitProfileTests = flag.Bool("test-init-profile", false, "run init profile tests")$/;"	v	package:fzf
runProxy	plugged/fzf/src/proxy.go	/^func runProxy(commandPrefix string, cmdBuilder func(temp string) *exec.Cmd, opts *Options, withE/;"	f	package:fzf	typeref:typename:(int, error)
runTest	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    def runTest(self):$/;"	m	class:_Base
runTest	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    def runTest(self):$/;"	m	class:_BaseGuessing
runTest	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    def runTest(self):$/;"	m	class:_MPBase
runTest	plugged/ultisnips/test/vim_test_case.py	/^    def runTest(self):$/;"	m	class:VimTestCase
runTmux	plugged/fzf/src/tmux.go	/^func runTmux(args []string, opts *Options) (int, error) {$/;"	f	package:fzf	typeref:typename:(int, error)
runWinpty	plugged/fzf/src/winpty.go	/^func runWinpty(_ []string, _ *Options) (int, error) {$/;"	f	package:fzf	typeref:typename:(int, error)
runWinpty	plugged/fzf/src/winpty_windows.go	/^func runWinpty(args []string, opts *Options) (int, error) {$/;"	f	package:fzf	typeref:typename:(int, error)
run_with_vimrc	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^def run_with_vimrc(vimrc):$/;"	f
runeWidth	plugged/fzf/src/tui/tui.go	/^func runeWidth(r rune) int {$/;"	f	package:tui	typeref:typename:int
running	plugged/fzf/src/terminal.go	/^	running            *util.AtomicBool$/;"	m	struct:fzf.Terminal	typeref:typename:*util.AtomicBool
running_eta	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    running_eta = models.PositiveIntegerField(null=True, default=None)$/;"	v	class:Job
running_on_windows	plugged/ultisnips/test/util.py	/^def running_on_windows():$/;"	f
rust	plugged/splitjoin.vim/spec/plugin/rust_spec.rb	/^describe "rust" do$/;"	d
rust	plugged/splitjoin.vim/spec/support/rust.vim/after/syntax/rust.vim	/^    augroup rust.vim.after$/;"	a
rust	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^    augroup rust.vim.DelimitMate$/;"	a
rust	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^augroup rust.vim.PreWrite$/;"	a
rust#AppendCmdLine	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! rust#AppendCmdLine(text)$/;"	f
rust#CompleteExpand	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! rust#CompleteExpand(lead, line, pos)$/;"	f
rust#Emit	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! rust#Emit(type, args)$/;"	f
rust#Expand	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! rust#Expand(bang, args)$/;"	f
rust#GetConfigVar	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! rust#GetConfigVar(name, default)$/;"	f
rust#IncludeExpr	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! rust#IncludeExpr(fname) abort$/;"	f
rust#Jump	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! rust#Jump(mode, function) range$/;"	f
rust#Load	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! rust#Load()$/;"	f
rust#Play	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! rust#Play(count, line1, line2, ...) abort$/;"	f
rust#Run	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! rust#Run(bang, args)$/;"	f
rust#Test	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! rust#Test(mods, winsize, all, options) abort$/;"	f
rust#debugging#Info	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust/debugging.vim	/^function! rust#debugging#Info() abort$/;"	f
rust#debugging#InfoToClipboard	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust/debugging.vim	/^function! rust#debugging#InfoToClipboard() abort$/;"	f
rust#debugging#InfoToFile	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust/debugging.vim	/^function! rust#debugging#InfoToFile(filename) abort$/;"	f
rust#delimitmate#onMap	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust/delimitmate.vim	/^function! rust#delimitmate#onMap() abort$/;"	f
rust#delimitmate#onUnmap	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust/delimitmate.vim	/^function! rust#delimitmate#onUnmap() abort$/;"	f
rust#tags#IsUCtags	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust/tags.vim	/^function! rust#tags#IsUCtags() abort$/;"	f
rust.vim	plugged/splitjoin.vim/spec/support/rust.vim/README.md	/^# rust.vim$/;"	c
rustfmt#Cmd	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^function! rustfmt#Cmd()$/;"	f
rustfmt#DetectVersion	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^function! rustfmt#DetectVersion()$/;"	f
rustfmt#Format	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^function! rustfmt#Format()$/;"	f
rustfmt#FormatRange	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^function! rustfmt#FormatRange(line1, line2)$/;"	f
rustfmt#Load	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^function! rustfmt#Load()$/;"	f
rustfmt#PreWrite	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^function! rustfmt#PreWrite()$/;"	f
rv	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def rv(self):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
rv	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def rv(self, value):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
rval	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    rval <- vector("character", n)$/;"	v	function:latlon.format
rval	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    rval <- vector("character", n)$/;"	v	function:lon.format
rval	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    rval <- vector("character", n)$/;"	v	function:latlon.format
rval	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    rval <- vector("character", n)$/;"	v	function:lon.format
s:AbsoluteVimPath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AbsoluteVimPath(...) abort$/;"	f
s:AddCurlyBrackets	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:AddCurlyBrackets(line)$/;"	f
s:AddDiffSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddDiffSection(to, stat, label, files) abort$/;"	f
s:AddHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddHeader(to, key, value) abort$/;"	f
s:AddLogSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddLogSection(to, label, log) abort$/;"	f
s:AddSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddSection(to, label, lines, ...) abort$/;"	f
s:Align	plugged/splitjoin.vim/autoload/sj.vim	/^function! s:Align(from, to, type)$/;"	f
s:AllLinesStartWithWhen	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! s:AllLinesStartWithWhen(lines)$/;"	f
s:AlternatePair	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:AlternatePair()$/;"	f
s:ArgSplit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ArgSplit(string) abort$/;"	f
s:ArrayLiteralClosingBracket	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! s:ArrayLiteralClosingBracket(opening_bracket)$/;"	f
s:AskPassArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AskPassArgs(dir) abort$/;"	f
s:Balanced	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:Balanced(lnum,line)$/;"	f
s:BlameBufnr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameBufnr(...) abort$/;"	f
s:BlameCommit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommit(cmd, ...) abort$/;"	f
s:BlameCommitFileLnum	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommitFileLnum(...) abort$/;"	f
s:BlameCursorSync	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCursorSync(bufnr, line) abort$/;"	f
s:BlameJump	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameJump(suffix, ...) abort$/;"	f
s:BlameLeave	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameLeave() abort$/;"	f
s:BlameMaps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameMaps(is_ftplugin) abort$/;"	f
s:BlameQuit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameQuit() abort$/;"	f
s:BlameRehighlight	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameRehighlight() abort$/;"	f
s:BlameSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameSubcommand(line1, count, range, bang, mods, options) abort$/;"	f
s:BlobTemp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlobTemp(url) abort$/;"	f
s:BlurStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlurStatus() abort$/;"	f
s:BracketMatch	plugged/splitjoin.vim/autoload/sj.vim	/^function! s:BracketMatch(text, brackets)$/;"	f
s:BranchCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BranchCfile(result) abort$/;"	f
s:BrowserOpen	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BrowserOpen(url, mods, echo_copy) abort$/;"	f
s:BufName	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BufName(var) abort$/;"	f
s:BufferWidth	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:BufferWidth() abort "{{{1$/;"	f
s:BufferWidth	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:BufferWidth() abort "{{{1$/;"	f
s:BufferWidth	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:BufferWidth() abort "{{{1$/;"	f
s:BufferWidth	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:BufferWidth() abort "{{{1$/;"	f
s:BuildEnvPrefix	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildEnvPrefix(env) abort$/;"	f
s:BuildShell	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildShell(dir, env, git, args) abort$/;"	f
s:CeilingDirectories	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:CeilingDirectories() abort$/;"	f
s:Center	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! s:Center(string, fieldwidth)$/;"	f
s:CfilePorcelain	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CfilePorcelain(...) abort$/;"	f
s:CharAt	plugged/splitjoin.vim/autoload/sj/elm.vim	/^function! s:CharAt(column)$/;"	f
s:ChompDefault	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompDefault(default, ...) abort$/;"	f
s:ChompStderr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompStderr(...) abort$/;"	f
s:ChooseCommandMap	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^function! s:ChooseCommandMap(commandline)$/;"	f
s:CloseBlock	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseBlock(lines, folds) abort dict "{{{1$/;"	f
s:CloseBlock	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseBlock(lines, folds) abort dict "{{{1$/;"	f
s:CloseBlock	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseBlock(lines, folds) abort dict "{{{1$/;"	f
s:CloseBlock	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseBlock(lines, folds) abort dict "{{{1$/;"	f
s:CloseDataStructure	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseDataStructure(lines, folds) abort dict "{{{1$/;"	f
s:CloseDataStructure	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseDataStructure(lines, folds) abort dict "{{{1$/;"	f
s:CloseDataStructure	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseDataStructure(lines, folds) abort dict "{{{1$/;"	f
s:CloseDataStructure	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseDataStructure(lines, folds) abort dict "{{{1$/;"	f
s:CloseDecorator	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseDecorator(lines, folds) abort dict "{{{1$/;"	f
s:CloseDecorator	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseDecorator(lines, folds) abort dict "{{{1$/;"	f
s:CloseDecorator	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseDecorator(lines, folds) abort dict "{{{1$/;"	f
s:CloseDecorator	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseDecorator(lines, folds) abort dict "{{{1$/;"	f
s:CloseImports	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseImports(lines, folds) abort dict "{{{1$/;"	f
s:CloseImports	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseImports(lines, folds) abort dict "{{{1$/;"	f
s:CloseImports	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseImports(lines, folds) abort dict "{{{1$/;"	f
s:CloseImports	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseImports(lines, folds) abort dict "{{{1$/;"	f
s:CloseOnPattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseOnPattern(lines, folds) abort dict "{{{1$/;"	f
s:CloseOnPattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseOnPattern(lines, folds) abort dict "{{{1$/;"	f
s:CloseOnPattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseOnPattern(lines, folds) abort dict "{{{1$/;"	f
s:CloseOnPattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:CloseOnPattern(lines, folds) abort dict "{{{1$/;"	f
s:ClosestMultilineBraces	plugged/splitjoin.vim/autoload/sj/elm.vim	/^function! s:ClosestMultilineBraces()$/;"	f
s:CommitInteractive	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitInteractive(line1, line2, range, bang, mods, options, patch) abort$/;"	f
s:CommitSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:CompletableSubcommands	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompletableSubcommands(dir) abort$/;"	f
s:Complete	plugged/vim-abolish/plugin/abolish.vim	/^function! s:Complete(A,L,P)$/;"	f
s:CompleteBisect	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteBisect(A, L, P, ...) abort$/;"	f
s:CompleteHeads	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteHeads(dir) abort$/;"	f
s:CompletePush	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompletePush(A, L, P, ...) abort$/;"	f
s:CompleteRemote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRemote(A, L, P, ...) abort$/;"	f
s:CompleteRevision	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRevision(A, L, P, ...) abort$/;"	f
s:CompleteSub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteSub(subcommand, A, L, P, ...) abort$/;"	f
s:CompleteTabularizeCommand	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^function! s:CompleteTabularizeCommand(argstart, cmdline, cursorpos)$/;"	f
s:ConfigCallback	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigCallback(r, into) abort$/;"	f
s:ConfigLengthSort	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigLengthSort(i1, i2) abort$/;"	f
s:ConfigTimestamps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigTimestamps(dir, dict) abort$/;"	f
s:ContainingCommit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ContainingCommit() abort$/;"	f
s:Continues	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:Continues()$/;"	f
s:CurlResponse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CurlResponse(result) abort$/;"	f
s:CurrentChar	plugged/splitjoin.vim/autoload/sj/elm.vim	/^function! s:CurrentChar()$/;"	f
s:CurrentLineClosestBraces	plugged/splitjoin.vim/autoload/sj/elm.vim	/^function! s:CurrentLineClosestBraces(column)$/;"	f
s:CurrentLineOutermostBraces	plugged/splitjoin.vim/autoload/sj/elm.vim	/^function! s:CurrentLineOutermostBraces(column)$/;"	f
s:DOC_POSITION	plugged/completor.vim/autoload/completor/action.vim	/^let s:DOC_POSITION = {$/;"	v
s:DeleteLines	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^function! s:DeleteLines(start, end) abort$/;"	f
s:DetectElixir	plugged/splitjoin.vim/spec/support/vim-elixir/ftdetect/elixir.vim	/^function! s:DetectElixir()$/;"	f
s:DiffModifier	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DiffModifier(count, default) abort$/;"	f
s:DifftoolSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DifftoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Dir(...) abort$/;"	f
s:DirCheck	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCheck(...) abort$/;"	f
s:DirCommitFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCommitFile(path) abort$/;"	f
s:DirRev	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirRev(url) abort$/;"	f
s:DirUrlPrefix	plugged/vim-fugitive/autoload/fugitive.vim	/^  function! s:DirUrlPrefix(dir) abort$/;"	f
s:Do	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Do(action, visual) abort$/;"	f
s:DoAutocmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmd(...) abort$/;"	f
s:DoAutocmdChanged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmdChanged(dir) abort$/;"	f
s:DoMotion	plugged/splitjoin.vim/autoload/sj/r.vim	/^function s:DoMotion(motion)$/;"	f
s:DoStagePushHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStagePushHeader(value) abort$/;"	f
s:DoStageUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushed(record) abort$/;"	f
s:DoStageUnpushedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushedHeading(heading) abort$/;"	f
s:DoStageUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstaged(record) abort$/;"	f
s:DoStageUnstagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstagedHeading(heading) abort$/;"	f
s:DoStageUntracked	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntracked(record) abort$/;"	f
s:DoStageUntrackedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntrackedHeading(heading) abort$/;"	f
s:DoToggleHeadHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHeadHeader(value) abort$/;"	f
s:DoToggleHelpHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHelpHeader(value) abort$/;"	f
s:DoTogglePushHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoTogglePushHeader(value) abort$/;"	f
s:DoToggleStaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStaged(record) abort$/;"	f
s:DoToggleStagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStagedHeading(...) abort$/;"	f
s:DoToggleUnpulled	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulled(record) abort$/;"	f
s:DoToggleUnpulledHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulledHeading(heading) abort$/;"	f
s:DoToggleUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushed(record) abort$/;"	f
s:DoToggleUnpushedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushedHeading(heading) abort$/;"	f
s:DoToggleUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstaged(record) abort$/;"	f
s:DoToggleUnstagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstagedHeading(...) abort$/;"	f
s:DoToggleUntracked	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntracked(record) abort$/;"	f
s:DoToggleUntrackedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntrackedHeading(...) abort$/;"	f
s:DoUnstageStaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStaged(record) abort$/;"	f
s:DoUnstageStagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStagedHeading(heading) abort$/;"	f
s:DoUnstageUnpulled	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulled(record) abort$/;"	f
s:DoUnstageUnpulledHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulledHeading(heading) abort$/;"	f
s:DoUnstageUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpushed(record) abort$/;"	f
s:DoUnstageUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnstaged(record) abort$/;"	f
s:DoWhile	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:DoWhile()$/;"	f
s:DotRelative	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DotRelative(path, ...) abort$/;"	f
s:Echo	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust/debugging.vim	/^function! s:Echo(message) abort$/;"	f
s:EchoGlobalVariables	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust/debugging.vim	/^function! s:EchoGlobalVariables() abort$/;"	f
s:Emit	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! s:Emit(dict, type, args)$/;"	f
s:ExecPath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExecPath() abort$/;"	f
s:Expand	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! s:Expand(dict, pretty, args)$/;"	f
s:Expand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Expand(rev, ...) abort$/;"	f
s:ExpandVar	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVar(other, var, flags, esc, ...) abort$/;"	f
s:ExpireStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpireStatus(bufnr) abort$/;"	f
s:ExprCol	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:ExprCol()$/;"	f
s:FetchSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FetchSubcommand(...) abort$/;"	f
s:FileIgnoreCase	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FileIgnoreCase(for_completion) abort$/;"	f
s:FilterEscape	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FilterEscape(items, ...) abort$/;"	f
s:FilterString	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! s:FilterString(lines, commandstring)$/;"	f
s:FindComments	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! s:FindComments(start_line_no, end_line_no)$/;"	f
s:FindDecoratorTitle	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:FindDecoratorTitle(focus, foldstart, foldend) abort "{{{1$/;"	f
s:FindDecoratorTitle	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:FindDecoratorTitle(focus, foldstart, foldend) abort "{{{1$/;"	f
s:FindDecoratorTitle	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:FindDecoratorTitle(focus, foldstart, foldend) abort "{{{1$/;"	f
s:FindDecoratorTitle	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:FindDecoratorTitle(focus, foldstart, foldend) abort "{{{1$/;"	f
s:FindDocstringTitle	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:FindDocstringTitle(focus, foldstart, foldend) abort "{{{1$/;"	f
s:FindDocstringTitle	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:FindDocstringTitle(focus, foldstart, foldend) abort "{{{1$/;"	f
s:FindDocstringTitle	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:FindDocstringTitle(focus, foldstart, foldend) abort "{{{1$/;"	f
s:FindDocstringTitle	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:FindDocstringTitle(focus, foldstart, foldend) abort "{{{1$/;"	f
s:FindPair	plugged/splitjoin.vim/spec/support/vim-elm-syntax/indent/elm.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
s:FoldsFromLines	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:FoldsFromLines(lines) abort "{{{1$/;"	f
s:FoldsFromLines	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:FoldsFromLines(lines) abort "{{{1$/;"	f
s:FoldsFromLines	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:FoldsFromLines(lines) abort "{{{1$/;"	f
s:FoldsFromLines	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:FoldsFromLines(lines) abort "{{{1$/;"	f
s:Format	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Format(val) abort$/;"	f
s:FormatFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatFile(dict) abort$/;"	f
s:FormatLog	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatLog(dict) abort$/;"	f
s:FormatRebase	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatRebase(dict) abort$/;"	f
s:FunctionReturnType	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! s:FunctionReturnType()$/;"	f
s:GF	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
s:Generate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Generate(object, ...) abort$/;"	f
s:GetChildren	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:GetChildren(line_no)$/;"	f
s:GetEnclosingTagLocations	plugged/MatchTagAlways/autoload/MatchTagAlways.vim	/^function! s:GetEnclosingTagLocations()$/;"	f
s:GetIndentWhitespace	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:GetIndentWhitespace(line_no)$/;"	f
s:GetLineAttributes	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function s:GetLineAttributes(line)$/;"	f
s:GetMdIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rmd.vim	/^function s:GetMdIndent()$/;"	f
s:GetPair	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^  function s:GetPair(start,end,flags,skip)$/;"	f
s:GetVars	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:GetVars()$/;"	f
s:GetVueSection	plugged/splitjoin.vim/autoload/sj/vue.vim	/^function! s:GetVueSection()$/;"	f
s:GetYamlIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rmd.vim	/^function s:GetYamlIndent()$/;"	f
s:Get_last_paren_idx	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^function! s:Get_last_paren_idx(line, o, c, pb)$/;"	f
s:Get_matching_brace	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^function! s:Get_matching_brace(linenr, o, c, delbrace)$/;"	f
s:Get_matching_if	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^function! s:Get_matching_if(linenr, delif)$/;"	f
s:Get_paren_balance	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^function! s:Get_paren_balance(line, o, c)$/;"	f
s:Get_prev_line	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^function s:Get_prev_line(lineno)$/;"	f
s:GitCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitCmd() abort$/;"	f
s:GitDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitDir(...) abort$/;"	f
s:GitIndexFileEnv	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitIndexFileEnv() abort$/;"	f
s:GitShellCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitShellCmd() abort$/;"	f
s:GlobComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GlobComplete(lead, pattern, ...) abort$/;"	f
s:GrepCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepCfile(result) abort$/;"	f
s:GrepOptions	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepOptions(args, dir) abort$/;"	f
s:GrepParseLine	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepParseLine(options, quiet, dir, line) abort$/;"	f
s:GrepSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:HandleComments	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! s:HandleComments(start_line_no, end_line_no)$/;"	f
s:HasOpt	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:HasOpt(args, ...) abort$/;"	f
s:HideSymbol	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rhelp.vim	/^function s:HideSymbol(pat, cchar, hide)$/;"	f
s:HighlightEnclosingTags	plugged/MatchTagAlways/autoload/MatchTagAlways.vim	/^function! s:HighlightEnclosingTags()$/;"	f
s:HighlightEnclosingTagsIfPossible	plugged/MatchTagAlways/autoload/MatchTagAlways.vim	/^function! s:HighlightEnclosingTagsIfPossible()$/;"	f
s:HunkPosition	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:HunkPosition(lnum) abort$/;"	f
s:I1	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:I1 = [ s:insert_side_fg[0] , s:insert_side_bg[0] , s:insert_side_fg[1] , s:insert_side_bg[/;"	v
s:I2	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:I2 = [ s:insert_sub_fg[0] , s:insert_sub_bg[0] , s:insert_sub_fg[1] , s:insert_sub_bg[1] ]$/;"	v
s:I3	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:I3 = [ s:insert_mid_fg[0] , s:insert_mid_bg[0] , s:insert_mid_fg[1] , s:insert_mid_bg[1] ]$/;"	v
s:IA1	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:IA1 = [ s:inactive_side_fg[0] , s:inactive_side_bg[0] , s:inactive_side_fg[1] , s:inactive/;"	v
s:IA2	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:IA2 = [ s:inactive_sub_fg[0] , s:inactive_sub_bg[0] , s:inactive_sub_fg[1] , s:inactive_su/;"	v
s:IA3	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:IA3 = [ s:inactive_mid_fg[0] , s:inactive_mid_bg[0] , s:inactive_mid_fg[1] , s:inactive_mi/;"	v
s:IncreaseIndentWhitespace	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:IncreaseIndentWhitespace(from, to, whitespace, level)$/;"	f
s:IndentedLinesBelow	plugged/splitjoin.vim/autoload/sj/coffee.vim	/^function! s:IndentedLinesBelow(line)$/;"	f
s:InitFold	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitFold(line) abort "{{{1$/;"	f
s:InitFold	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitFold(line) abort "{{{1$/;"	f
s:InitFold	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitFold(line) abort "{{{1$/;"	f
s:InitFold	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitFold(line) abort "{{{1$/;"	f
s:InitLine	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLine(lnum, state) abort "{{{1$/;"	f
s:InitLine	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLine(lnum, state) abort "{{{1$/;"	f
s:InitLine	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLine(lnum, state) abort "{{{1$/;"	f
s:InitLine	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLine(lnum, state) abort "{{{1$/;"	f
s:InitLineBackslash	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineBackslash(line, state) "{{{1$/;"	f
s:InitLineBackslash	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineBackslash(line, state) "{{{1$/;"	f
s:InitLineBackslash	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineBackslash(line, state) "{{{1$/;"	f
s:InitLineBackslash	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineBackslash(line, state) "{{{1$/;"	f
s:InitLineBlank	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineBlank(line, state) "{{{1$/;"	f
s:InitLineBlank	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineBlank(line, state) "{{{1$/;"	f
s:InitLineBlank	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineBlank(line, state) "{{{1$/;"	f
s:InitLineBlank	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineBlank(line, state) "{{{1$/;"	f
s:InitLineComment	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineComment(line, state) "{{{1$/;"	f
s:InitLineComment	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineComment(line, state) "{{{1$/;"	f
s:InitLineComment	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineComment(line, state) "{{{1$/;"	f
s:InitLineComment	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineComment(line, state) "{{{1$/;"	f
s:InitLineParen	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineParen(line, state) "{{{1$/;"	f
s:InitLineParen	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineParen(line, state) "{{{1$/;"	f
s:InitLineParen	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineParen(line, state) "{{{1$/;"	f
s:InitLineParen	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineParen(line, state) "{{{1$/;"	f
s:InitLineString	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineString(line, state) "{{{1$/;"	f
s:InitLineString	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineString(line, state) "{{{1$/;"	f
s:InitLineString	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineString(line, state) "{{{1$/;"	f
s:InitLineString	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:InitLineString(line, state) "{{{1$/;"	f
s:InitializeBuffer	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:InitializeBuffer(repo) abort$/;"	f
s:IsBlock	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:IsBlock()$/;"	f
s:IsConflicted	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:IsConflicted() abort$/;"	f
s:IsContOne	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:IsContOne(cont)$/;"	f
s:IsSwitch	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:IsSwitch()$/;"	f
s:IsValidLineNo	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:IsValidLineNo(no)$/;"	f
s:IsValidSelection	plugged/splitjoin.vim/autoload/sj/r.vim	/^function! s:IsValidSelection(motion)$/;"	f
s:JobExecute	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobExecute(argv, jopts, stdin, callback, ...) abort$/;"	f
s:JobNvimCallback	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobNvimCallback(lines, job, data, type) abort$/;"	f
s:JobNvimExit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobNvimExit(dict, callback, job, data, type) dict abort$/;"	f
s:JobOpts	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobOpts(cmd, env) abort$/;"	f
s:JobVimExit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobVimExit(dict, callback, temp, job, status) abort$/;"	f
s:JoinArrayItems	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:JoinArrayItems(items)$/;"	f
s:JoinBlockBody	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! s:JoinBlockBody(lines)$/;"	f
s:JoinChomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JoinChomp(list) abort$/;"	f
s:JoinHashWithCurlyBraces	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! s:JoinHashWithCurlyBraces()$/;"	f
s:JoinHashWithRoundBraces	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! s:JoinHashWithRoundBraces()$/;"	f
s:JoinHashWithoutBraces	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! s:JoinHashWithoutBraces()$/;"	f
s:JoinLines	plugged/splitjoin.vim/autoload/sj/elm.vim	/^function! s:JoinLines(text)$/;"	f
s:JoinList	plugged/splitjoin.vim/autoload/sj/cue.vim	/^function! s:JoinList(delimiter, delimiter_padding)$/;"	f
s:JoinList	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! s:JoinList(delimiter)$/;"	f
s:JoinList	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! s:JoinList(start_char, end_char)$/;"	f
s:JoinList	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! s:JoinList(regex, opening_char, closing_char)$/;"	f
s:JoinList	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! s:JoinList(delimiter)$/;"	f
s:JoinOuterBraces	plugged/splitjoin.vim/autoload/sj/elm.vim	/^function! s:JoinOuterBraces(text)$/;"	f
s:Jump_Back	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! s:Jump_Back()$/;"	f
s:Jump_Forward	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! s:Jump_Forward()$/;"	f
s:Keywordprg	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Keywordprg() abort$/;"	f
s:Left	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! s:Left(string, fieldwidth)$/;"	f
s:LinesError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LinesError(...) abort$/;"	f
s:LinesFromBuffer	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:LinesFromBuffer() abort "{{{1$/;"	f
s:LinesFromBuffer	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:LinesFromBuffer() abort "{{{1$/;"	f
s:LinesFromBuffer	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:LinesFromBuffer() abort "{{{1$/;"	f
s:LinesFromBuffer	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:LinesFromBuffer() abort "{{{1$/;"	f
s:LocateDefinition	plugged/splitjoin.vim/autoload/sj/css.vim	/^function! s:LocateDefinition()$/;"	f
s:LogFlushQueue	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogFlushQueue(state, dir) abort$/;"	f
s:LogParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogParse(state, dir, prefix, line) abort$/;"	f
s:LookingAt	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:LookingAt()$/;"	f
s:LowToHigh	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:LowToHigh(x, y) abort "{{{1$/;"	f
s:LowToHigh	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:LowToHigh(x, y) abort "{{{1$/;"	f
s:LowToHigh	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:LowToHigh(x, y) abort "{{{1$/;"	f
s:LowToHigh	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:LowToHigh(x, y) abort "{{{1$/;"	f
s:Map	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
s:Map	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Map(mode, lhs, rhs, flags) abort$/;"	f
s:MapGitOps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MapGitOps(is_ftplugin) abort$/;"	f
s:MapMotion	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MapMotion(lhs, rhs) abort$/;"	f
s:MapStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MapStatus() abort$/;"	f
s:Mapping	plugged/splitjoin.vim/plugin/splitjoin.vim	/^function! s:Mapping(mapping, function)$/;"	f
s:MergeHead	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeHead(dir) abort$/;"	f
s:MergeSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:MergetoolSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergetoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:MigrateComments	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! s:MigrateComments(comments, start_line_no, end_line_no)$/;"	f
s:Mods	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Mods(mods, ...) abort$/;"	f
s:Move	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Move(force, rename, destination) abort$/;"	f
s:MoveCursor	plugged/splitjoin.vim/autoload/sj/r.vim	/^function! s:MoveCursor(lines, cols)$/;"	f
s:N1	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:N1 = [ s:normal_side_fg[0] , s:normal_side_bg[0] , s:normal_side_fg[1] , s:normal_side_bg[/;"	v
s:N2	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:N2 = [ s:normal_sub_fg[0] , s:normal_sub_bg[0] , s:normal_sub_fg[1] , s:normal_sub_bg[1] ]$/;"	v
s:N3	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:N3 = [ s:normal_mid_fg[0] , s:normal_mid_bg[0] , s:normal_mid_fg[1] , s:normal_mid_bg[1] ]$/;"	v
s:Nat	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:Nat(int)$/;"	f
s:NavigateUp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NavigateUp(count) abort$/;"	f
s:NestedArrayLevel	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:NestedArrayLevel(line)$/;"	f
s:NextExpandedHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextExpandedHunk(count) abort$/;"	f
s:NextFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextFile(count) abort$/;"	f
s:NextHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextHunk(count) abort$/;"	f
s:NextItem	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextItem(count) abort$/;"	f
s:NextSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSection(count) abort$/;"	f
s:NextSectionEnd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSectionEnd(count) abort$/;"	f
s:NoTeXIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rnoweb.vim	/^function! s:NoTeXIndent()$/;"	f
s:NormalizeWhitespace	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:NormalizeWhitespace(lines)$/;"	f
s:OneScope	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:OneScope()$/;"	f
s:OpenExpand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenExpand(dir, file, wants_cmd) abort$/;"	f
s:OpenParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenParse(string, wants_cmd, wants_multiple) abort$/;"	f
s:OriginBufnr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OriginBufnr(...) abort$/;"	f
s:Owner	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Owner(path, ...) abort$/;"	f
s:ParseCino	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:ParseCino(f)$/;"	f
s:ParseDiffHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ParseDiffHeader(str) abort$/;"	f
s:ParseJsonFromMotion	plugged/splitjoin.vim/autoload/sj/r.vim	/^function! s:ParseJsonFromMotion(motion)$/;"	f
s:ParseJsonObject	plugged/splitjoin.vim/autoload/sj/r.vim	/^function! s:ParseJsonObject(text)$/;"	f
s:ParsePattern	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^function! s:ParsePattern(string)$/;"	f
s:PatchSearchExpr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PatchSearchExpr(reverse) abort$/;"	f
s:PathInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PathInfo(url) abort$/;"	f
s:PathJoin	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PathJoin(prefix, str) abort$/;"	f
s:PathUrlEncode	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PathUrlEncode(str) abort$/;"	f
s:PlusEscape	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PlusEscape(string) abort$/;"	f
s:PrepareEnv	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PrepareEnv(env, dir) abort$/;"	f
s:PrepareJob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PrepareJob(opts) abort$/;"	f
s:PreparePathArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreparePathArgs(cmd, dir, literal, explicit) abort$/;"	f
s:PreviousFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousFile(count) abort$/;"	f
s:PreviousHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousHunk(count) abort$/;"	f
s:PreviousItem	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousItem(count) abort$/;"	f
s:PreviousSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSection(count) abort$/;"	f
s:PreviousSectionEnd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSectionEnd(count) abort$/;"	f
s:PreviousToken	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:PreviousToken(...)$/;"	f
s:ProjectionistDetect	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ProjectionistDetect() abort$/;"	f
s:Pure	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:Pure(f,...)$/;"	f
s:PushSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PushSubcommand(...) abort$/;"	f
s:QueryLog	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QueryLog(refspec, limit, dir) abort$/;"	f
s:QueryLogRange	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QueryLogRange(old, new, dir) abort$/;"	f
s:QuickfixCreate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixCreate(nr, opts) abort$/;"	f
s:QuickfixGet	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixGet(nr, ...) abort$/;"	f
s:QuickfixOpen	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixOpen(nr, mods) abort$/;"	f
s:QuickfixSet	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixSet(nr, ...) abort$/;"	f
s:QuickfixStream	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixStream(nr, event, title, cmd, first, mods, callback, ...) abort$/;"	f
s:Quote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Quote(string) abort$/;"	f
s:R1	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:R1 = [ s:commandline_side_fg[0] , s:commandline_side_bg[0] , s:commandline_side_fg[1] , s:/;"	v
s:R1	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:R1 = [ s:replace_side_fg[0] , s:replace_side_bg[0] , s:replace_side_fg[1] , s:replace_side/;"	v
s:R2	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:R2 = [ s:commandline_sub_fg[0] , s:commandline_sub_bg[0] , s:commandline_sub_fg[1] , s:com/;"	v
s:R2	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:R2 = [ s:replace_sub_fg[0] , s:replace_sub_bg[0] , s:replace_sub_fg[1] , s:replace_sub_bg[/;"	v
s:R3	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:R3 = [ s:commandline_mid_fg[0] , s:commandline_mid_bg[0] , s:commandline_mid_fg[1] , s:com/;"	v
s:R3	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:R3 = [ s:replace_mid_fg[0] , s:replace_mid_bg[0] , s:replace_mid_fg[1] , s:replace_mid_bg[/;"	v
s:RDelete_parens	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^function s:RDelete_parens(line)$/;"	f
s:RDelete_quotes	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^function s:RDelete_quotes(line)$/;"	f
s:RIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rhelp.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:RIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rmd.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:RIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rnoweb.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:RIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rrst.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:ReadArray	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:ReadArray(str)$/;"	f
s:ReadContainer	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:ReadContainer(str, start_char, end_char)$/;"	f
s:ReadCurrentLine	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:ReadCurrentLine()$/;"	f
s:ReadFile	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ReadFile(path, line_count) abort$/;"	f
s:ReadMap	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:ReadMap(str)$/;"	f
s:ReadPrepare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReadPrepare(line1, count, range, mods) abort$/;"	f
s:ReadString	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:ReadString(str)$/;"	f
s:ReadUntil	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:ReadUntil(str, end_char)$/;"	f
s:RebaseArgument	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseArgument() abort$/;"	f
s:RebaseSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Relative	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Relative(...) abort$/;"	f
s:ReloadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatus() abort$/;"	f
s:ReloadStatusBuffer	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatusBuffer() abort$/;"	f
s:ReloadTabStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadTabStatus() abort$/;"	f
s:ReloadWinStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadWinStatus(...) abort$/;"	f
s:RemainderOfLine	plugged/splitjoin.vim/autoload/sj.vim	/^function! s:RemainderOfLine()$/;"	f
s:Remote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remote(dir, remote, flags, cb) abort$/;"	f
s:RemoteCallback	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteCallback(config, into, flags, cb) abort$/;"	f
s:RemoteDefault	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteDefault(dir) abort$/;"	f
s:RemoteParseArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteParseArgs(args) abort$/;"	f
s:RemoteRefToLocalRef	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteRefToLocalRef(repo, remote_url, ref_path) abort$/;"	f
s:RemoteResolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteResolve(url, flags) abort$/;"	f
s:RemoteUrlCallback	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RemoteUrlCallback(remote, callback) abort$/;"	f
s:Remove	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remove(after, force) abort$/;"	f
s:ReplaceCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReplaceCmd(cmd) abort$/;"	f
s:ReplaceMotionPreserveCursor	plugged/splitjoin.vim/autoload/sj/r.vim	/^function! s:ReplaceMotionPreserveCursor(motion, rep)$/;"	f
s:Resolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Resolve(path) abort$/;"	f
s:ResolveGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ResolveGitDir(git_dir) abort$/;"	f
s:ResolveUrl	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ResolveUrl(target, ...) abort$/;"	f
s:RevertSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RevertSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Right	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! s:Right(string, fieldwidth)$/;"	f
s:RmDir	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! s:RmDir(path)$/;"	f
s:Run	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! s:Run(dict, rustc_args, args)$/;"	f
s:RunBufDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunBufDelete(bufnr) abort$/;"	f
s:RunClose	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunClose(state, tmp, job, ...) abort$/;"	f
s:RunCloseIn	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunCloseIn(job) abort$/;"	f
s:RunEcho	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunEcho(tmp) abort$/;"	f
s:RunEdit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunEdit(state, tmp, job) abort$/;"	f
s:RunExit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunExit(state, tmp, job, exit_status) abort$/;"	f
s:RunFinished	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunFinished(state, ...) abort$/;"	f
s:RunReceive	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunReceive(state, tmp, type, job, data, ...) abort$/;"	f
s:RunRustfmt	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^function! s:RunRustfmt(command, tmpname, from_writepre)$/;"	f
s:RunSave	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunSave(state) abort$/;"	f
s:RunSend	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunSend(job, str) abort$/;"	f
s:RunTick	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunTick(job) abort$/;"	f
s:RunWait	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunWait(state, tmp, job, ...) abort$/;"	f
s:RustfmtCommand	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^function! s:RustfmtCommand()$/;"	f
s:RustfmtCommandRange	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^function! s:RustfmtCommandRange(filename, line1, line2)$/;"	f
s:RustfmtConfigOptions	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^function! s:RustfmtConfigOptions()$/;"	f
s:RustfmtWriteMode	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^function! s:RustfmtWriteMode()$/;"	f
s:SameRepo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SameRepo(one, two) abort$/;"	f
s:SanitizeRHelpLine	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rhelp.vim	/^function s:SanitizeRHelpLine(line)$/;"	f
s:SearchLoop	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:SearchLoop(pat,flags,expr)$/;"	f
s:SearchTestFunctionNameUnderCursor	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! s:SearchTestFunctionNameUnderCursor() abort$/;"	f
s:SelectJavascript	plugged/splitjoin.vim/spec/support/vim-javascript/ftdetect/javascript.vim	/^fun! s:SelectJavascript()$/;"	f
s:Selection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Selection(arg1, ...) abort$/;"	f
s:SetIfUndef	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:SetIfUndef(name, value) abort " {{{1$/;"	f
s:SetIfUndef	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:SetIfUndef(name, value) abort " {{{1$/;"	f
s:SetIfUndef	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:SetIfUndef(name, value) abort " {{{1$/;"	f
s:SetIfUndef	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:SetIfUndef(name, value) abort " {{{1$/;"	f
s:SetIndent	plugged/splitjoin.vim/autoload/sj/haml.vim	/^function! s:SetIndent(from, to, indent)$/;"	f
s:SetIndentWhitespace	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:SetIndentWhitespace(line_no, whitespace)$/;"	f
s:SetLines	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! s:SetLines(start, len, strings)$/;"	f
s:ShellTokenize	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! s:ShellTokenize(text)$/;"	f
s:SkipFunc	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:SkipFunc()$/;"	f
s:SkipSyntax	plugged/splitjoin.vim/autoload/sj/elm.vim	/^function! s:SkipSyntax()$/;"	f
s:SkipWhitespaceUntilComma	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:SkipWhitespaceUntilComma(str)$/;"	f
s:Slash	plugged/vim-fugitive/autoload/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
s:Slash	plugged/vim-fugitive/plugin/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
s:Split	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! s:Split(pattern, replacement_pattern)$/;"	f
s:SplitArrayBody	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:SplitArrayBody(body)$/;"	f
s:SplitCommands	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^function! s:SplitCommands(string)$/;"	f
s:SplitDelim	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! s:SplitDelim(string, delim)$/;"	f
s:SplitDelimTest	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! s:SplitDelimTest(string, delim, expected)$/;"	f
s:SplitExpandChain	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SplitExpandChain(string, ...) abort$/;"	f
s:SplitKeyValue	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:SplitKeyValue(line)$/;"	f
s:SplitList	plugged/splitjoin.vim/autoload/sj/cue.vim	/^function! s:SplitList(delimiter, cursor_position)$/;"	f
s:SplitList	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! s:SplitList(delimiter, cursor_position)$/;"	f
s:SplitList	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! s:SplitList(start_char, end_char)$/;"	f
s:SplitList	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! s:SplitList(regex, opening_char, closing_char)$/;"	f
s:SplitList	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! s:SplitList(delimiter, cursor_position)$/;"	f
s:SplitNextArrow	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! s:SplitNextArrow()$/;"	f
s:SplitParts	plugged/splitjoin.vim/autoload/sj/elm.vim	/^function! s:SplitParts(from, to)$/;"	f
s:SquashArgument	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SquashArgument(...) abort$/;"	f
s:SshParseConfig	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SshParseConfig(into, root, file) abort$/;"	f
s:SshParseHost	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SshParseHost(value) abort$/;"	f
s:StageApply	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageApply(info, reverse, extra) abort$/;"	f
s:StageArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageArgs(visual) abort$/;"	f
s:StageDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDelete(lnum1, lnum2, count) abort$/;"	f
s:StageDiff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
s:StageDiffEdit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
s:StageIgnore	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageIgnore(lnum1, lnum2, count) abort$/;"	f
s:StageInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInfo(...) abort$/;"	f
s:StageInline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInline(mode, ...) abort$/;"	f
s:StageInlineGetDiff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInlineGetDiff(diff_section, info) abort$/;"	f
s:StageJump	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageJump(offset, section, ...) abort$/;"	f
s:StagePatch	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StagePatch(lnum1, lnum2, ...) abort$/;"	f
s:StageReveal	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageReveal() abort$/;"	f
s:StageSeek	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageSeek(info, fallback) abort$/;"	f
s:StatusCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCfile(...) abort$/;"	f
s:StatusCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCommand(line1, line2, range, count, bang, mods, reg, arg, args, ...) abort$/;"	f
s:StatusProcess	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusProcess(result, stat) abort$/;"	f
s:StatusRender	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusRender(stat) abort$/;"	f
s:StatusRetrieve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusRetrieve(bufnr, ...) abort$/;"	f
s:StatusSectionFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusSectionFile(heading, filename) abort$/;"	f
s:StdoutToFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StdoutToFile(out, cmd, ...) abort$/;"	f
s:StripComment	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:StripComment(s)$/;"	f
s:StripCurlyBrackets	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! s:StripCurlyBrackets(item)$/;"	f
s:StripLeadingSpaces	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! s:StripLeadingSpaces(string)$/;"	f
s:StripTrailingSpaces	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! s:StripTrailingSpaces(string)$/;"	f
s:Strlen	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^  function! s:Strlen(string)$/;"	f
s:Strlen	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^  let s:Strlen = function("strdisplaywidth")$/;"	v
s:SubComplete	plugged/vim-abolish/plugin/abolish.vim	/^function! s:SubComplete(A,L,P)$/;"	f
s:SynAt	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:SynAt(l,c)$/;"	f
s:SystemError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SystemError(cmd, ...) abort$/;"	f
s:SystemList	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SystemList(cmd) abort$/;"	f
s:TYPE	autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TYPE	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'bool': type(0), 'dict': type({}), 'funcref': type(function('call')), 'string': ty/;"	v
s:TYPE	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TYPE	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:TYPE = {$/;"	v
s:TabularCommands	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^let s:TabularCommands = {}$/;"	v
s:Tabularize	plugged/splitjoin.vim/autoload/sj.vim	/^function! s:Tabularize(from, to, type)$/;"	f
s:TeXIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rnoweb.vim	/^  let s:TeXIndent = function("s:NoTeXIndent")$/;"	v
s:TeXIndent	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rnoweb.vim	/^  let s:TeXIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:TempDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempDelete(file) abort$/;"	f
s:TempDotMap	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempDotMap() abort$/;"	f
s:TempReadPost	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPost(file) abort$/;"	f
s:TempReadPre	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPre(file) abort$/;"	f
s:TempScript	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempScript(...) abort$/;"	f
s:TempState	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempState(...) abort$/;"	f
s:Token	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^function s:Token()$/;"	f
s:ToolItems	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolItems(state, from, to, offsets, text, ...) abort$/;"	f
s:ToolParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolParse(state, line) abort$/;"	f
s:ToolStream	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolStream(line1, line2, range, bang, mods, options, args, state) abort$/;"	f
s:ToolToFrom	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolToFrom(str) abort$/;"	f
s:Tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Tree(...) abort$/;"	f
s:Tree	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Tree(path) abort$/;"	f
s:TreeChomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeChomp(...) abort$/;"	f
s:TreeInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeInfo(dir, commit) abort$/;"	f
s:UltiSnippetTextObj	plugged/ultisnips/ftplugin/snippets.vim	/^fun! s:UltiSnippetTextObj(inner) abort$/;"	f
s:UndefinedClosingLine	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:UndefinedClosingLine(lines, folds) abort dict "{{{1$/;"	f
s:UndefinedClosingLine	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:UndefinedClosingLine(lines, folds) abort dict "{{{1$/;"	f
s:UndefinedClosingLine	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:UndefinedClosingLine(lines, folds) abort dict "{{{1$/;"	f
s:UndefinedClosingLine	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^function! s:UndefinedClosingLine(lines, folds) abort dict "{{{1$/;"	f
s:Uniq	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Uniq(list) abort$/;"	f
s:UpdateIndex	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UpdateIndex(dir, info) abort$/;"	f
s:UrlEncode	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UrlEncode(str) abort$/;"	f
s:UrlParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UrlParse(url) abort$/;"	f
s:UrlPopulate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UrlPopulate(string, into) abort$/;"	f
s:UsableWin	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UsableWin(nr) abort$/;"	f
s:UserCommandCwd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandCwd(dir) abort$/;"	f
s:UserCommandList	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandList(...) abort$/;"	f
s:V1	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:V1 = [ s:visual_side_fg[0] , s:visual_side_bg[0] , s:visual_side_fg[1] , s:visual_side_bg[/;"	v
s:V2	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:V2 = [ s:visual_sub_fg[0] , s:visual_sub_bg[0] , s:visual_sub_fg[1] , s:visual_sub_bg[1] ]$/;"	v
s:V3	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:V3 = [ s:visual_mid_fg[0] , s:visual_mid_bg[0] , s:visual_mid_fg[1] , s:visual_mid_bg[1] ]$/;"	v
s:VersionCheck	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:VersionCheck() abort$/;"	f
s:VimExecPath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:VimExecPath() abort$/;"	f
s:VimSlash	plugged/vim-fugitive/autoload/fugitive.vim	/^  function! s:VimSlash(path) abort$/;"	f
s:VimSlash	plugged/vim-fugitive/plugin/fugitive.vim	/^  function! s:VimSlash(path) abort$/;"	f
s:WinShellEsc	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:WinShellEsc(arg) abort$/;"	f
s:WithPath	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! s:WithPath(func, ...)$/;"	f
s:_ends_with	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:_ends_with(text, expr, lnum)$/;"	f
s:_handleOldOptions	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
s:_show_lint_message	plugged/validator.vim/autoload/validator.vim	/^function! s:_show_lint_message()$/;"	f
s:_starts_with	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:_starts_with(text, expr, lnum)$/;"	f
s:abbreviate_from_dict	plugged/vim-abolish/plugin/abolish.vim	/^function! s:abbreviate_from_dict(cmd,dict)$/;"	f
s:absolutes	plugged/vim-vinegar/plugin/vinegar.vim	/^function! s:absolutes(first, ...) abort$/;"	f
s:accents	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:accents = s:palette.statusline3$/;"	v
s:acquire_theme_data	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:acquire_theme_data()$/;"	f
s:action	plugged/completor.vim/autoload/completor/action.vim	/^let s:action = ''$/;"	v
s:action_for	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
s:add_db	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
s:add_methods	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
s:add_task	plugged/validator.vim/autoload/validator.vim	/^function! s:add_task(event)$/;"	f
s:added_db_files	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:added_dbs	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^let s:added_dbs = []$/;"	v
s:added_dbs	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:added_dbs = []$/;"	v
s:addr_other	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_other = has('patch-8.1.560') || has('nvim-0.5.0') ? '-addr=other' : ''$/;"	v
s:addr_tabs	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''$/;"	v
s:addr_wins	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''$/;"	v
s:ag_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(name, lines)$/;"	f
s:ag_to_qf	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line)$/;"	f
s:align_lists	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
s:align_pairs	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
s:ansi	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
s:ansi	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cya/;"	v
s:append_ul	autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:append_ul	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:append_ul	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:append_ul(lnum, text)$/;"	f
s:apply_prop	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:apply_prop(words)$/;"	f
s:apply_syntax_highlightings	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:apply_syntax_highlightings()$/;"	f
s:ask	autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:ask(message, ...)$/;"	f
s:ask_no_interrupt	autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:ask_no_interrupt	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:ask_no_interrupt	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:ask_no_interrupt(...)$/;"	f
s:assign_name	autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assign_name	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assign_name	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:assign_name()$/;"	f
s:assoc	autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:assoc	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:assoc	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:assoc(dict, key, val)$/;"	f
s:atom_or_module_pattern	plugged/splitjoin.vim/autoload/sj/elixir.vim	/^let s:atom_or_module_pattern = '\\%(' . s:atom_pattern . '\\.\\|' . s:module_pattern . '\\.\\)\\/;"	v
s:atom_pattern	plugged/splitjoin.vim/autoload/sj/elixir.vim	/^let s:atom_pattern = ':\\k\\+'$/;"	v
s:background	plugged/seoul256.vim/colors/seoul256.vim	/^let s:background  = &background$/;"	v
s:backup	plugged/seoul256.vim/colors/seoul256-light.vim	/^      let s:backup = g:seoul256_background$/;"	v
s:bad_git_dir	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:bad_git_dir = '\/$\\|^fugitive:'$/;"	v
s:badgood	plugged/vim-abolish/plugin/abolish.vim	/^function! s:badgood(args)$/;"	f
s:bang	autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bang	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bang	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:bang(cmd, ...)$/;"	f
s:bang_edits	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:bang_edits = {'split': 'Git', 'vsplit': 'vertical Git', 'tabedit': 'tab Git', 'pedit': 'Gi/;"	v
s:bar	autoload/plug.vim	/^function! s:bar()$/;"	f
s:bar	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:bar()$/;"	f
s:bar	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:bar()$/;"	f
s:base_dir	plugged/fzf/plugin/fzf.vim	/^  let s:base_dir = expand('<sfile>:h:h')$/;"	v
s:base_spec	autoload/plug.vim	/^let s:base_spec = { 'branch': '', 'frozen': 0 }$/;"	v
s:base_spec	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:base_spec	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:base_spec = { 'branch': 'master', 'frozen': 0 }$/;"	v
s:bash	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bash()$/;"	f
s:batchfile	autoload/plug.vim	/^  function! s:batchfile(cmd)$/;"	f
s:beep	plugged/vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
s:bin	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:bin_dir	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:p:h:h:h').'\/bin\/'$/;"	v
s:blank_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:blank_pattern = '^\\s*$'$/;"	v
s:blank_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:blank_pattern = '^\\s*$'$/;"	v
s:blank_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:blank_pattern = '^\\s*$'$/;"	v
s:blank_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:blank_pattern = '^\\s*$'$/;"	v
s:blobdirs	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:blobdirs = {}$/;"	v
s:block_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:block_pattern = join([s:class_pattern, s:function_pattern], '\\|')$/;"	v
s:block_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:block_pattern = join([s:class_pattern, s:function_pattern], '\\|')$/;"	v
s:block_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:block_pattern = join([s:class_pattern, s:function_pattern], '\\|')$/;"	v
s:block_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:block_pattern = join([s:class_pattern, s:function_pattern], '\\|')$/;"	v
s:border_opt	plugged/fzf/plugin/fzf.vim	/^function! s:border_opt(window)$/;"	f
s:browsefilter	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','',''/;"	v
s:browsefilter	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:btags_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
s:btags_source	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
s:buffer_line_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
s:buffer_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines(query)$/;"	f
s:buflisted	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
s:bufopen	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
s:bvars	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^let s:bvars = {$/;"	v
s:c	plugged/vim-abolish/plugin/abolish.vim	/^function! s:c()$/;"	f
s:cache_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
s:calc_size	plugged/fzf/plugin/fzf.vim	/^function! s:calc_size(max, val, dict)$/;"	f
s:call_signatures	plugged/completor.vim/autoload/completor/action.vim	/^function! s:call_signatures(items)$/;"	f
s:callback	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:callback(word)$/;"	f
s:callback	plugged/fzf/plugin/fzf.vim	/^function! s:callback(dict, lines) abort$/;"	f
s:camelcase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:camelcase(word)$/;"	f
s:can_diffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
s:cfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cfile() abort$/;"	f
s:changes_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:changes_sink(lines)$/;"	f
s:changesurround	plugged/vim-surround/plugin/surround.vim	/^function! s:changesurround(...) " {{{1$/;"	f
s:check	plugged/validator.vim/autoload/validator.vim	/^function! s:check(instant)$/;"	f
s:check_requirements	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:check_requirements()$/;"	f
s:check_ruby	autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:check_ruby	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:check_ruby	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:check_ruby()$/;"	f
s:check_status	plugged/completor.vim/autoload/completor/daemon.vim	/^function! s:check_status()$/;"	f
s:checked	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:checked = 0$/;"	v
s:checked	plugged/fzf/plugin/fzf.vim	/^let s:checked = {}$/;"	v
s:checked_ctags	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust/tags.vim	/^let s:checked_ctags = 0$/;"	v
s:checkout	autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:checkout	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:checkout	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:checkout(spec)$/;"	f
s:chomp	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
s:chsh	autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:chsh	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:chsh	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:chsh(swap)$/;"	f
s:class_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:class_pattern = '^\\s*class\\s'$/;"	v
s:class_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:class_pattern = '^\\s*class\\s'$/;"	v
s:class_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:class_pattern = '^\\s*class\\s'$/;"	v
s:class_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:class_pattern = '^\\s*class\\s'$/;"	v
s:clean	autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:clean	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:clean	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:clean(force)$/;"	f
s:clear	plugged/validator.vim/autoload/validator.vim	/^function! s:clear(nr)$/;"	f
s:clear	plugged/validator.vim/autoload/validator/notifier.vim	/^function! s:clear(bufnr, ids)$/;"	f
s:clear_inputted	plugged/completor.vim/autoload/completor.vim	/^function! s:clear_inputted()$/;"	f
s:close_pane	autoload/plug.vim	/^function! s:close_pane()$/;"	f
s:closematch	plugged/vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
s:cmd	plugged/fzf/plugin/fzf.vim	/^function! s:cmd(bang, ...) abort$/;"	f
s:cmd	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/ecto.vim	/^let s:cmd = join(['mix', 'run', '--no-start', '--no-compile', shellescape(s:path.'\/get_repos.ex/;"	v
s:cmd_history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
s:coerce	plugged/vim-abolish/plugin/abolish.vim	/^function! s:coerce(type) abort$/;"	f
s:collect	plugged/fzf/plugin/fzf.vim	/^function! s:collect(temps) abort$/;"	f
s:colors_name	plugged/seoul256.vim/colors/seoul256.vim	/^let s:colors_name = get(g:, 'colors_name', '')$/;"	v
s:colour	plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:colour(r, g, b)$/;"	f
s:command_l1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_l1_bg = s:palette.aqua$/;"	v
s:command_l1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_l1_fg = s:palette.bg0$/;"	v
s:command_l2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_l2_bg = s:palette.bg3$/;"	v
s:command_l2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_l2_fg = s:palette.grey2$/;"	v
s:command_middle_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_middle_bg = s:palette.bg1$/;"	v
s:command_middle_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_middle_fg = s:palette.grey1$/;"	v
s:command_r1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_r1_bg = s:palette.aqua$/;"	v
s:command_r1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_r1_fg = s:palette.bg0$/;"	v
s:command_r2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_r2_bg = s:palette.bg3$/;"	v
s:command_r2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:command_r2_fg = s:palette.grey2$/;"	v
s:command_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
s:commandline_mid_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_mid_bg = s:palette.bg1$/;"	v
s:commandline_mid_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_mid_fg = s:palette.grey1$/;"	v
s:commandline_mod_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_mod_bg = s:palette.bg1$/;"	v
s:commandline_mod_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_mod_fg = s:palette.aqua$/;"	v
s:commandline_side_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_side_bg = s:palette.aqua$/;"	v
s:commandline_side_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_side_fg = s:palette.bg0$/;"	v
s:commandline_sub_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_sub_bg = s:palette.bg3$/;"	v
s:commandline_sub_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:commandline_sub_fg = s:palette.grey2$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands = {}$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.abbrev     = s:commands.abstract.clone()$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.abbrev.options = {"buffer":0,"cmdline":0,"delete":0}$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.abstract = s:object.clone()$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.delete   = s:commands.abbrev.clone()$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.delete.options.delete = 1$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.search = s:commands.abstract.clone()$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.search.options = {"word": 0, "variable": 0, "flags": ""}$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.substitute = s:commands.abstract.clone()$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.substitute.options = {"word": 0, "variable": 0, "flags": "g"}$/;"	v
s:commands.abbrev.process	plugged/vim-abolish/plugin/abolish.vim	/^function! s:commands.abbrev.process(bang,line1,line2,count,args)$/;"	f
s:commands.abstract.dispatch	plugged/vim-abolish/plugin/abolish.vim	/^function! s:commands.abstract.dispatch(bang,line1,line2,count,args)$/;"	f
s:commands.abstract.go	plugged/vim-abolish/plugin/abolish.vim	/^function! s:commands.abstract.go(bang,line1,line2,count,args)$/;"	f
s:commands.search.process	plugged/vim-abolish/plugin/abolish.vim	/^function! s:commands.search.process(bang,line1,line2,count,args)$/;"	f
s:commands.substitute.process	plugged/vim-abolish/plugin/abolish.vim	/^function! s:commands.substitute.process(bang,line1,line2,count,args)$/;"	f
s:comment_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:comment_pattern = '^\\s*#'$/;"	v
s:comment_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:comment_pattern = '^\\s*#'$/;"	v
s:comment_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:comment_pattern = '^\\s*#'$/;"	v
s:comment_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:comment_pattern = '^\\s*#'$/;"	v
s:commit_expand	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:commit_expand = '!\\\\\\@!#\\=\\d*\\|!%'$/;"	v
s:commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(range, buffer_local, args)$/;"	f
s:commits_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
s:common_sink	plugged/fzf/plugin/fzf.vim	/^function! s:common_sink(action, lines) abort$/;"	f
s:commondirs	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:commondirs = {}$/;"	v
s:compare_binary_versions	plugged/fzf/plugin/fzf.vim	/^function! s:compare_binary_versions(a, b)$/;"	f
s:compare_git_uri	autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:compare_git_uri	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:compare_git_uri	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:compare_git_uri(a, b)$/;"	f
s:compare_versions	plugged/fzf/plugin/fzf.vim	/^function! s:compare_versions(a, b)$/;"	f
s:compensate_for_pum	plugged/ultisnips/autoload/UltiSnips.vim	/^function! s:compensate_for_pum() abort$/;"	f
s:complete_insert	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
s:complete_trigger	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
s:completions	plugged/completor.vim/autoload/completor/action.vim	/^let s:completions = []$/;"	v
s:conf	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:conf(name, default)$/;"	f
s:conf	plugged/fzf.vim/plugin/fzf.vim	/^function! s:conf(name, default)$/;"	f
s:config	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:config = {}$/;"	v
s:config_Get	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:config_Get(name, ...) dict abort$/;"	f
s:config_GetAll	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:config_GetAll(name) dict abort$/;"	f
s:config_GetRegexp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:config_GetRegexp(pattern) dict abort$/;"	f
s:config_prototype	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:config_prototype = {}$/;"	v
s:configuration	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:configuration = everforest#get_configuration()$/;"	v
s:configuration	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:configuration = everforest#get_configuration()$/;"	v
s:configuration	plugged/everforest/colors/everforest.vim	/^let s:configuration = everforest#get_configuration()$/;"	v
s:continuation	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^let s:continuation = get(g:,'javascript_continuation',$/;"	v
s:convert_colors	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:convert_colors()$/;"	f
s:cpath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cpath(path, ...) abort$/;"	f
s:cpo_save	autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/r.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rhelp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rnoweb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/R-Vim-runtime/ftplugin/rrst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/r.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/R-Vim-runtime/indent/rmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/vim-elixir/compiler/exunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/vim-elixir/indent/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/elixir.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:cpo_save = &cpo$/;"	v
s:create_color_variables	plugged/papercolor-theme/colors/PaperColor.vim	/^    fun! s:create_color_variables(color_name, rich_color, term_color)$/;"	f
s:create_dictionary	plugged/vim-abolish/plugin/abolish.vim	/^function! s:create_dictionary(lhs,rhs,opts)$/;"	f
s:create_popup	plugged/fzf/plugin/fzf.vim	/^  function s:create_popup(opts) abort$/;"	f
s:create_popup	plugged/fzf/plugin/fzf.vim	/^  function! s:create_popup(opts) abort$/;"	f
s:csi	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
s:ctags_is_uctags	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust/tags.vim	/^let s:ctags_is_uctags = 0$/;"	v
s:current_completions	plugged/completor.vim/autoload/completor/popup.vim	/^let s:current_completions = #{$/;"	v
s:cursor_move_timer	plugged/validator.vim/autoload/validator.vim	/^let s:cursor_move_timer = -1$/;"	v
s:custom_bg	plugged/seoul256.vim/colors/seoul256-light.vim	/^let s:custom_bg = get(g:, 'seoul256_light_background', get(g:, 'seoul256_background', 253))$/;"	v
s:daemon	plugged/completor.vim/autoload/completor/daemon.vim	/^let s:daemon = {'msgs': [], 'requested': v:false, 't': 0}$/;"	v
s:daemon.kill	plugged/completor.vim/autoload/completor/daemon.vim	/^function s:daemon.kill()$/;"	f
s:daemon.respawn	plugged/completor.vim/autoload/completor/daemon.vim	/^function! s:daemon.respawn(cmd, name, options)$/;"	f
s:daemon.status	plugged/completor.vim/autoload/completor/daemon.vim	/^function! s:daemon.status(name)$/;"	f
s:daemon.write	plugged/completor.vim/autoload/completor/daemon.vim	/^  function! s:daemon.write(data)$/;"	f
s:dark_bg	plugged/seoul256.vim/colors/seoul256.vim	/^  let s:dark_bg  = 237$/;"	v
s:dark_bg	plugged/seoul256.vim/colors/seoul256.vim	/^  let s:dark_bg  = get(s:, 'seoul256_background', 237)$/;"	v
s:dark_bg_2	plugged/seoul256.vim/colors/seoul256.vim	/^let s:dark_bg_2 = s:dark_bg > 233 ? s:dark_bg - 2 : 16$/;"	v
s:dark_fg	plugged/seoul256.vim/colors/seoul256.vim	/^let s:dark_fg = 252$/;"	v
s:dashcase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:dashcase(word)$/;"	f
s:data_struct_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:data_struct_pattern = '\\v(\\{|\\[|\\()\\s*$'$/;"	v
s:data_struct_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:data_struct_pattern = '\\v(\\{|\\[|\\()\\s*$'$/;"	v
s:data_struct_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:data_struct_pattern = '\\v(\\{|\\[|\\()\\s*$'$/;"	v
s:data_struct_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:data_struct_pattern = '\\v(\\{|\\[|\\()\\s*$'$/;"	v
s:debug	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:debug(str)$/;"	f
s:decorator_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:decorator_pattern = '^\\s*@'$/;"	v
s:decorator_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:decorator_pattern = '^\\s*@'$/;"	v
s:decorator_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:decorator_pattern = '^\\s*@'$/;"	v
s:decorator_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:decorator_pattern = '^\\s*@'$/;"	v
s:default_action	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
s:default_action	plugged/fzf/plugin/fzf.vim	/^let s:default_action = {$/;"	v
s:default_blacklist	plugged/completor.vim/plugin/completor.vim	/^let s:default_blacklist = ['tagbar', 'qf', 'netrw', 'unite', 'vimwiki']$/;"	v
s:default_layout	plugged/fzf/plugin/fzf.vim	/^function! s:default_layout()$/;"	f
s:default_register	plugged/vim-repeat/autoload/repeat.vim	/^function! s:default_register()$/;"	f
s:default_type_map	plugged/completor.vim/plugin/completor.vim	/^let s:default_type_map = {$/;"	v
s:defaults	plugged/fzf/plugin/fzf.vim	/^function! s:defaults()$/;"	f
s:define_commands	autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:define_commands	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:define_commands	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:define_commands()$/;"	f
s:define_sign	plugged/validator.vim/autoload/validator.vim	/^function! s:define_sign(type, symbol)$/;"	f
s:define_syntax	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:define_syntax()$/;"	f
s:defs	plugged/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
s:delete	autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:delete	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:delete	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:delete(range, force)$/;"	f
s:delete_op	autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:delete_op	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:delete_op	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:delete_op(type, ...)$/;"	f
s:delimitMate_extra_excluded_regions	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust/delimitmate.vim	/^let s:delimitMate_extra_excluded_regions = ',rustLifetimeCandidate,rustGenericLifetimeCandidate'$/;"	v
s:did_check_exe	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:diff	autoload/plug.vim	/^function! s:diff()$/;"	f
s:diff	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:diff()$/;"	f
s:diff	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:diff()$/;"	f
s:diff_header_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:diff_header_pattern = '^diff --git \\%("\\=[abciow12]\/.*\\|\/dev\/null\\) \\%("\\=[abciow/;"	v
s:diff_window_count	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
s:diffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff() abort$/;"	f
s:diffoff_all	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
s:diffthis	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffthis() abort$/;"	f
s:dir_commit_file	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:dir_commit_file = '\\c^fugitive:\/\/\\%(\/[^\/]\\@=\\)\\=\\([^?#]\\{-1,\\}\\)\/\/\\%(\\(/;"	v
s:dir_commit_file	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:dir_commit_file = '\\c^fugitive:\/\/\\([^?#]\\{-\\}\\)\/\/\\%(\\(\\x\\{40,\\}\\|[0-3]\\)/;"	v
s:dir_for_worktree	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
s:dirpath	autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:dirpath	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:dirpath	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  function! s:dirpath(path)$/;"	f
s:disable_colors	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:disable_colors = []$/;"	v
s:disable_hide	plugged/completor.vim/autoload/completor/popup.vim	/^let s:disable_hide = v:false$/;"	v
s:dispatcher	plugged/vim-abolish/plugin/abolish.vim	/^function! s:dispatcher(bang,line1,line2,count,args)$/;"	f
s:do	autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:do	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:do	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:do(pull, force, todo)$/;"	f
s:do_action	plugged/completor.vim/autoload/completor.vim	/^func s:do_action(action, meta, status, args)$/;"	f
s:do_check	plugged/validator.vim/autoload/validator.vim	/^function! s:do_check()$/;"	f
s:do_handle_pattern_match_block	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:do_handle_pattern_match_block(relative_line, context)$/;"	f
s:doautocmd	autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:doautocmd	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:doautocmd	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:doautocmd(...)$/;"	f
s:dobufread	autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:dobufread	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:dobufread	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:dobufread(names)$/;"	f
s:docstring_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:docstring_pattern = '^\\s*' . s:multiline_string_start_pattern$/;"	v
s:docstring_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:docstring_pattern = '^\\s*' . s:multiline_string_start_pattern$/;"	v
s:docstring_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:docstring_pattern = '^\\s*' . s:multiline_string_start_pattern$/;"	v
s:docstring_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:docstring_pattern = '^\\s*' . s:multiline_string_start_pattern$/;"	v
s:dopopd	plugged/fzf/plugin/fzf.vim	/^function! s:dopopd()$/;"	f
s:dosurround	plugged/vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
s:dotcase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:dotcase(word)$/;"	f
s:dotfiles	plugged/vim-vinegar/plugin/vinegar.vim	/^let s:dotfiles = '\\(^\\|\\s\\s\\)\\zs\\.\\S\\+'$/;"	v
s:edit_jobs	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:edit_jobs = {}$/;"	v
s:egrep_pattern	plugged/vim-abolish/plugin/abolish.vim	/^function! s:egrep_pattern(dict,boundaries)$/;"	f
s:enc_to_cp	plugged/fzf/plugin/fzf.vim	/^  function! s:enc_to_cp(str)$/;"	f
s:eol_pattern	plugged/splitjoin.vim/autoload/sj/rust.vim	/^let s:eol_pattern = '\\s*\\%(\/\/.*\\)\\=$'$/;"	v
s:err	autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:err	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:err	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:err(msg)$/;"	f
s:error	plugged/fzf/plugin/fzf.vim	/^function! s:error(msg)$/;"	f
s:error_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:error_bg = s:palette.statusline3$/;"	v
s:error_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:error_fg = s:palette.bg0$/;"	v
s:errorbg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:errorbg = s:palette.statusline3$/;"	v
s:errorfg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:errorfg = s:palette.bg0$/;"	v
s:esc	autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:esc	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:esc	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:esc(path)$/;"	f
s:escape	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
s:escape	plugged/fzf/plugin/fzf.vim	/^function! s:escape(path)$/;"	f
s:escape	plugged/vim-vinegar/plugin/vinegar.vim	/^let s:escape = 'substitute(escape(v:val, ".$~"), "*", ".*", "g")'$/;"	v
s:escape_for_bash	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape_for_bash(path)$/;"	f
s:escaped	plugged/vim-vinegar/plugin/vinegar.vim	/^function! s:escaped(first, last) abort$/;"	f
s:escrtp	autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:escrtp	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:escrtp	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:escrtp(path)$/;"	f
s:eval	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
s:evaluate_opts	plugged/fzf/plugin/fzf.vim	/^function! s:evaluate_opts(options)$/;"	f
s:events	plugged/validator.vim/autoload/validator.vim	/^let s:events = {}$/;"	v
s:excmds	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
s:exec_paths	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:exec_paths = {}$/;"	v
s:executable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:executable(binary) abort$/;"	f
s:executables	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:executables = {}$/;"	v
s:execute	plugged/fzf/plugin/fzf.vim	/^function! s:execute(dict, command, use_height, temps) abort$/;"	f
s:execute_silent	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:execute_silent(cmd)$/;"	f
s:execute_term	plugged/fzf/plugin/fzf.vim	/^function! s:execute_term(dict, command, temps) abort$/;"	f
s:execute_tmux	plugged/fzf/plugin/fzf.vim	/^function! s:execute_tmux(dict, command, temps) abort$/;"	f
s:exit_handler	plugged/fzf/plugin/fzf.vim	/^function! s:exit_handler(code, command, ...)$/;"	f
s:expand	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:expand = '\\%(\\(' . s:var . '\\)\\(' . s:flag . '*\\)\\(:S\\)\\=\\)'$/;"	v
s:expand_braces	plugged/vim-abolish/plugin/abolish.vim	/^function! s:expand_braces(dict)$/;"	f
s:extend	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
s:extend_opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
s:extract_name	autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:extract_name	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:extract_name	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:extract_name(str, prefix, suffix)$/;"	f
s:extract_option	plugged/fzf/plugin/fzf.vim	/^function! s:extract_option(opts, name)$/;"	f
s:extractafter	plugged/vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
s:extractbefore	plugged/vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
s:extractopts	plugged/vim-abolish/plugin/abolish.vim	/^function! s:extractopts(list,opts)$/;"	f
s:ff	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/r.vim	/^  let s:ff = split(substitute(globpath(&rtp, "R\/functions.vim"), "functions.vim", "", "g"), "\\/;"	v
s:file_commit_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_commit_pattern = s:file_pattern . '\\|^\\%(\\l\\{3,\\} \\)\\=[0-9a-f]\\{4,\\} '$/;"	v
s:file_options	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
s:file_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_pattern = '^[A-Z?] .\\|^diff --'$/;"	v
s:file_source	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
s:file_split_prefix	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
s:fill_quickfix	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fill_quickfix(name, list)$/;"	f
s:filter	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:filter(id, key)$/;"	f
s:find_command	plugged/vim-abolish/plugin/abolish.vim	/^function! s:find_command(cmd,flags,word)$/;"	f
s:find_last_pos	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:find_last_pos(lnum, text, match)$/;"	f
s:find_name	autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:find_name	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:find_name	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:find_name(lnum)$/;"	f
s:find_open_window	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
s:finish	autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:finish(pull)$/;"	f
s:finish_bindings	autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:finish_bindings	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:finish_bindings	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:finish_bindings()$/;"	f
s:first_line	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
s:fixindent	plugged/vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
s:flag	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:flag = '\\%(:[p8~.htre]\\|:g\\=s\\(.\\).\\{-\\}\\1.\\{-\\}\\1\\)'$/;"	v
s:fmt_excmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:fmt_excmd = '   '.s:blue('%-38s', 'Statement').'%s'$/;"	v
s:fname_prefix	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
s:fnameescape	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:fnameescape = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
s:fnameescape	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:fnameescape = " \\t\\n*?`%#'\\"|!<"$/;"	v
s:fnameescape	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
s:fnameescape	plugged/vim-vinegar/plugin/vinegar.vim	/^function! s:fnameescape(file) abort$/;"	f
s:format	plugged/completor.vim/autoload/completor/action.vim	/^function! s:format(items)$/;"	f
s:format	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:format(v, max_length)$/;"	f
s:format_change	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_change(bufnr, offset, item)$/;"	f
s:format_change_offset	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_change_offset(current, index, cursor)$/;"	f
s:format_cmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
s:format_excmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
s:format_git_log	autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_git_log	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_git_log	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:format_git_log(line)$/;"	f
s:format_items	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:format_items(words)$/;"	f
s:format_mark	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
s:format_message	autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:format_message	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:format_message	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:format_message(bullet, name, message)$/;"	f
s:format_win	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
s:formatelempat	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^let s:formatelempat = '\\%([lrc]\\d\\+\\)'$/;"	v
s:freezed_status	plugged/completor.vim/autoload/completor/action.vim	/^let s:freezed_status = {'pos': [], 'nr': -1, 'ft': '', 'mode': ''}$/;"	v
s:ft	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^    let s:ft = s:type$/;"	v
s:ft	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^    let s:ft = substitute(s:type, '.*=', '', '')$/;"	v
s:function	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
s:function	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
s:function	plugged/vim-abolish/plugin/abolish.vim	/^function! s:function(name) abort$/;"	f
s:function	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:function(name) abort$/;"	f
s:function_pattern	plugged/splitjoin.vim/autoload/sj/elixir.vim	/^let s:function_pattern = '\\k\\+[?!]\\='$/;"	v
s:function_pattern	plugged/splitjoin.vim/autoload/sj/lua.vim	/^let s:function_pattern = '\\(\\<function\\>.\\{-}(.\\{-})\\)\\(.*\\)\\<end\\>'$/;"	v
s:function_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:function_pattern = '^\\s*\\(\\(async\\s\\+\\)\\?def\\s\\|if __name__\\s==\\)'$/;"	v
s:function_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:function_pattern = '^\\s*\\(\\(async\\s\\+\\)\\?def\\s\\|if __name__\\s==\\)'$/;"	v
s:function_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:function_pattern = '^\\s*\\(\\(async\\s\\+\\)\\?def\\s\\|if __name__\\s==\\)'$/;"	v
s:function_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:function_pattern = '^\\s*\\(\\(async\\s\\+\\)\\?def\\s\\|if __name__\\s==\\)'$/;"	v
s:fzf	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
s:fzf_call	plugged/fzf/plugin/fzf.vim	/^  function! s:fzf_call(fn, ...)$/;"	f
s:fzf_expand	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_expand(fmt)$/;"	f
s:fzf_fnamemodify	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_fnamemodify(fname, mods)$/;"	f
s:fzf_getcwd	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_getcwd()$/;"	f
s:fzf_go	plugged/fzf/plugin/fzf.vim	/^let s:fzf_go = s:base_dir.'\/bin\/fzf'$/;"	v
s:fzf_restore_colors	plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
s:fzf_tempname	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_tempname()$/;"	f
s:fzf_tmux	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_tmux(dict)$/;"	f
s:fzf_tmux	plugged/fzf/plugin/fzf.vim	/^let s:fzf_tmux = s:base_dir.'\/bin\/fzf-tmux'$/;"	v
s:fzf_vim_term	plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
s:gen_handler	plugged/validator.vim/autoload/validator.vim	/^function! s:gen_handler(ft, nr, checker)$/;"	f
s:gen_select_item	plugged/completor.vim/autoload/completor/popup.vim	/^func s:gen_select_item(i, v, size)$/;"	f
s:generate_language_option_variables	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:generate_language_option_variables()$/;"	f
s:generate_theme_option_variables	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:generate_theme_option_variables()$/;"	f
s:generate_wildignore_options	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
s:get_base_indent	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:get_base_indent(lnum, text)$/;"	f
s:get_color	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_color	plugged/fzf/plugin/fzf.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_ctags_executable	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
s:get_git_root	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root(dir)$/;"	f
s:get_line_trimmed	plugged/splitjoin.vim/spec/support/rust.vim/indent/rust.vim	/^function! s:get_line_trimmed(lnum)$/;"	f
s:get_version	plugged/fzf/plugin/fzf.vim	/^function s:get_version(bin)$/;"	f
s:get_word	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:get_word(item)$/;"	f
s:getchar	plugged/vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
s:getpos	plugged/fzf/plugin/fzf.vim	/^function! s:getpos()$/;"	f
s:git_dir	autoload/plug.vim	/^function! s:git_dir(dir) abort$/;"	f
s:git_index_file_env	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:git_index_file_env = {}$/;"	v
s:git_local_branch	autoload/plug.vim	/^function! s:git_local_branch(dir) abort$/;"	f
s:git_origin_branch	autoload/plug.vim	/^function! s:git_origin_branch(spec)$/;"	f
s:git_origin_url	autoload/plug.vim	/^function! s:git_origin_url(dir) abort$/;"	f
s:git_revision	autoload/plug.vim	/^function! s:git_revision(dir) abort$/;"	f
s:git_validate	autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_validate	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_validate	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:git_validate(spec, check_branch)$/;"	f
s:git_version_requirement	autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:git_version_requirement	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:git_version_requirement(...)$/;"	f
s:git_version_requirement	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:git_version_requirement	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:git_version_requirement(...)$/;"	f
s:git_versions	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:git_versions = {}$/;"	v
s:given_range	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:given_range(line1, line2)$/;"	f
s:glob	autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:glob(from, pattern)$/;"	f
s:glob_dir	autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:glob_dir	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:glob_dir	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:glob_dir(path)$/;"	f
s:global_variable_list	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust/debugging.vim	/^let s:global_variable_list = [$/;"	v
s:globsubs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:globsubs = {$/;"	v
s:go	plugged/vim-commentary/plugin/commentary.vim	/^function! s:go(...) abort$/;"	f
s:got_fmt_error	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rustfmt.vim	/^let s:got_fmt_error = 0$/;"	v
s:grep_combine_flags	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:grep_combine_flags = '[aiIrhHEGPFnlLzocpWq]\\{-\\}'$/;"	v
s:grep_command	plugged/vim-abolish/plugin/abolish.vim	/^function! s:grep_command(args,bang,flags,word)$/;"	f
s:grep_multi_line	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:grep_multi_line(opts)$/;"	f
s:grey_colour	plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:grey_colour(n)$/;"	f
s:grey_level	plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:grey_level(n)$/;"	f
s:grey_number	plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:grey_number(x)$/;"	f
s:gsub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
s:gui	plugged/seoul256.vim/colors/seoul256.vim	/^let s:gui = has('gui_running')$/;"	v
s:handle	plugged/validator.vim/autoload/validator.vim	/^function! s:handle(ch, ft, nr, checker)$/;"	f
s:handle_ambidouble	plugged/fzf/plugin/fzf.vim	/^function! s:handle_ambidouble(dict)$/;"	f
s:handle_with	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:handle_with(start_lnum, start_col, context)$/;"	f
s:has_any	plugged/fzf/plugin/fzf.vim	/^function! s:has_any(dict, keys)$/;"	f
s:has_features	plugged/completor.vim/plugin/completor.vim	/^function! s:has_features()$/;"	f
s:has_webapi	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! s:has_webapi()$/;"	f
s:hash_colors	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:hash_colors = {}$/;"	v
s:hash_match	autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:hash_match	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:hash_match	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:hash_match(a, b)$/;"	f
s:hd	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rhelp.vim	/^  let s:hd = 0$/;"	v
s:hd	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rhelp.vim	/^  let s:hd = 1$/;"	v
s:head_cache	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:head_cache = {}$/;"	v
s:helptag_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
s:hi	plugged/seoul256.vim/colors/seoul256.vim	/^function! s:hi(item, fg, bg)$/;"	f
s:hi_cursor	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:hi_cursor()$/;"	f
s:highlight	plugged/validator.vim/autoload/validator.vim	/^function! s:highlight()$/;"	f
s:highlight_keys	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
s:history	plugged/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, extra, bang)$/;"	f
s:history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
s:history_source	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
s:hl_position	plugged/validator.vim/autoload/validator/notifier.vim	/^function! s:hl_position(lnum, col)$/;"	f
s:identify_color_mode	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:identify_color_mode()$/;"	f
s:ignore	plugged/validator.vim/autoload/validator.vim	/^function! s:ignore(ft)$/;"	f
s:ignores	plugged/validator.vim/plugin/validator.vim	/^let s:ignores = ['nerdtree', 'qf', 'unite', 'help', 'text']$/;"	v
s:import_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:import_pattern = '^\\(import\\|from\\)'$/;"	v
s:import_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:import_pattern = '^\\(import\\|from\\)'$/;"	v
s:import_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:import_pattern = '^\\(import\\|from\\)'$/;"	v
s:import_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:import_pattern = '^\\(import\\|from\\)'$/;"	v
s:import_python	plugged/completor.vim/autoload/completor.vim	/^function! s:import_python()$/;"	f
s:import_python	plugged/validator.vim/autoload/validator.vim	/^function! s:import_python()$/;"	f
s:in_comm	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^let s:in_comm = s:skip_expr[:-14] . "'comment\\\\|doc'"$/;"	v
s:inactive_l1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_l1_bg = s:palette.bg1$/;"	v
s:inactive_l1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_l1_fg = s:palette.grey1$/;"	v
s:inactive_l2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_l2_bg = s:palette.bg1$/;"	v
s:inactive_l2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_l2_fg = s:palette.grey1$/;"	v
s:inactive_mid_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_mid_bg = s:palette.bg1$/;"	v
s:inactive_mid_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_mid_fg = s:palette.grey1$/;"	v
s:inactive_middle_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_middle_bg = s:palette.bg1$/;"	v
s:inactive_middle_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_middle_fg = s:palette.grey1$/;"	v
s:inactive_mod_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_mod_bg = s:palette.bg1$/;"	v
s:inactive_mod_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_mod_fg = s:palette.grey1$/;"	v
s:inactive_r1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_r1_bg = s:palette.bg1$/;"	v
s:inactive_r1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_r1_fg = s:palette.grey1$/;"	v
s:inactive_r2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_r2_bg = s:palette.bg1$/;"	v
s:inactive_r2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:inactive_r2_fg = s:palette.grey1$/;"	v
s:inactive_side_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_side_bg = s:palette.bg1$/;"	v
s:inactive_side_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_side_fg = s:palette.grey1$/;"	v
s:inactive_sub_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_sub_bg = s:palette.bg1$/;"	v
s:inactive_sub_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:inactive_sub_fg = s:palette.grey1$/;"	v
s:indexes	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:indexes = {}$/;"	v
s:infer_properties	autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:infer_properties	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:infer_properties	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:infer_properties(name, repo)$/;"	f
s:init	plugged/completor.vim/plugin/completor.vim	/^func s:init()$/;"	f
s:init_popup	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:init_popup()$/;"	f
s:init_props	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:init_props()$/;"	f
s:inited	plugged/completor.vim/autoload/completor/prompt.vim	/^let s:inited = v:false$/;"	v
s:inject_snippet	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
s:inputreplacement	plugged/vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
s:inputtarget	plugged/vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
s:inputted	plugged/completor.vim/autoload/completor.vim	/^let s:inputted = v:false$/;"	v
s:insert	plugged/vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
s:insert_l1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_l1_bg = s:palette.statusline2$/;"	v
s:insert_l1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_l1_fg = s:palette.bg0$/;"	v
s:insert_l2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_l2_bg = s:palette.bg3$/;"	v
s:insert_l2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_l2_fg = s:palette.fg$/;"	v
s:insert_mid_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_mid_bg = s:palette.bg1$/;"	v
s:insert_mid_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_mid_fg = s:palette.fg$/;"	v
s:insert_middle_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_middle_bg = s:palette.bg1$/;"	v
s:insert_middle_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_middle_fg = s:palette.fg$/;"	v
s:insert_mod_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_mod_bg = s:palette.bg1$/;"	v
s:insert_mod_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_mod_fg = s:palette.fg$/;"	v
s:insert_r1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_r1_bg = s:palette.statusline2$/;"	v
s:insert_r1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_r1_fg = s:palette.bg0$/;"	v
s:insert_r2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_r2_bg = s:palette.bg3$/;"	v
s:insert_r2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:insert_r2_fg = s:palette.fg$/;"	v
s:insert_side_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_side_bg = s:palette.statusline2$/;"	v
s:insert_side_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_side_fg = s:palette.bg0$/;"	v
s:insert_sub_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_sub_bg = s:palette.bg3$/;"	v
s:insert_sub_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:insert_sub_fg = s:palette.fg$/;"	v
s:insert_word	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:insert_word(id)$/;"	f
s:install	autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:install	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:install	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:install(force, names)$/;"	f
s:invalid_function_names	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^let s:invalid_function_names = [$/;"	v
s:is_floating	plugged/ultisnips/autoload/UltiSnips.vim	/^function! s:is_floating(winId) abort$/;"	f
s:is_local_plug	autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_local_plug	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_local_plug	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  function! s:is_local_plug(repo)$/;"	f
s:is_managed	autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_managed	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_managed	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:is_managed(name)$/;"	f
s:is_powershell	autoload/plug.vim	/^function! s:is_powershell(shell)$/;"	f
s:is_preview_window_open	autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_preview_window_open	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_preview_window_open	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:is_preview_window_open()$/;"	f
s:is_selector_content_shown	plugged/completor.vim/autoload/completor/popup.vim	/^let s:is_selector_content_shown = v:false$/;"	v
s:is_selector_shown	plugged/completor.vim/autoload/completor/popup.vim	/^let s:is_selector_shown = v:false$/;"	v
s:is_status_consistent	plugged/completor.vim/autoload/completor/action.vim	/^function! s:is_status_consistent()$/;"	f
s:is_string_comment	plugged/splitjoin.vim/spec/support/rust.vim/indent/rust.vim	/^function! s:is_string_comment(lnum, col)$/;"	f
s:is_string_or_comment	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:is_string_or_comment(line, col)$/;"	f
s:is_updated	autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_updated	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_updated	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:is_updated(dir)$/;"	f
s:is_win	autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:is_win	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:is_win	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:is_win = has('win32')$/;"	v
s:is_wsl_bash	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:is_wsl_bash = s:is_win && (exepath('bash') =~? 'Windows[\/\\\\]system32[\/\\\\]bash.exe$')$/;"	v
s:isabsolute	autoload/plug.vim	/^function! s:isabsolute(dir) abort$/;"	f
s:item_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:item_pattern = s:file_commit_pattern . '\\|^@@'$/;"	v
s:job_abort	autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_abort	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_abort	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:job_abort()$/;"	f
s:job_cb	autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_cb	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_cb	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:job_cb(fn, job, ch, data)$/;"	f
s:job_exit_cb	autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_exit_cb	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_exit_cb	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:job_exit_cb(self, data) abort$/;"	f
s:job_out_cb	autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:job_out_cb	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:job_out_cb	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:job_out_cb(self, data) abort$/;"	f
s:job_start_daemon	plugged/completor.vim/autoload/completor/daemon.vim	/^  function! s:job_start_daemon(name, cmd, options)$/;"	f
s:jump	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
s:jump_format	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump_format(line)$/;"	f
s:jump_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump_sink(lines)$/;"	f
s:jump_to_placeholder	plugged/completor.vim/pythonx/completers/cpp/placeholder.vim	/^function! s:jump_to_placeholder()$/;"	f
s:keepcpo	plugged/splitjoin.vim/plugin/splitjoin.vim	/^let s:keepcpo          = &cpo$/;"	v
s:key_ignore	plugged/completor.vim/autoload/completor.vim	/^function! s:key_ignore(pos)$/;"	f
s:key_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
s:keyword	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:keyword(expr)$/;"	f
s:known_files	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:last_modified	plugged/everforest/colors/everforest.vim	/^let s:last_modified = 'Tue Jun 25 13:38:33 UTC 2024'$/;"	v
s:last_non_empty_line	autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:last_non_empty_line	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:last_non_empty_line	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:last_non_empty_line(lines)$/;"	f
s:last_time	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:last_time = reltime()$/;"	v
s:last_times	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:last_times = {}$/;"	v
s:last_wildignores	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:last_winnr	plugged/completor.vim/autoload/completor/prompt.vim	/^let s:last_winnr = -1$/;"	v
s:lastline	autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lastline	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lastline	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:lastline(msg)$/;"	f
s:lastplace_can_run	plugged/vim-lastplace/plugin/vim-lastplace.vim	/^fu! s:lastplace_can_run()$/;"	f
s:lastplace_jump	plugged/vim-lastplace/plugin/vim-lastplace.vim	/^fu! s:lastplace_jump()"{{{$/;"	f
s:lastplace_open_folds	plugged/vim-lastplace/plugin/vim-lastplace.vim	/^fu! s:lastplace_open_folds()$/;"	f
s:launcher	plugged/fzf/plugin/fzf.vim	/^  let s:launcher = '%s'$/;"	v
s:launcher	plugged/fzf/plugin/fzf.vim	/^  let s:launcher = function('s:xterm_launcher')$/;"	v
s:layout_keys	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:layout_keys	plugged/fzf/plugin/fzf.vim	/^let s:layout_keys = ['window', 'tmux', 'up', 'down', 'left', 'right']$/;"	v
s:lazy	autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
s:lazy	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
s:lazy	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:lazy(plug, opt)$/;"	f
s:legacy_select	plugged/completor.vim/autoload/completor/action.vim	/^function! s:legacy_select(items, action)$/;"	f
s:light	plugged/seoul256.vim/colors/seoul256-light.vim	/^let s:light     = s:custom_bg >= 252 && s:custom_bg <= 256$/;"	v
s:light_bg	plugged/seoul256.vim/colors/seoul256.vim	/^  let s:light_bg = 253$/;"	v
s:light_bg	plugged/seoul256.vim/colors/seoul256.vim	/^  let s:light_bg = get(s:, 'seoul256_background', 253)$/;"	v
s:light_bg_1	plugged/seoul256.vim/colors/seoul256.vim	/^let s:light_bg_1 = min([s:light_bg + 1, 256])$/;"	v
s:light_bg_2	plugged/seoul256.vim/colors/seoul256.vim	/^let s:light_bg_2 = min([s:light_bg + 2, 256])$/;"	v
s:light_fg	plugged/seoul256.vim/colors/seoul256.vim	/^let s:light_fg = 239$/;"	v
s:light_var_found	plugged/seoul256.vim/colors/seoul256-light.vim	/^let s:light_var_found = exists('g:seoul256_light_background')$/;"	v
s:line_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
s:linechars	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
s:lines	autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:lines	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let s:lines = join(getline(1, 5) + [getline('$')], "\\n")$/;"	v
s:lines	plugged/splitjoin.vim/spec/support/vim-elixir/syntax/eelixir.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."/;"	v
s:lines	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:lines	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:lines(msg)$/;"	f
s:lint_line	plugged/validator.vim/autoload/validator.vim	/^let s:lint_line = -1$/;"	v
s:lint_popup	plugged/validator.vim/autoload/validator.vim	/^let s:lint_popup = -1$/;"	v
s:load_256_to_GUI_converter	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:load_256_to_GUI_converter()$/;"	f
s:load_GUI_to_256_converter	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:load_GUI_to_256_converter()$/;"	f
s:load_plugin	autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:load_plugin	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:load_plugin	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:load_plugin(spec)$/;"	f
s:loaded	autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:loaded = get(s:, 'loaded', {})$/;"	v
s:loaded_names	autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:loaded_names	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:loaded_names	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:loaded_names()$/;"	f
s:loclist	plugged/validator.vim/autoload/validator.vim	/^let s:loclist = []$/;"	v
s:lod	autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:lod(names, types, ...)$/;"	f
s:lod_cmd	autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_cmd	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_cmd	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:lod_cmd(cmd, bang, l1, l2, args, names)$/;"	f
s:lod_ft	autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_ft	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_ft	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:lod_ft(pat, names)$/;"	f
s:lod_map	autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:lod_map	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:lod_map	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:lod_map(map, names, with_prefix, prefix)$/;"	f
s:log	autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:log(bullet, name, lines)$/;"	f
s:log4	autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:log4	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:log4	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:log4(name, msg)$/;"	f
s:log_diff_context	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:log_diff_context = '{"filename": fugitive#Find(v:val . from, a:dir), "lnum": get(offsets, /;"	v
s:logpos	autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:logpos	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:logpos	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:logpos(name)$/;"	f
s:lpad	autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:lpad	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:lpad	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:lpad(str, len)$/;"	f
s:mac_gui	autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:mac_gui	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:mac_gui	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:mac_gui = has('gui_macvim') && has('gui_running')$/;"	v
s:manager	plugged/validator.vim/autoload/validator.vim	/^let s:manager = {'refcount': 0, 'jobs': []}$/;"	v
s:manager.add_job	plugged/validator.vim/autoload/validator.vim	/^function! s:manager.add_job(job)$/;"	f
s:manager.decref	plugged/validator.vim/autoload/validator.vim	/^function! s:manager.decref()$/;"	f
s:manager.reset_jobs	plugged/validator.vim/autoload/validator.vim	/^function! s:manager.reset_jobs()$/;"	f
s:manual_ignore_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:manual_ignore_pattern = '#$'$/;"	v
s:manual_ignore_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:manual_ignore_pattern = '#$'$/;"	v
s:manual_ignore_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:manual_ignore_pattern = '#$'$/;"	v
s:manual_ignore_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:manual_ignore_pattern = '#$'$/;"	v
s:manual_update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
s:mark_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
s:master	plugged/seoul256.vim/colors/seoul256-light.vim	/^let s:master    = expand('<sfile>:p:h').'\/seoul256.vim'$/;"	v
s:match_group	plugged/MatchTagAlways/autoload/MatchTagAlways.vim	/^  let s:match_group = 'MatchParen'$/;"	v
s:match_group	plugged/MatchTagAlways/autoload/MatchTagAlways.vim	/^  let s:match_group = 'MatchTag'$/;"	v
s:match_words	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^let s:match_words = ""$/;"	v
s:max_width	plugged/completor.vim/autoload/completor/popup.vim	/^let s:max_width = 80$/;"	v
s:max_word_length	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:max_word_length(items)$/;"	f
s:me	autoload/plug.vim	/^  let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:me	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:me	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:me = resolve(expand('<sfile>:p'))$/;"	v
s:merge_heads	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:merge_heads = ['MERGE_HEAD', 'REBASE_HEAD', 'CHERRY_PICK_HEAD', 'REVERT_HEAD']$/;"	v
s:merge_opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
s:min_select_content_height	plugged/completor.vim/autoload/completor/popup.vim	/^let s:min_select_content_height = 13$/;"	v
s:min_supported_height	plugged/completor.vim/autoload/completor/popup.vim	/^let s:min_supported_height = 9$/;"	v
s:min_version	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:min_version = '0.23.0'$/;"	v
s:mixedcase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:mixedcase(word)$/;"	f
s:module_pattern	plugged/splitjoin.vim/autoload/sj/elixir.vim	/^let s:module_pattern = '\\k\\%(\\k\\|\\.\\)*'$/;"	v
s:multiline_string_start_end_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:multiline_string_start_end_pattern = s:multiline_string_start_pattern . '.*\\1'$/;"	v
s:multiline_string_start_end_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:multiline_string_start_end_pattern = s:multiline_string_start_pattern . '.*\\1'$/;"	v
s:multiline_string_start_end_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:multiline_string_start_end_pattern = s:multiline_string_start_pattern . '.*\\1'$/;"	v
s:multiline_string_start_end_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:multiline_string_start_end_pattern = s:multiline_string_start_pattern . '.*\\1'$/;"	v
s:multiline_string_start_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:multiline_string_start_pattern = '\\v[bBfFrRuU]*(''''''|""")\\\\?'$/;"	v
s:multiline_string_start_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:multiline_string_start_pattern = '\\v[bBfFrRuU]*(''''''|""")\\\\?'$/;"	v
s:multiline_string_start_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:multiline_string_start_pattern = '\\v[bBfFrRuU]*(''''''|""")\\\\?'$/;"	v
s:multiline_string_start_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:multiline_string_start_pattern = '\\v[bBfFrRuU]*(''''''|""")\\\\?'$/;"	v
s:names	autoload/plug.vim	/^function! s:names(...)$/;"	f
s:names	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:names(...)$/;"	f
s:names	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:names(...)$/;"	f
s:nearest_cargo	plugged/splitjoin.vim/spec/support/rust.vim/autoload/cargo.vim	/^function! s:nearest_cargo(...) abort$/;"	f
s:need_cmd_window	plugged/fzf/plugin/fzf.vim	/^let s:need_cmd_window = has('win32unix') && $TERM_PROGRAM ==# 'mintty' && s:compare_versions($TE/;"	v
s:new_window	autoload/plug.vim	/^function! s:new_window()$/;"	f
s:new_window	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:new_window()$/;"	f
s:new_window	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:new_window()$/;"	f
s:next	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:next()$/;"	f
s:nm	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^    let s:nm  = s:type$/;"	v
s:nm	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rmd.vim	/^    let s:nm = substitute(s:type, '=.*', '', '')$/;"	v
s:noTagUnderCursor	plugged/splitjoin.vim/autoload/sj/html.vim	/^function! s:noTagUnderCursor()$/;"	f
s:noTagUnderCursor	plugged/splitjoin.vim/autoload/sj/jsx.vim	/^function! s:noTagUnderCursor()$/;"	f
s:normal_l1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_l1_bg = s:palette.statusline1$/;"	v
s:normal_l1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_l1_fg = s:palette.bg0$/;"	v
s:normal_l2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_l2_bg = s:palette.bg3$/;"	v
s:normal_l2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_l2_fg = s:palette.grey2$/;"	v
s:normal_mid_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_mid_bg = s:palette.bg1$/;"	v
s:normal_mid_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_mid_fg = s:palette.grey1$/;"	v
s:normal_middle_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_middle_bg = s:palette.bg1$/;"	v
s:normal_middle_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_middle_fg = s:palette.grey1$/;"	v
s:normal_mod_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_mod_bg = s:palette.bg1$/;"	v
s:normal_mod_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_mod_fg = s:palette.green$/;"	v
s:normal_r1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_r1_bg = s:palette.statusline1$/;"	v
s:normal_r1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_r1_fg = s:palette.bg0$/;"	v
s:normal_r2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_r2_bg = s:palette.bg3$/;"	v
s:normal_r2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:normal_r2_fg = s:palette.grey2$/;"	v
s:normal_side_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_side_bg = s:palette.statusline1$/;"	v
s:normal_side_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_side_fg = s:palette.bg0$/;"	v
s:normal_sub_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_sub_bg = s:palette.bg3$/;"	v
s:normal_sub_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:normal_sub_fg = s:palette.grey2$/;"	v
s:normalize_options	plugged/vim-abolish/plugin/abolish.vim	/^function! s:normalize_options(flags)$/;"	f
s:nvim	autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:nvim = has('nvim-0.2') || (has('nvim') && exists('*jobwait') && !s:is_win)$/;"	v
s:nvim_cb	autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:nvim_cb	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:nvim_cb	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:nvim_cb(job_id, data, event) dict abort$/;"	f
s:nvim_daemon_handler	plugged/completor.vim/autoload/completor/daemon.vim	/^function! s:nvim_daemon_handler(name, job_id, data, event)$/;"	f
s:nvim_job_exit_wrapper	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
s:nvim_job_out_wrapper	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
s:nvim_last_msg	plugged/completor.vim/autoload/completor/compat.vim	/^let s:nvim_last_msg = ''$/;"	v
s:nvim_oneshot_handler	plugged/completor.vim/autoload/completor/compat.vim	/^function! s:nvim_oneshot_handler(job_id, data, event)$/;"	f
s:nvim_read	plugged/completor.vim/autoload/completor/compat.vim	/^function! s:nvim_read(data)$/;"	f
s:object	plugged/vim-abolish/plugin/abolish.vim	/^let s:object = {}$/;"	v
s:object.clone	plugged/vim-abolish/plugin/abolish.vim	/^function! s:object.clone(...)$/;"	f
s:on_cursor_move	plugged/validator.vim/autoload/validator.vim	/^function! s:on_cursor_move()$/;"	f
s:on_cursor_movei	plugged/validator.vim/autoload/validator.vim	/^function! s:on_cursor_movei()$/;"	f
s:on_exit	plugged/completor.vim/autoload/completor/daemon.vim	/^function! s:on_exit(name, job_id, status)$/;"	f
s:on_insert_char_pre	plugged/completor.vim/autoload/completor.vim	/^function! s:on_insert_char_pre()$/;"	f
s:on_rename_close	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:on_rename_close(opt)$/;"	f
s:on_rename_commit	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:on_rename_commit(text)$/;"	f
s:on_rename_start	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:on_rename_start(opt)$/;"	f
s:on_text_change	plugged/completor.vim/autoload/completor.vim	/^function! s:on_text_change()$/;"	f
s:on_text_change	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:on_text_change()$/;"	f
s:on_vim_resize	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:on_vim_resize()$/;"	f
s:open	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(target)$/;"	f
s:open	plugged/fzf/plugin/fzf.vim	/^function! s:open(cmd, target)$/;"	f
s:opendir	plugged/vim-vinegar/plugin/vinegar.vim	/^function! s:opendir(cmd) abort$/;"	f
s:opfirst	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^let s:opfirst = '^' . get(g:,'javascript_opfirst',$/;"	v
s:opfunc	plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc(type, ...) abort " {{{1$/;"	f
s:opfunc2	plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc2(...) abort$/;"	f
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.command.left = [ [ s:command_l1_fg, s:command_l1_bg ], [ s:command_l2_fg, s:command_l2/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.command.right = [ [ s:command_r1_fg, s:command_r1_bg ], [ s:command_r2_fg, s:command_r/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.insert.left = [ [ s:insert_l1_fg, s:insert_l1_bg ], [ s:insert_l2_fg, s:insert_l2_bg ]/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.insert.right = [ [ s:insert_r1_fg, s:insert_r1_bg ], [ s:insert_r2_fg, s:insert_r2_bg /;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.normal.left = [ [ s:normal_l1_fg, s:normal_l1_bg ], [ s:normal_l2_fg, s:normal_l2_bg ]/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.normal.right = [ [ s:normal_r1_fg, s:normal_r1_bg ], [ s:normal_r2_fg, s:normal_r2_bg /;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.replace.left = [ [ s:replace_l1_fg, s:replace_l1_bg ], [ s:replace_l2_fg, s:replace_l2/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.replace.right = [ [ s:replace_r1_fg, s:replace_r1_bg ], [ s:replace_r2_fg, s:replace_r/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.tabline.tabsel = [ [ s:tab_sel_fg, s:tab_sel_bg ] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.terminal.left = [ [ s:terminal_l1_fg, s:terminal_l1_bg ], [ s:terminal_l2_fg, s:termin/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.terminal.right = [ [ s:terminal_r1_fg, s:terminal_r1_bg ], [ s:terminal_r2_fg, s:termi/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.visual.left = [ [ s:visual_l1_fg, s:visual_l1_bg ], [ s:visual_l2_fg, s:visual_l2_bg ]/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:p.visual.right = [ [ s:visual_r1_fg, s:visual_r1_bg ], [ s:visual_r2_fg, s:visual_r2_bg /;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'command': {/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.command.left = [ [ s:command_l1_fg, s:command_l1_bg, 'bold' ], [ s:command_l2_fg, s:comm/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.command.middle = [ [ s:command_middle_fg, s:command_middle_bg ] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.command.right = [ [ s:command_r1_fg, s:command_r1_bg, 'bold' ], [ s:command_r2_fg, s:com/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.inactive.left = [ [ s:inactive_l1_fg, s:inactive_l1_bg ], [ s:inactive_l2_fg, s:inactive/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.inactive.middle = [ [ s:inactive_middle_fg, s:inactive_middle_bg ] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.inactive.right = [ [ s:inactive_r1_fg, s:inactive_r1_bg ], [ s:inactive_r2_fg, s:inactiv/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.insert.left = [ [ s:insert_l1_fg, s:insert_l1_bg, 'bold' ], [ s:insert_l2_fg, s:insert_l/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.insert.middle = [ [ s:insert_middle_fg, s:insert_middle_bg ] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.insert.right = [ [ s:insert_r1_fg, s:insert_r1_bg, 'bold' ], [ s:insert_r2_fg, s:insert_/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.normal.error = [ [ s:errorfg, s:errorbg ] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.normal.left = [ [ s:normal_l1_fg, s:normal_l1_bg, 'bold' ], [ s:normal_l2_fg, s:normal_l/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.normal.middle = [ [ s:normal_middle_fg, s:normal_middle_bg ] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.normal.right = [ [ s:normal_r1_fg, s:normal_r1_bg, 'bold' ], [ s:normal_r2_fg, s:normal_/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.normal.warning = [ [ s:warningfg, s:warningbg ] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.replace.left = [ [ s:replace_l1_fg, s:replace_l1_bg, 'bold' ], [ s:replace_l2_fg, s:repl/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.replace.middle = [ [ s:replace_middle_fg, s:replace_middle_bg ] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.replace.right = [ [ s:replace_r1_fg, s:replace_r1_bg, 'bold' ], [ s:replace_r2_fg, s:rep/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.tabline.left = [ [ s:tab_l_fg, s:tab_l_bg] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.tabline.middle = [ [ s:tab_middle_fg, s:tab_middle_bg] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.tabline.right = [ [ s:tab_r_fg, s:tab_r_bg] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.tabline.tabsel = [ [ s:tab_sel_fg, s:tab_sel_bg, 'bold' ] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.terminal.left = [ [ s:terminal_l1_fg, s:terminal_l1_bg, 'bold' ], [ s:terminal_l2_fg, s:/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.terminal.middle = [ [ s:terminal_middle_fg, s:terminal_middle_bg ] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.terminal.right = [ [ s:terminal_r1_fg, s:terminal_r1_bg, 'bold' ], [ s:terminal_r2_fg, s/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.visual.left = [ [ s:visual_l1_fg, s:visual_l1_bg, 'bold' ], [ s:visual_l2_fg, s:visual_l/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.visual.middle = [ [ s:visual_middle_fg, s:visual_middle_bg ] ]$/;"	v
s:p	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:p.visual.right = [ [ s:visual_r1_fg, s:visual_r1_bg, 'bold' ], [ s:visual_r2_fg, s:visual_/;"	v
s:palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^  let s:palette.bg1 = s:palette.none$/;"	v
s:palette	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:palette = everforest#get_palette(s:configuration.background, s:configuration.colors_overri/;"	v
s:palette	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^  let s:palette.bg1 = s:palette.none$/;"	v
s:palette	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:palette = everforest#get_palette(s:configuration.background, s:configuration.colors_overri/;"	v
s:palette	plugged/everforest/colors/everforest.vim	/^let s:palette = everforest#get_palette(s:configuration.background, s:configuration.colors_overri/;"	v
s:parse_options	autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:parse_options	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:parse_options	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:parse_options(arg)$/;"	f
s:parse_substitute	plugged/vim-abolish/plugin/abolish.vim	/^function! s:parse_substitute(bang,line1,line2,count,args)$/;"	f
s:parse_subvert	plugged/vim-abolish/plugin/abolish.vim	/^function! s:parse_subvert(bang,line1,line2,count,args)$/;"	f
s:pat	plugged/completor.vim/pythonx/completers/cpp/placeholder.vim	/^let s:pat = '<#[^#]\\+#>'$/;"	v
s:path	autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:path	plugged/everforest/colors/everforest.vim	/^let s:path = expand('<sfile>:p') " the path of this script$/;"	v
s:path	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/ecto.vim	/^let s:path = expand('<sfile>:h')$/;"	v
s:path	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:path	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  function! s:path(path)$/;"	f
s:path_subcommands	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:path_subcommands = {}$/;"	v
s:pattern	plugged/vim-abolish/plugin/abolish.vim	/^function! s:pattern(dict,boundaries)$/;"	f
s:pipe_pattern	plugged/splitjoin.vim/autoload/sj/elixir.vim	/^let s:pipe_pattern = '^\\s*|>\\s\\+'$/;"	v
s:pluck	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
s:plug_buf	autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_buf	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_buf	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:plug_buf = get(s:, 'plug_buf', -1)$/;"	v
s:plug_call	autoload/plug.vim	/^  function! s:plug_call(fn, ...)$/;"	f
s:plug_expand	autoload/plug.vim	/^function! s:plug_expand(fmt)$/;"	f
s:plug_fnamemodify	autoload/plug.vim	/^function! s:plug_fnamemodify(fname, mods)$/;"	f
s:plug_getcwd	autoload/plug.vim	/^function! s:plug_getcwd()$/;"	f
s:plug_src	autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_src	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_src	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:plug_src = 'https:\/\/github.com\/junegunn\/vim-plug.git'$/;"	v
s:plug_tab	autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_tab	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_tab	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:plug_tab = get(s:, 'plug_tab', -1)$/;"	v
s:plug_tempname	autoload/plug.vim	/^function! s:plug_tempname()$/;"	f
s:plug_window_exists	autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:plug_window_exists	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:plug_window_exists	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:plug_window_exists()$/;"	f
s:pop_id	plugged/validator.vim/autoload/validator/notifier.vim	/^function! s:pop_id(bufnr)$/;"	f
s:popup	plugged/completor.vim/autoload/completor/popup.vim	/^let s:popup = -1$/;"	v
s:popup	plugged/fzf/plugin/fzf.vim	/^function! s:popup(opts) abort$/;"	f
s:popup_init	plugged/completor.vim/autoload/completor/action.vim	/^let s:popup_init = v:false$/;"	v
s:popup_init	plugged/completor.vim/autoload/completor/popup.vim	/^let s:popup_init = v:false$/;"	v
s:popup_select	plugged/completor.vim/autoload/completor/action.vim	/^function! s:popup_select(items)$/;"	f
s:popup_support	plugged/fzf/plugin/fzf.vim	/^function! s:popup_support()$/;"	f
s:prepare	autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:prepare	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:prepare	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:prepare(...)$/;"	f
s:prepare_env	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:prepare_env = {$/;"	v
s:prepend_opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
s:present	plugged/fzf/plugin/fzf.vim	/^function! s:present(dict, ...)$/;"	f
s:prev	plugged/completor.vim/autoload/completor.vim	/^let s:prev = []$/;"	v
s:prev	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:prev()$/;"	f
s:prev_ends_with	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:prev_ends_with(context, expr)$/;"	f
s:prev_starts_with	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:prev_starts_with(context, expr)$/;"	f
s:preview_commit	autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:preview_commit	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:preview_commit	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:preview_commit()$/;"	f
s:process	plugged/vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
s:process_options_file	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
s:progress_bar	autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_bar	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_bar	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:progress_bar(line, bar, total)$/;"	f
s:progress_opt	autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:progress_opt	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:progress_opt	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:progress_opt(base)$/;"	f
s:prompt_callback	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:prompt_callback(id, result, opt)$/;"	f
s:prompt_filter	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:prompt_filter(id, key, opt)$/;"	f
s:prompt_popup	plugged/completor.vim/autoload/completor/prompt.vim	/^let s:prompt_popup = -1$/;"	v
s:prompt_popup_backward	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:prompt_popup_backward(n)$/;"	f
s:prompt_popup_close	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:prompt_popup_close(opt)$/;"	f
s:prompt_popup_delete	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:prompt_popup_delete(text)$/;"	f
s:prompt_popup_delete_word	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:prompt_popup_delete_word(text)$/;"	f
s:prompt_popup_do	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:prompt_popup_do(id, cmd)$/;"	f
s:prompt_popup_forward	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:prompt_popup_forward(max)$/;"	f
s:prompt_popup_insert	plugged/completor.vim/autoload/completor/prompt.vim	/^func s:prompt_popup_insert(text, key)$/;"	f
s:prompt_popup_pos	plugged/completor.vim/autoload/completor/prompt.vim	/^let s:prompt_popup_pos = 1$/;"	v
s:prop_id_cursor	plugged/completor.vim/autoload/completor/prompt.vim	/^let s:prop_id_cursor = 1$/;"	v
s:prop_id_rename_word_highlight	plugged/completor.vim/autoload/completor/prompt.vim	/^let s:prop_id_rename_word_highlight = 2$/;"	v
s:pushd	plugged/fzf/plugin/fzf.vim	/^function! s:pushd(dict)$/;"	f
s:py	plugged/completor.vim/autoload/completor/utils.vim	/^let s:py = has('python3') ? 'py3' : 'py'$/;"	v
s:py	plugged/validator.vim/autoload/validator/utils.vim	/^let s:py = has('python3') ? 'py3' : 'py'$/;"	v
s:pyeval	plugged/completor.vim/autoload/completor/utils.vim	/^let s:pyeval = function(has('python3') ? 'py3eval' : 'pyeval')$/;"	v
s:pyeval	plugged/validator.vim/autoload/validator/utils.vim	/^let s:pyeval = function(has('python3') ? 'py3eval' : 'pyeval')$/;"	v
s:python_imported	plugged/completor.vim/autoload/completor.vim	/^let s:python_imported = v:false$/;"	v
s:python_imported	plugged/validator.vim/autoload/validator.vim	/^let s:python_imported = v:false$/;"	v
s:quote_chars	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:quote_chars = {$/;"	v
s:reap	autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:reap	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:reap	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:reap(name)$/;"	f
s:rebase_abbrevs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:rebase_abbrevs = {$/;"	v
s:redraw	plugged/vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
s:reduce_line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
s:ref_header	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:ref_header = '\\%(Merge\\|Rebase\\|Upstream\\|Pull\\|Push\\)'$/;"	v
s:register_default_theme	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:register_default_theme()$/;"	f
s:regress_bar	autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:regress_bar	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:regress_bar	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:regress_bar()$/;"	f
s:reindent	plugged/vim-surround/plugin/surround.vim	/^function! s:reindent() abort " {{{1$/;"	f
s:rel	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^let s:rel = has('reltime')$/;"	v
s:relatives	plugged/vim-vinegar/plugin/vinegar.vim	/^function! s:relatives(first, ...) abort$/;"	f
s:reload_plugins	autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:reload_plugins	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:reload_plugins	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:reload_plugins()$/;"	f
s:remote_headers	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:remote_headers = {}$/;"	v
s:remove_layout	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
s:remove_rtp	autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_rtp	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_rtp	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:remove_rtp()$/;"	f
s:remove_triggers	autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:remove_triggers	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:remove_triggers	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:remove_triggers(name)$/;"	f
s:reorg_rtp	autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:reorg_rtp	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:reorg_rtp	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:reorg_rtp()$/;"	f
s:replace_l1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_l1_bg = s:palette.orange$/;"	v
s:replace_l1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_l1_fg = s:palette.bg0$/;"	v
s:replace_l2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_l2_bg = s:palette.bg3$/;"	v
s:replace_l2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_l2_fg = s:palette.grey2$/;"	v
s:replace_mid_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_mid_bg = s:palette.bg1$/;"	v
s:replace_mid_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_mid_fg = s:palette.grey1$/;"	v
s:replace_middle_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_middle_bg = s:palette.bg1$/;"	v
s:replace_middle_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_middle_fg = s:palette.grey1$/;"	v
s:replace_mod_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_mod_bg = s:palette.bg1$/;"	v
s:replace_mod_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_mod_fg = s:palette.orange$/;"	v
s:replace_r1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_r1_bg = s:palette.orange$/;"	v
s:replace_r1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_r1_fg = s:palette.bg0$/;"	v
s:replace_r2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_r2_bg = s:palette.bg3$/;"	v
s:replace_r2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:replace_r2_fg = s:palette.grey2$/;"	v
s:replace_side_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_side_bg = s:palette.orange$/;"	v
s:replace_side_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_side_fg = s:palette.bg0$/;"	v
s:replace_sub_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_sub_bg = s:palette.bg3$/;"	v
s:replace_sub_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:replace_sub_fg = s:palette.grey2$/;"	v
s:repo_bare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
s:repo_config	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_config(name) dict abort$/;"	f
s:repo_dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
s:repo_find	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_find(object) dict abort$/;"	f
s:repo_git_chomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
s:repo_git_chomp_in_tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
s:repo_git_command	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
s:repo_head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
s:repo_list	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/db/adapter/ecto.vim	/^function! s:repo_list() abort$/;"	f
s:repo_prototype	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repo_rev_parse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
s:repo_translate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_translate(rev) dict abort$/;"	f
s:repo_tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
s:reset	plugged/completor.vim/autoload/completor/action.vim	/^function! s:reset()$/;"	f
s:reset	plugged/completor.vim/autoload/completor/popup.vim	/^func! s:reset()$/;"	f
s:resetFolds	plugged/vim-coiled-snake/plugin/coiledsnake.vim	/^function! s:resetFolds() " {{{1$/;"	f
s:resetFolds	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/plugin/coiledsnake.vim	/^function! s:resetFolds() " {{{1$/;"	f
s:resetFolds	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/plugin/coiledsnake.vim	/^function! s:resetFolds() " {{{1$/;"	f
s:resolved_git_dirs	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:resolved_git_dirs = {}$/;"	v
s:restore_cpo	plugged/completor.vim/plugin/completor.vim	/^function! s:restore_cpo()$/;"	f
s:restore_cpo	plugged/validator.vim/plugin/validator.vim	/^function! s:restore_cpo()$/;"	f
s:resume_queue	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:resume_queue = []$/;"	v
s:retry	autoload/plug.vim	/^function! s:retry()$/;"	f
s:retry	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:retry()$/;"	f
s:retry	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:retry()$/;"	f
s:reverse_list	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:reverse_list(opts)$/;"	f
s:revert	autoload/plug.vim	/^function! s:revert()$/;"	f
s:revert	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:revert()$/;"	f
s:revert	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:revert()$/;"	f
s:rgb_colour	plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:rgb_colour(x, y, z)$/;"	f
s:rgb_level	plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:rgb_level(n)$/;"	f
s:rgb_map	plugged/seoul256.vim/colors/seoul256.vim	/^        let s:rgb_map = { 16: '#000000',$/;"	v
s:rgb_map	plugged/seoul256.vim/colors/seoul256.vim	/^        let s:rgb_map =$/;"	v
s:rgb_number	plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:rgb_number(x)$/;"	f
s:rm_rf	autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rm_rf	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rm_rf	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:rm_rf(dir)$/;"	f
s:rstrip	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:rstrip(str)$/;"	f
s:rtp	autoload/plug.vim	/^function! s:rtp(spec)$/;"	f
s:rtp	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
s:rtp	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^  function! s:rtp(spec)$/;"	f
s:run_jobs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:run_jobs = (exists('*ch_close_in') || exists('*jobstart')) && exists('*bufwinid')$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = '"' . gutentags#get_plat_file('update_tags') . '"'$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_gtags')$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_pyscopedb')$/;"	v
s:save_cpo	plugged/completor.vim/autoload/completor.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/completor.vim/plugin/completor.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/splitjoin.vim/spec/support/rust.vim/compiler/cargo.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/splitjoin.vim/spec/support/rust.vim/compiler/rustc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/splitjoin.vim/spec/support/rust.vim/ftplugin/rust/tagbar.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/splitjoin.vim/spec/support/rust.vim/indent/rust.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/splitjoin.vim/spec/support/rust.vim/plugin/cargo.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	plugged/splitjoin.vim/spec/support/rust.vim/plugin/rust.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	plugged/splitjoin.vim/spec/support/rust.vim/syntax_checkers/rust/cargo.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/splitjoin.vim/spec/support/rust.vim/syntax_checkers/rust/rustc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/splitjoin.vim/spec/support/tabular/after/plugin/TabularMaps.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/ultisnips/autoload/neocomplete/sources/ultisnips.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/ultisnips/ftplugin/snippets.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/validator.vim/autoload/validator.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/validator.vim/plugin/validator.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/vim-auto-save/plugin/AutoSave.vim	/^let s:save_cpo = &cpo$/;"	v
s:savecpo	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^let s:savecpo = &cpo$/;"	v
s:savecpo	plugged/splitjoin.vim/spec/support/tabular/plugin/Tabular.vim	/^let s:savecpo = &cpo$/;"	v
s:script_folder_path	plugged/MatchTagAlways/autoload/MatchTagAlways.vim	/^let s:script_folder_path = escape( expand( '<sfile>:p:h' ), '\\' )$/;"	v
s:scroll_filter	plugged/completor.vim/autoload/completor/popup.vim	/^func s:scroll_filter(id, key)$/;"	f
s:search_history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
s:section	autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:section	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:section	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:section(flags)$/;"	f
s:section_commit_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_commit_pattern = s:section_pattern . '\\|^commit '$/;"	v
s:section_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_pattern = '^[A-Z][a-z][^:]*$'$/;"	v
s:seek	plugged/vim-vinegar/plugin/vinegar.vim	/^function! s:seek(file) abort$/;"	f
s:select	plugged/completor.vim/autoload/completor/action.vim	/^function! s:select(items, action)$/;"	f
s:select_edit_file	plugged/completor.vim/autoload/completor/popup.vim	/^func s:select_edit_file(item)$/;"	f
s:select_filter	plugged/completor.vim/autoload/completor/popup.vim	/^func s:select_filter(id, key)$/;"	f
s:select_preview	plugged/completor.vim/autoload/completor/popup.vim	/^func s:select_preview(id, type, item)$/;"	f
s:select_resize	plugged/completor.vim/autoload/completor/popup.vim	/^func s:select_resize()$/;"	f
s:selector	plugged/completor.vim/autoload/completor/popup.vim	/^let s:selector = -1$/;"	v
s:selector_content	plugged/completor.vim/autoload/completor/popup.vim	/^let s:selector_content = -1$/;"	v
s:selector_items	plugged/completor.vim/autoload/completor/popup.vim	/^let s:selector_items = []$/;"	v
s:send	plugged/vim-abolish/plugin/abolish.vim	/^function! s:send(self,func,...)$/;"	f
s:send_buffer	plugged/validator.vim/autoload/validator.vim	/^function! s:send_buffer(job, lines)$/;"	f
s:seoul256_background	plugged/seoul256.vim/colors/seoul256.vim	/^  let s:seoul256_background = g:seoul256_background$/;"	v
s:setFolds	plugged/vim-coiled-snake/plugin/coiledsnake.vim	/^function! s:setFolds() " {{{1$/;"	f
s:setFolds	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/plugin/coiledsnake.vim	/^function! s:setFolds() " {{{1$/;"	f
s:setFolds	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/plugin/coiledsnake.vim	/^function! s:setFolds() " {{{1$/;"	f
s:set_color_variables	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:set_color_variables()$/;"	f
s:set_events	plugged/completor.vim/autoload/completor.vim	/^function! s:set_events()$/;"	f
s:set_format_attributes	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:set_format_attributes()$/;"	f
s:set_match_words	plugged/ultisnips/ftplugin/snippets.vim	/^  function! s:set_match_words() abort$/;"	f
s:set_match_words	plugged/ultisnips/ftplugin/snippets.vim	/^  let s:set_match_words = 1$/;"	v
s:set_overriding_colors	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:set_overriding_colors()$/;"	f
s:set_rust_filetype	plugged/splitjoin.vim/spec/support/rust.vim/ftdetect/rust.vim	/^function! s:set_rust_filetype() abort$/;"	f
s:setup_vinegar	plugged/vim-vinegar/plugin/vinegar.vim	/^function! s:setup_vinegar() abort$/;"	f
s:shellesc	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
s:shellesc	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:shellesc(arg)$/;"	f
s:shellesc	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
s:shellesc_cmd	autoload/plug.vim	/^function! s:shellesc_cmd(arg, script)$/;"	f
s:shellesc_cmd	plugged/fzf/plugin/fzf.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shellesc_cmd	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shellesc_cmd	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shellesc_ps1	autoload/plug.vim	/^function! s:shellesc_ps1(arg)$/;"	f
s:shellesc_sh	autoload/plug.vim	/^function! s:shellesc_sh(arg)$/;"	f
s:shiftwidth	plugged/splitjoin.vim/spec/support/rust.vim/indent/rust.vim	/^    function! s:shiftwidth()$/;"	f
s:shortpath	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
s:shortpath	plugged/fzf/plugin/fzf.vim	/^function! s:shortpath()$/;"	f
s:show_doc	plugged/completor.vim/autoload/completor/action.vim	/^function! s:show_doc(items)$/;"	f
s:show_in_popup	plugged/validator.vim/autoload/validator.vim	/^function! s:show_in_popup(msg, line)$/;"	f
s:show_in_status	plugged/validator.vim/autoload/validator.vim	/^function! s:show_in_status(info, msg)$/;"	f
s:sign_id	plugged/validator.vim/autoload/validator/notifier.vim	/^let s:sign_id = 0x1000$/;"	v
s:skip	plugged/completor.vim/autoload/completor.vim	/^function! s:skip()$/;"	f
s:skip	plugged/splitjoin.vim/autoload/sj/c.vim	/^let s:skip = sj#SkipSyntax(['cComment', 'cCommentL', 'cString', 'cCppString', 'cBlock'])$/;"	v
s:skip	plugged/splitjoin.vim/autoload/sj/java.vim	/^let s:skip = sj#SkipSyntax(['javaComment', 'javaString'])$/;"	v
s:skip	plugged/splitjoin.vim/autoload/sj/python.vim	/^let s:skip = sj#SkipSyntax(['pythonString', 'pythonComment', 'pythonStrInterpRegion'])$/;"	v
s:skip	plugged/splitjoin.vim/autoload/sj/r.vim	/^let s:skip = sj#SkipSyntax(['rComment'])$/;"	v
s:skip_expr	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^let s:skip_expr = "s:SynAt(line('.'),col('.')) =~? b:syng_strcom"$/;"	v
s:skip_syntax	plugged/splitjoin.vim/autoload/sj/clojure.vim	/^let s:skip_syntax = sj#SkipSyntax(['String', 'Comment'])$/;"	v
s:skip_syntax	plugged/splitjoin.vim/autoload/sj/rust.vim	/^let s:skip_syntax = sj#SkipSyntax(['String', 'Comment'])$/;"	v
s:slash	plugged/completor.vim/autoload/completor/utils.vim	/^let s:slash = (exists('+shellslash') && !&shellslash) ? '\\' : '\/'$/;"	v
s:slash	plugged/vim-vinegar/plugin/vinegar.vim	/^function! s:slash() abort$/;"	f
s:snakecase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:snakecase(word)$/;"	f
s:snapshot	autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:snapshot	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:snapshot	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:snapshot(force, ...) abort$/;"	f
s:sort	plugged/vim-abolish/plugin/abolish.vim	/^function! s:sort(a,b)$/;"	f
s:sort_buffers	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
s:sort_sequence	plugged/vim-vinegar/plugin/vinegar.vim	/^function! s:sort_sequence(suffixes) abort$/;"	f
s:source	autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:source	plugged/ultisnips/autoload/neocomplete/sources/ultisnips.vim	/^let s:source = {$/;"	v
s:source	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:source	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:source(from, ...)$/;"	f
s:source.gather_candidates	plugged/ultisnips/autoload/neocomplete/sources/ultisnips.vim	/^function! s:source.gather_candidates(context) abort$/;"	f
s:spacecase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:spacecase(word)$/;"	f
s:spawn	autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:spawn	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:spawn	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:spawn(name, cmd, opts)$/;"	f
s:split	plugged/fzf/plugin/fzf.vim	/^function! s:split(dict)$/;"	f
s:split_rtp	autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:split_rtp	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:split_rtp	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:split_rtp()$/;"	f
s:splittable	plugged/fzf/plugin/fzf.vim	/^function! s:splittable(dict)$/;"	f
s:starts_with	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:starts_with(context, expr)$/;"	f
s:status	autoload/plug.vim	/^function! s:status()$/;"	f
s:status	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:status()$/;"	f
s:status	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:status()$/;"	f
s:status_load	autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_load	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_load	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:status_load(lnum)$/;"	f
s:status_update	autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:status_update	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:status_update	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:status_update() range$/;"	f
s:string_struct_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:string_struct_pattern = s:multiline_string_start_pattern . 'START\\s*$'$/;"	v
s:string_struct_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:string_struct_pattern = s:multiline_string_start_pattern . 'START\\s*$'$/;"	v
s:string_struct_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:string_struct_pattern = s:multiline_string_start_pattern . 'START\\s*$'$/;"	v
s:string_struct_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:string_struct_pattern = s:multiline_string_start_pattern . 'START\\s*$'$/;"	v
s:strip	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
s:strip_white_space	plugged/vim-commentary/plugin/commentary.vim	/^function! s:strip_white_space(l,r,line) abort$/;"	f
s:style	plugged/seoul256.vim/colors/seoul256.vim	/^    let s:style = &background$/;"	v
s:style	plugged/seoul256.vim/colors/seoul256.vim	/^    let s:style = 'dark'$/;"	v
s:style	plugged/seoul256.vim/colors/seoul256.vim	/^    let s:style = 'light'$/;"	v
s:style_idx	plugged/seoul256.vim/colors/seoul256.vim	/^let s:style_idx = s:style == 'light'$/;"	v
s:sub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
s:subcommands_before_2_5	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:subcommands_before_2_5 = [$/;"	v
s:subesc	plugged/vim-abolish/plugin/abolish.vim	/^function! s:subesc(pattern)$/;"	f
s:substitute_command	plugged/vim-abolish/plugin/abolish.vim	/^function! s:substitute_command(cmd,bad,good,flags)$/;"	f
s:subvert_dispatcher	plugged/vim-abolish/plugin/abolish.vim	/^function! s:subvert_dispatcher(bang,line1,line2,count,args)$/;"	f
s:support_popup	plugged/validator.vim/autoload/validator.vim	/^func s:support_popup()$/;"	f
s:surroundings	plugged/vim-commentary/plugin/commentary.vim	/^function! s:surroundings() abort$/;"	f
s:sw	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:sw()$/;"	f
s:sw	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^  function s:sw()$/;"	f
s:switch_in	autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_in	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_in	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:switch_in()$/;"	f
s:switch_out	autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:switch_out	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:switch_out	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:switch_out(...)$/;"	f
s:syntax	autoload/plug.vim	/^function! s:syntax()$/;"	f
s:syntax	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:syntax()$/;"	f
s:syntax	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:syntax()$/;"	f
s:syntax_name	plugged/splitjoin.vim/spec/support/vim-elixir/autoload/elixir/indent.vim	/^function! s:syntax_name(line, col)$/;"	f
s:system	autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system	plugged/splitjoin.vim/spec/support/rust.vim/autoload/rust.vim	/^function! s:system(pwd, cmd)$/;"	f
s:system	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:system(cmd, ...)$/;"	f
s:system_chomp	autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:system_chomp	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:system_chomp	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:system_chomp(...)$/;"	f
s:t_ve	plugged/completor.vim/autoload/completor/popup.vim	/^let s:t_ve = &t_ve$/;"	v
s:t_ve	plugged/completor.vim/autoload/completor/prompt.vim	/^let s:t_ve = &t_ve$/;"	v
s:tab	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:tab = "\\t"$/;"	v
s:tab_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_bg = s:palette.bg3$/;"	v
s:tab_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_fg = s:palette.grey2$/;"	v
s:tab_l_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_l_bg = s:palette.bg3$/;"	v
s:tab_l_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_l_fg = s:palette.grey2$/;"	v
s:tab_label_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_label_bg = s:palette.bg3$/;"	v
s:tab_label_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_label_fg = s:palette.grey2$/;"	v
s:tab_mid_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_mid_bg = s:palette.bg1$/;"	v
s:tab_mid_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_mid_fg = s:palette.grey1$/;"	v
s:tab_middle_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_middle_bg = s:palette.bg1$/;"	v
s:tab_middle_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_middle_fg = s:palette.grey1$/;"	v
s:tab_mod_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_mod_bg = s:palette.aqua$/;"	v
s:tab_mod_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_mod_fg = s:palette.bg0$/;"	v
s:tab_r_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_r_bg = s:palette.statusline1$/;"	v
s:tab_r_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_r_fg = s:palette.bg0$/;"	v
s:tab_sel_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_sel_bg = s:palette.statusline1$/;"	v
s:tab_sel_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_sel_bg = s:palette.statusline1$/;"	v
s:tab_sel_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_sel_fg = s:palette.bg0$/;"	v
s:tab_sel_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:tab_sel_fg = s:palette.bg0$/;"	v
s:tab_type_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_type_bg = s:palette.orange$/;"	v
s:tab_type_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:tab_type_fg = s:palette.bg0$/;"	v
s:tags_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
s:temp_files	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:temp_scripts	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_scripts = {}$/;"	v
s:tempfile	plugged/validator.vim/autoload/validator.vim	/^let s:tempfile = tempname()$/;"	v
s:tempname	plugged/completor.vim/autoload/completor/utils.vim	/^let s:tempname = ''$/;"	v
s:term_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:term_bg = s:palette.bg1$/;"	v
s:term_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:term_fg = s:palette.grey1$/;"	v
s:term_marker	plugged/fzf/plugin/fzf.vim	/^  let s:term_marker = ";#FZF"$/;"	v
s:term_marker	plugged/fzf/plugin/fzf.vim	/^  let s:term_marker = '&::FZF'$/;"	v
s:terminal	plugged/everforest/colors/everforest.vim	/^  let s:terminal = {$/;"	v
s:terminal_l1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_l1_bg = s:palette.purple$/;"	v
s:terminal_l1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_l1_fg = s:palette.bg0$/;"	v
s:terminal_l2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_l2_bg = s:palette.bg3$/;"	v
s:terminal_l2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_l2_fg = s:palette.grey2$/;"	v
s:terminal_middle_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_middle_bg = s:palette.bg1$/;"	v
s:terminal_middle_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_middle_fg = s:palette.grey1$/;"	v
s:terminal_r1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_r1_bg = s:palette.purple$/;"	v
s:terminal_r1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_r1_fg = s:palette.bg0$/;"	v
s:terminal_r2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_r2_bg = s:palette.bg3$/;"	v
s:terminal_r2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:terminal_r2_fg = s:palette.grey2$/;"	v
s:tex_conceal	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rhelp.vim	/^  let s:tex_conceal = 'gm'$/;"	v
s:tex_conceal	plugged/splitjoin.vim/spec/support/R-Vim-runtime/syntax/rhelp.vim	/^  let s:tex_conceal = g:tex_conceal$/;"	v
s:textobject	plugged/vim-commentary/plugin/commentary.vim	/^function! s:textobject(inner) abort$/;"	f
s:theme_has_hint	plugged/papercolor-theme/colors/PaperColor.vim	/^fun! s:theme_has_hint(hint)$/;"	f
s:themes	plugged/papercolor-theme/colors/PaperColor.vim	/^let s:themes = {}$/;"	v
s:throw	plugged/vim-abolish/plugin/abolish.vim	/^function! s:throw(msg)$/;"	f
s:throw	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:throw(string) abort$/;"	f
s:tick	autoload/plug.vim	/^function! s:tick()$/;"	f
s:tick	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:tick()$/;"	f
s:tick	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:tick()$/;"	f
s:tmux_enabled	plugged/fzf/plugin/fzf.vim	/^function! s:tmux_enabled()$/;"	f
s:to_256	plugged/papercolor-theme/colors/PaperColor.vim	/^  fun! s:to_256(rgb)$/;"	f
s:to_a	autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_a	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_a	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:to_a(v)$/;"	f
s:to_s	autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:to_s	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:to_s	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:to_s(v)$/;"	f
s:trees	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:trees = {}$/;"	v
s:trigger_complete	plugged/completor.vim/autoload/completor/action.vim	/^function! s:trigger_complete(completions)$/;"	f
s:triggers	autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:triggers	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:triggers	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:triggers = get(s:, 'triggers', {})$/;"	v
s:trim	autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:trim	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:trim	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:trim(str)$/;"	f
s:undo_ftplugin	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	plugged/splitjoin.vim/spec/support/vim-elixir/ftplugin/eelixir.vim	/^let s:undo_ftplugin = ""$/;"	v
s:uniline_string_end_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:uniline_string_end_pattern = '\\\\@<!(\\\\\\\\)*\\\\@<!\\1' " https:\/\/stackoverflow.com\//;"	v
s:uniline_string_end_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:uniline_string_end_pattern = '\\\\@<!(\\\\\\\\)*\\\\@<!\\1' " https:\/\/stackoverflow.com\//;"	v
s:uniline_string_end_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:uniline_string_end_pattern = '\\\\@<!(\\\\\\\\)*\\\\@<!\\1' " https:\/\/stackoverflow.com\//;"	v
s:uniline_string_end_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:uniline_string_end_pattern = '\\\\@<!(\\\\\\\\)*\\\\@<!\\1' " https:\/\/stackoverflow.com\//;"	v
s:uniline_string_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:uniline_string_pattern = s:uniline_string_start_pattern . '.{-}' . s:uniline_string_end_pa/;"	v
s:uniline_string_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:uniline_string_pattern = s:uniline_string_start_pattern . '.{-}' . s:uniline_string_end_pa/;"	v
s:uniline_string_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:uniline_string_pattern = s:uniline_string_start_pattern . '.{-}' . s:uniline_string_end_pa/;"	v
s:uniline_string_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:uniline_string_pattern = s:uniline_string_start_pattern . '.{-}' . s:uniline_string_end_pa/;"	v
s:uniline_string_start_pattern	plugged/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:uniline_string_start_pattern = '\\v(''''''|"""|''|")' " triple-quotes first, so that the l/;"	v
s:uniline_string_start_pattern	plugged/vim-coiled-snake/tests/dummy_home/native/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:uniline_string_start_pattern = '\\v(''''''|"""|''|")' " triple-quotes first, so that the l/;"	v
s:uniline_string_start_pattern	plugged/vim-coiled-snake/tests/dummy_home/plug/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:uniline_string_start_pattern = '\\v(''''''|"""|''|")' " triple-quotes first, so that the l/;"	v
s:uniline_string_start_pattern	plugged/vim-coiled-snake/tests/issues/dummy_home_16/.vim/pack/dev/start/vim-coiled-snake/autoload/coiledsnake.vim	/^let s:uniline_string_start_pattern = '\\v(''''''|"""|''|")' " triple-quotes first, so that the l/;"	v
s:unite_source	plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^let s:unite_source = {$/;"	v
s:unite_source	plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^let s:unite_source.action_table.expand = {$/;"	v
s:unite_source	plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^let s:unite_source.action_table.preview = {$/;"	v
s:unite_source.action_table.expand.func	plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^function! s:unite_source.action_table.expand.func(candidate) abort$/;"	f
s:unite_source.action_table.preview.func	plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^function! s:unite_source.action_table.preview.func(candidate) abort$/;"	f
s:unite_source.gather_candidates	plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^function! s:unite_source.gather_candidates(args, context) abort$/;"	f
s:unite_source.get_longest_snippet_len	plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^function! s:unite_source.get_longest_snippet_len(snippet_list) abort$/;"	f
s:unite_source.hooks.on_syntax	plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^function! s:unite_source.hooks.on_syntax(args, context) abort$/;"	f
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/cscope_maps.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/pycscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unknown_coercion	plugged/vim-abolish/plugin/abolish.vim	/^function! s:unknown_coercion(letter,word)$/;"	f
s:unquote_chars	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:unquote_chars = {$/;"	v
s:update	autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:update(force, names)$/;"	f
s:update_finish	autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_finish	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_finish	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:update_finish()$/;"	f
s:update_impl	autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_impl	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_impl	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:update_impl(pull, force, args) abort$/;"	f
s:update_in_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_python	autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_python	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_python	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:update_python()$/;"	f
s:update_queue	plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:update_ruby	autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_ruby	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_ruby	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:update_ruby()$/;"	f
s:update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
s:update_vim	autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:update_vim	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:update_vim	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:update_vim()$/;"	f
s:upgrade	autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:upgrade()$/;"	f
s:upgrade_specs	autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:upgrade_specs	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:upgrade_specs	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:upgrade_specs()$/;"	f
s:uppercase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:uppercase(word)$/;"	f
s:use_sh	plugged/fzf/plugin/fzf.vim	/^function! s:use_sh()$/;"	f
s:validate_layout	plugged/fzf/plugin/fzf.vim	/^function! s:validate_layout(layout)$/;"	f
s:validator_symbol	plugged/validator.vim/plugin/validator.vim	/^let s:validator_symbol = '∙'$/;"	v
s:var	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:var = '\\%(<\\%(cword\\|cWORD\\|cexpr\\|cfile\\|sfile\\|slnum\\|afile\\|abuf\\|amatch' . (/;"	v
s:var_found	plugged/seoul256.vim/colors/seoul256-light.vim	/^let s:var_found = exists('g:seoul256_background')$/;"	v
s:version	plugged/papercolor-theme/colors/PaperColor.vim	/^let s:version = '0.9.x'$/;"	v
s:version_requirement	autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:version_requirement	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:version_requirement(val, min)$/;"	f
s:version_requirement	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:version_requirement	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:version_requirement(val, min)$/;"	f
s:versions	plugged/fzf/plugin/fzf.vim	/^let s:versions = {}$/;"	v
s:vim8	autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim8	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim8	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^let s:vim8 = has('patch-8.0.0039') && exists('*job_start')$/;"	v
s:vim_daemon_handler	plugged/completor.vim/autoload/completor/daemon.vim	/^function! s:vim_daemon_handler(name, msg)$/;"	f
s:vim_oneshot_handler	plugged/completor.vim/autoload/completor/compat.vim	/^function! s:vim_oneshot_handler(ch)$/;"	f
s:visible	plugged/completor.vim/autoload/completor/popup.vim	/^let s:visible = v:false$/;"	v
s:visual_l1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_l1_bg = s:palette.statusline3$/;"	v
s:visual_l1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_l1_fg = s:palette.bg0$/;"	v
s:visual_l2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_l2_bg = s:palette.bg3$/;"	v
s:visual_l2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_l2_fg = s:palette.grey2$/;"	v
s:visual_mid_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_mid_bg = s:palette.bg1$/;"	v
s:visual_mid_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_mid_fg = s:palette.grey1$/;"	v
s:visual_middle_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_middle_bg = s:palette.bg1$/;"	v
s:visual_middle_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_middle_fg = s:palette.grey1$/;"	v
s:visual_mod_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_mod_bg = s:palette.bg1$/;"	v
s:visual_mod_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_mod_fg = s:palette.red$/;"	v
s:visual_r1_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_r1_bg = s:palette.statusline3$/;"	v
s:visual_r1_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_r1_fg = s:palette.bg0$/;"	v
s:visual_r2_bg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_r2_bg = s:palette.bg3$/;"	v
s:visual_r2_fg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:visual_r2_fg = s:palette.grey2$/;"	v
s:visual_side_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_side_bg = s:palette.statusline3$/;"	v
s:visual_side_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_side_fg = s:palette.bg0$/;"	v
s:visual_sub_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_sub_bg = s:palette.bg3$/;"	v
s:visual_sub_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:visual_sub_fg = s:palette.grey2$/;"	v
s:warn	autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:warn	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
s:warn	plugged/fzf/plugin/fzf.vim	/^function! s:warn(msg)$/;"	f
s:warn	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:warn	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:warn(cmd, msg)$/;"	f
s:warned	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:warned = 0$/;"	v
s:warned	plugged/fzf/plugin/fzf.vim	/^let s:warned = 0$/;"	v
s:warning_bg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:warning_bg = s:palette.yellow$/;"	v
s:warning_fg	plugged/everforest/autoload/airline/themes/everforest.vim	/^let s:warning_fg = s:palette.bg0$/;"	v
s:warningbg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:warningbg = s:palette.yellow$/;"	v
s:warningfg	plugged/everforest/autoload/lightline/colorscheme/everforest.vim	/^let s:warningfg = s:palette.bg0$/;"	v
s:wide	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
s:width	plugged/validator.vim/autoload/validator.vim	/^let s:width = 16$/;"	v
s:wildignores_options_path	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:windows_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
s:winpath	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:winpath(path)$/;"	f
s:winpath	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:winpath = {}$/;"	v
s:winshell	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:winshell() abort$/;"	f
s:withIndentation	plugged/splitjoin.vim/autoload/sj/html.vim	/^function! s:withIndentation(str, indent)$/;"	f
s:with_cd	autoload/plug.vim	/^function! s:with_cd(cmd, dir, ...)$/;"	f
s:with_cd	plugged/vim-coiled-snake/tests/dummy_home/plug/.config/nvim/autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
s:with_cd	plugged/vim-coiled-snake/tests/dummy_home/plug/.vim/autoload/plug.vim	/^function! s:with_cd(cmd, dir)$/;"	f
s:words	plugged/vim-abolish/plugin/abolish.vim	/^function! s:words()$/;"	f
s:worktree_error	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:worktree_error = "core.worktree is required when using an external Git dir"$/;"	v
s:worktree_for_dir	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
s:wrap	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
s:wrap	plugged/vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,removed,special)$/;"	f
s:wrap_cmds	autoload/plug.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:wrap_cmds	plugged/fzf/plugin/fzf.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:wrapreg	plugged/vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,removed,special)$/;"	f
s:write_triggered_update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
s:writefile	plugged/fzf/plugin/fzf.vim	/^function! s:writefile(...)$/;"	f
s:xterm_launcher	plugged/fzf/plugin/fzf.vim	/^function! s:xterm_launcher()$/;"	f
s:yank_to_register	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
s:z	plugged/splitjoin.vim/spec/support/vim-javascript/indent/javascript.vim	/^let s:z = has('patch-7.4.984') ? 'z' : ''$/;"	v
sameContentLayout	plugged/fzf/src/options.go	/^func (a previewOpts) sameContentLayout(b previewOpts) bool {$/;"	f	struct:fzf.previewOpts	typeref:typename:bool
sameLayout	plugged/fzf/src/options.go	/^func (a previewOpts) sameLayout(b previewOpts) bool {$/;"	f	struct:fzf.previewOpts	typeref:typename:bool
sanitize	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^def sanitize(menu):$/;"	f
save	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def save(self, *args, **kwargs):$/;"	m	class:BugJobMap
save	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def save(self, *args, **kwargs):$/;"	m	class:Job
save	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def save(self, *args, **kwargs):$/;"	m	class:JobNote
save_mark	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def save_mark(name):$/;"	f
save_request	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def save_request(self):$/;"	m	class:Lsp
scale	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    scale <- fill <- discrete()$/;"	g
scale	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    scale <- fill <- discrete()$/;"	g
scan	plugged/fzf/src/matcher.go	/^func (m *Matcher) scan(request MatchRequest) (*Merger, bool) {$/;"	f	struct:fzf.Matcher	typeref:typename:(*Merger, bool)
score	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    score = models.DecimalField(max_digits=3, decimal_places=2, blank=True, null=True)$/;"	v	class:TextLogErrorMatch
scoreGapExtension	plugged/fzf/src/algo/algo.go	/^	scoreGapExtension = -1$/;"	c	package:algo
scoreGapStart	plugged/fzf/src/algo/algo.go	/^	scoreGapStart     = -3$/;"	c	package:algo
scoreMatch	plugged/fzf/src/algo/algo.go	/^	scoreMatch        = 16$/;"	c	package:algo
scroll	plugged/fzf/src/options.go	/^	scroll      string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
scrollOff	plugged/fzf/src/terminal.go	/^	scrollOff          int$/;"	m	struct:fzf.Terminal	typeref:typename:int
scrollOffset	plugged/fzf/src/terminal.go	/^	scrollOffset int$/;"	m	struct:fzf.previewRequest	typeref:typename:int
scrollable	plugged/fzf/src/terminal.go	/^	scrollable bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
scrollbar	plugged/fzf/src/terminal.go	/^	scrollbar          string$/;"	m	struct:fzf.Terminal	typeref:typename:string
scss	plugged/splitjoin.vim/spec/plugin/scss_spec.rb	/^describe "scss" do$/;"	d
search	plugged/completor.vim/pythonx/completers/common/buffer.py	/^    def search(self, base):$/;"	m	class:TokenStore
search	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def search(cls, search_term):$/;"	m	class:Bugscache
searchRequest	plugged/fzf/src/terminal.go	/^type searchRequest struct {$/;"	s	package:fzf
select	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def select(start, end):$/;"	f
selectItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) selectItem(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
selectItemChanged	plugged/fzf/src/terminal.go	/^func (t *Terminal) selectItemChanged(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
select_count	plugged/fzf/test/test_go.rb	/^          def select_count$/;"	f	method:Tmux.until
select_next_tab	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^    def select_next_tab(self, jump_direction: JumpDirection):$/;"	m	class:SnippetInstance
selected	plugged/fzf/src/terminal.go	/^	selected           map[int32]selectedItem$/;"	m	struct:fzf.Terminal	typeref:typename:map[int32]selectedItem
selected	plugged/fzf/src/terminal.go	/^	selected  bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
selectedItem	plugged/fzf/src/terminal.go	/^type selectedItem struct {$/;"	s	package:fzf
self-closing tags	plugged/splitjoin.vim/spec/plugin/jsx_spec.rb	/^  describe "self-closing tags" do$/;"	d
send	plugged/ultisnips/test/vim_interface.py	/^    def send(self, keys):$/;"	m	class:VimInterfaceWindows
send_config	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def send_config(self):$/;"	m	class:Lsp
send_keys	plugged/fzf/test/test_go.rb	/^  def send_keys(*args)$/;"	f	class:Tmux
send_to_terminal	plugged/ultisnips/test/vim_interface.py	/^    def send_to_terminal(self, s):$/;"	m	class:VimInterface
send_to_terminal	plugged/ultisnips/test/vim_interface.py	/^    def send_to_terminal(self, s):$/;"	m	class:VimInterfaceTmux
send_to_vim	plugged/ultisnips/test/vim_interface.py	/^    def send_to_vim(self, s):$/;"	m	class:VimInterface
send_to_vim	plugged/ultisnips/test/vim_interface.py	/^    def send_to_vim(self, s):$/;"	m	class:VimInterfaceTmux
send_to_vim	plugged/ultisnips/test/vim_interface.py	/^    def send_to_vim(self, s):$/;"	m	class:VimInterfaceTmuxNeovim
seoul256	plugged/seoul256.vim/README.md	/^### seoul256$/;"	S	section:seoul256.vim ![travis-ci](https://travis-ci.org/junegunn/seoul256.vim.svg?branch=master)
seoul256 (light version)	plugged/seoul256.vim/README.md	/^### seoul256 (light version)$/;"	S	section:seoul256.vim ![travis-ci](https://travis-ci.org/junegunn/seoul256.vim.svg?branch=master)
seoul256.vim ![travis-ci](https://travis-ci.org/junegunn/seoul256.vim.svg?branch=master)	plugged/seoul256.vim/README.md	/^seoul256.vim ![travis-ci](https:\/\/travis-ci.org\/junegunn\/seoul256.vim.svg?branch=master)$/;"	s
separator	plugged/fzf/src/terminal.go	/^	separator          labelPrinter$/;"	m	struct:fzf.Terminal	typeref:typename:labelPrinter
separatorLen	plugged/fzf/src/terminal.go	/^	separatorLen       int$/;"	m	struct:fzf.Terminal	typeref:typename:int
serverInputChan	plugged/fzf/src/terminal.go	/^	serverInputChan    chan []*action$/;"	m	struct:fzf.Terminal	typeref:typename:chan []*action
set	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def set(self, line, column):$/;"	m	class:_SnippetUtilCursor
setBg	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) setBg() string {$/;"	f	struct:tui.LightWindow	typeref:typename:string
setUp	plugged/ultisnips/test/vim_test_case.py	/^    def setUp(self):$/;"	m	class:VimTestCase
set_bug	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def set_bug(self, bug_number):$/;"	m	class:ClassifiedFailure
set_current_completer	plugged/completor.vim/pythonx/completor/__init__.py	/^def set_current_completer(comp):$/;"	f
set_cursor_from_pos	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def set_cursor_from_pos(pos):$/;"	f
set_file_contents	plugged/splitjoin.vim/spec/support/vim.rb	/^    def set_file_contents(string)$/;"	f	module:Support.Vim
set_hair	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^    set_hair = function(val) {$/;"	m	class:Person	constructor:function
set_mark_from_pos	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def set_mark_from_pos(name, pos):$/;"	f
set_name	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def set_name(self, name):$/;"	m	class:Rename
set_quit	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^            def set_quit(self):$/;"	m	class:RemotePDB.start_server.Pdb
set_server_cmd	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def set_server_cmd(self, cmd):$/;"	m	class:Lsp
set_trace	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^    def set_trace(self, frame):$/;"	m	class:RemotePDB
set_var	plugged/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	class:TestFish
set_var	plugged/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	module:TestShell
settings	plugged/splitjoin.vim/spec/plugin/settings_spec.rb	/^describe "settings" do$/;"	d
setup	plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestBase
setup	plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestGoFZF
setup	plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	module:TestShell
setupTerminal	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) setupTerminal() {$/;"	f	unknown:tui.LightRenderer
setupTerminal	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) setupTerminal() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
setup_coffee_filetype	plugged/splitjoin.vim/spec/plugin/coffee_spec.rb	/^  def setup_coffee_filetype$/;"	f
setup_filetype	plugged/splitjoin.vim/spec/plugin/jsx_spec.rb	/^  def setup_filetype$/;"	f
setup_haml_filetype	plugged/splitjoin.vim/spec/plugin/haml_spec.rb	/^  def setup_haml_filetype$/;"	f
setup_handlebars_filetype	plugged/splitjoin.vim/spec/plugin/handlebars_spec.rb	/^  def setup_handlebars_filetype$/;"	f
setup_other_plugins	plugged/ultisnips/test_all.py	/^def setup_other_plugins(all_plugins):$/;"	f
sh	plugged/fzf/src/proxy_unix.go	/^func sh() (string, error) {$/;"	f	package:fzf	typeref:typename:(string, error)
sh	plugged/fzf/src/proxy_windows.go	/^func sh() (string, error) {$/;"	f	package:fzf	typeref:typename:(string, error)
sh	plugged/splitjoin.vim/spec/plugin/sh_spec.rb	/^describe "sh" do$/;"	d
shPath	plugged/fzf/src/proxy_windows.go	/^var shPath atomic.Value$/;"	v	package:fzf	typeref:typename:atomic.Value
shape	plugged/fzf/src/tui/tui.go	/^	shape       BorderShape$/;"	m	struct:tui.BorderStyle	typeref:typename:BorderShape
shell	plugged/completor.vim/README.md	/^#### shell$/;"	t	section:Completor""Completers
shell	plugged/fzf/src/util/util_unix.go	/^	shell   string$/;"	m	struct:util.Executor	typeref:typename:string
shell	plugged/fzf/src/util/util_windows.go	/^	shell     string$/;"	m	struct:util.Executor	typeref:typename:string
shell	plugged/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestBash
shell	plugged/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestFish
shell	plugged/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestZsh
shellPath	plugged/fzf/src/util/util_windows.go	/^	shellPath atomic.Value$/;"	m	struct:util.Executor	typeref:typename:atomic.Value
shellType	plugged/fzf/src/util/util_windows.go	/^	shellType shellType$/;"	m	struct:util.Executor	typeref:typename:shellType
shellType	plugged/fzf/src/util/util_windows.go	/^type shellType int$/;"	t	package:util	typeref:typename:int
shellTypeCmd	plugged/fzf/src/util/util_windows.go	/^	shellTypeCmd$/;"	c	package:util
shellTypePowerShell	plugged/fzf/src/util/util_windows.go	/^	shellTypePowerShell$/;"	c	package:util
shellTypeUnknown	plugged/fzf/src/util/util_windows.go	/^	shellTypeUnknown shellType = iota$/;"	c	package:util	typeref:type:shellType
shell_in_repro	plugged/ultisnips/Makefile	/^shell_in_repro:$/;"	t
shift	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def shift(self, amount=1):$/;"	m	class:SnippetUtil
sign_in	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/variable_spec.rb	/^    def sign_in(conn, %{$/;"	f
signature	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    signature = models.CharField(max_length=50, db_index=True)$/;"	v	class:ReferenceDataSignatures
signature	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    signature = models.ForeignKey(ReferenceDataSignatures, on_delete=models.CASCADE)$/;"	v	class:Job
signature	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    signature = models.TextField(blank=True, null=True)$/;"	v	class:FailureLine
sigstop	plugged/fzf/src/terminal.go	/^	sigstop            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
simple_test	plugged/splitjoin.vim/spec/plugin/html_spec.rb	/^  def simple_test(joined_html, split_html)$/;"	f
singleton	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^    singleton = None$/;"	v	class:RemotePDB
size	plugged/fzf/src/options.go	/^	size        sizeSpec$/;"	m	struct:fzf.previewOpts	typeref:typename:sizeSpec
size	plugged/fzf/src/options.go	/^	size    float64$/;"	m	struct:fzf.heightSpec	typeref:typename:float64
size	plugged/fzf/src/options.go	/^	size    float64$/;"	m	struct:fzf.sizeSpec	typeref:typename:float64
sizeSpec	plugged/fzf/src/options.go	/^type sizeSpec struct {$/;"	s	package:fzf
sj#Align	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#Align(from, to, type)$/;"	f
sj#BlankString	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#BlankString(s)$/;"	f
sj#ColBetween	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#ColBetween(col, start, end)$/;"	f
sj#CompressWhitespaceOnLine	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#CompressWhitespaceOnLine()$/;"	f
sj#CursorBetween	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#CursorBetween(start, end)$/;"	f
sj#DropCursor	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#DropCursor()$/;"	f
sj#ExtractRx	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#ExtractRx(expr, pat, sub)$/;"	f
sj#GetByPosition	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#GetByPosition(start, end)$/;"	f
sj#GetCols	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#GetCols(start, end)$/;"	f
sj#GetLines	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#GetLines(start, end)$/;"	f
sj#GetMotion	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#GetMotion(motion)$/;"	f
sj#IncludeSyntax	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#IncludeSyntax(syntax_groups)$/;"	f
sj#Join	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#Join()$/;"	f
sj#JumpBracketsTill	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#JumpBracketsTill(end_pattern, brackets)$/;"	f
sj#Keeppatterns	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#Keeppatterns(command)$/;"	f
sj#LocateBracesAroundCursor	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#LocateBracesAroundCursor(open, close, ...)$/;"	f
sj#LocateBracesOnLine	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#LocateBracesOnLine(open, close, ...)$/;"	f
sj#Ltrim	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#Ltrim(s)$/;"	f
sj#ParseJsonObjectBody	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#ParseJsonObjectBody(from, to)$/;"	f
sj#PeekCursor	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#PeekCursor()$/;"	f
sj#PopCursor	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#PopCursor()$/;"	f
sj#PushCursor	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#PushCursor()$/;"	f
sj#RemoveBlanks	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#RemoveBlanks(list)$/;"	f
sj#ReplaceByPosition	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#ReplaceByPosition(start, end, text)$/;"	f
sj#ReplaceCols	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#ReplaceCols(start, end, text)$/;"	f
sj#ReplaceLines	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#ReplaceLines(start, end, text)$/;"	f
sj#ReplaceMotion	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#ReplaceMotion(motion, text)$/;"	f
sj#Rtrim	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#Rtrim(s)$/;"	f
sj#SearchColsUnderCursor	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#SearchColsUnderCursor(pattern, ...)$/;"	f
sj#SearchSkip	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#SearchSkip(pattern, skip, ...)$/;"	f
sj#SearchUnderCursor	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#SearchUnderCursor(pattern, ...)$/;"	f
sj#SetIndent	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#SetIndent(...)$/;"	f
sj#SkipSyntax	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#SkipSyntax(syntax_groups)$/;"	f
sj#Split	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#Split()$/;"	f
sj#Trim	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#Trim(s)$/;"	f
sj#TrimList	plugged/splitjoin.vim/autoload/sj.vim	/^function! sj#TrimList(list)$/;"	f
sj#argparser#clojure#Construct	plugged/splitjoin.vim/autoload/sj/argparser/clojure.vim	/^function! sj#argparser#clojure#Construct(start_index, end_index, line)$/;"	f
sj#argparser#clojure#Process	plugged/splitjoin.vim/autoload/sj/argparser/clojure.vim	/^function! sj#argparser#clojure#Process() dict$/;"	f
sj#argparser#common#AtFunctionEnd	plugged/splitjoin.vim/autoload/sj/argparser/common.vim	/^function! sj#argparser#common#AtFunctionEnd() dict$/;"	f
sj#argparser#common#Construct	plugged/splitjoin.vim/autoload/sj/argparser/common.vim	/^function! sj#argparser#common#Construct(start_column, end_column, line)$/;"	f
sj#argparser#common#Finished	plugged/splitjoin.vim/autoload/sj/argparser/common.vim	/^function! sj#argparser#common#Finished() dict$/;"	f
sj#argparser#common#JumpPair	plugged/splitjoin.vim/autoload/sj/argparser/common.vim	/^function! sj#argparser#common#JumpPair(start_chars, end_chars) dict$/;"	f
sj#argparser#common#LocateRubylikeFunction	plugged/splitjoin.vim/autoload/sj/argparser/common.vim	/^function! sj#argparser#common#LocateRubylikeFunction(keyword_pattern, syntax_groups)$/;"	f
sj#argparser#common#Next	plugged/splitjoin.vim/autoload/sj/argparser/common.vim	/^function! sj#argparser#common#Next() dict$/;"	f
sj#argparser#common#Process	plugged/splitjoin.vim/autoload/sj/argparser/common.vim	/^function! sj#argparser#common#Process() dict$/;"	f
sj#argparser#common#PushArg	plugged/splitjoin.vim/autoload/sj/argparser/common.vim	/^function! sj#argparser#common#PushArg() dict$/;"	f
sj#argparser#common#PushChar	plugged/splitjoin.vim/autoload/sj/argparser/common.vim	/^function! sj#argparser#common#PushChar() dict$/;"	f
sj#argparser#elixir#Construct	plugged/splitjoin.vim/autoload/sj/argparser/elixir.vim	/^function! sj#argparser#elixir#Construct(start_index, end_index, line)$/;"	f
sj#argparser#elixir#LocateFunction	plugged/splitjoin.vim/autoload/sj/argparser/elixir.vim	/^function! sj#argparser#elixir#LocateFunction()$/;"	f
sj#argparser#elixir#Process	plugged/splitjoin.vim/autoload/sj/argparser/elixir.vim	/^function! sj#argparser#elixir#Process() dict$/;"	f
sj#argparser#go_vars#Construct	plugged/splitjoin.vim/autoload/sj/argparser/go_vars.vim	/^function! sj#argparser#go_vars#Construct(line)$/;"	f
sj#argparser#go_vars#Process	plugged/splitjoin.vim/autoload/sj/argparser/go_vars.vim	/^function! sj#argparser#go_vars#Process() dict$/;"	f
sj#argparser#html_args#Construct	plugged/splitjoin.vim/autoload/sj/argparser/html_args.vim	/^function! sj#argparser#html_args#Construct(start_index, end_index, line)$/;"	f
sj#argparser#html_args#Process	plugged/splitjoin.vim/autoload/sj/argparser/html_args.vim	/^function! sj#argparser#html_args#Process() dict$/;"	f
sj#argparser#js#Construct	plugged/splitjoin.vim/autoload/sj/argparser/js.vim	/^function! sj#argparser#js#Construct(start_index, end_index, line)$/;"	f
sj#argparser#js#Process	plugged/splitjoin.vim/autoload/sj/argparser/js.vim	/^function! sj#argparser#js#Process() dict$/;"	f
sj#argparser#json#Construct	plugged/splitjoin.vim/autoload/sj/argparser/json.vim	/^function! sj#argparser#json#Construct(start_index, end_index, line)$/;"	f
sj#argparser#json#Process	plugged/splitjoin.vim/autoload/sj/argparser/json.vim	/^function! sj#argparser#json#Process() dict$/;"	f
sj#argparser#ruby#AtFunctionEnd	plugged/splitjoin.vim/autoload/sj/argparser/ruby.vim	/^function! sj#argparser#ruby#AtFunctionEnd() dict$/;"	f
sj#argparser#ruby#Construct	plugged/splitjoin.vim/autoload/sj/argparser/ruby.vim	/^function! sj#argparser#ruby#Construct(start_index, end_index, line)$/;"	f
sj#argparser#ruby#ExpandOptionHash	plugged/splitjoin.vim/autoload/sj/argparser/ruby.vim	/^function! sj#argparser#ruby#ExpandOptionHash() dict$/;"	f
sj#argparser#ruby#LocateFunction	plugged/splitjoin.vim/autoload/sj/argparser/ruby.vim	/^function! sj#argparser#ruby#LocateFunction()$/;"	f
sj#argparser#ruby#LocateHash	plugged/splitjoin.vim/autoload/sj/argparser/ruby.vim	/^function! sj#argparser#ruby#LocateHash()$/;"	f
sj#argparser#ruby#MarkOptionArg	plugged/splitjoin.vim/autoload/sj/argparser/ruby.vim	/^function! sj#argparser#ruby#MarkOptionArg(type) dict$/;"	f
sj#argparser#ruby#ParseArguments	plugged/splitjoin.vim/autoload/sj/argparser/ruby.vim	/^function! sj#argparser#ruby#ParseArguments(start_index, end_index, line, options)$/;"	f
sj#argparser#ruby#Process	plugged/splitjoin.vim/autoload/sj/argparser/ruby.vim	/^function! sj#argparser#ruby#Process() dict$/;"	f
sj#argparser#ruby#PushArg	plugged/splitjoin.vim/autoload/sj/argparser/ruby.vim	/^function! sj#argparser#ruby#PushArg() dict$/;"	f
sj#argparser#rust_list#Construct	plugged/splitjoin.vim/autoload/sj/argparser/rust_list.vim	/^function! sj#argparser#rust_list#Construct(type, start_index, end_index, line)$/;"	f
sj#argparser#rust_list#Process	plugged/splitjoin.vim/autoload/sj/argparser/rust_list.vim	/^function! sj#argparser#rust_list#Process() dict$/;"	f
sj#argparser#rust_struct#Construct	plugged/splitjoin.vim/autoload/sj/argparser/rust_struct.vim	/^function! sj#argparser#rust_struct#Construct(start_index, end_index, line)$/;"	f
sj#argparser#rust_struct#IsOnlyStructPairs	plugged/splitjoin.vim/autoload/sj/argparser/rust_struct.vim	/^function! sj#argparser#rust_struct#IsOnlyStructPairs() dict$/;"	f
sj#argparser#rust_struct#IsValidStruct	plugged/splitjoin.vim/autoload/sj/argparser/rust_struct.vim	/^function! sj#argparser#rust_struct#IsValidStruct() dict$/;"	f
sj#argparser#rust_struct#Process	plugged/splitjoin.vim/autoload/sj/argparser/rust_struct.vim	/^function! sj#argparser#rust_struct#Process() dict$/;"	f
sj#argparser#rust_struct#PushArg	plugged/splitjoin.vim/autoload/sj/argparser/rust_struct.vim	/^function! sj#argparser#rust_struct#PushArg() dict$/;"	f
sj#argparser#sh#Construct	plugged/splitjoin.vim/autoload/sj/argparser/sh.vim	/^function! sj#argparser#sh#Construct(start_index, end_index, line)$/;"	f
sj#argparser#sh#Process	plugged/splitjoin.vim/autoload/sj/argparser/sh.vim	/^function! sj#argparser#sh#Process() dict$/;"	f
sj#c#JoinFuncall	plugged/splitjoin.vim/autoload/sj/c.vim	/^function! sj#c#JoinFuncall()$/;"	f
sj#c#JoinIfClause	plugged/splitjoin.vim/autoload/sj/c.vim	/^function! sj#c#JoinIfClause()$/;"	f
sj#c#SplitFuncall	plugged/splitjoin.vim/autoload/sj/c.vim	/^function! sj#c#SplitFuncall()$/;"	f
sj#c#SplitIfClause	plugged/splitjoin.vim/autoload/sj/c.vim	/^function! sj#c#SplitIfClause()$/;"	f
sj#clojure#JoinList	plugged/splitjoin.vim/autoload/sj/clojure.vim	/^function! sj#clojure#JoinList()$/;"	f
sj#clojure#SplitList	plugged/splitjoin.vim/autoload/sj/clojure.vim	/^function! sj#clojure#SplitList()$/;"	f
sj#coffee#JoinFunction	plugged/splitjoin.vim/autoload/sj/coffee.vim	/^function! sj#coffee#JoinFunction()$/;"	f
sj#coffee#JoinIfClause	plugged/splitjoin.vim/autoload/sj/coffee.vim	/^function! sj#coffee#JoinIfClause()$/;"	f
sj#coffee#JoinIfElseClause	plugged/splitjoin.vim/autoload/sj/coffee.vim	/^function! sj#coffee#JoinIfElseClause()$/;"	f
sj#coffee#JoinObjectLiteral	plugged/splitjoin.vim/autoload/sj/coffee.vim	/^function! sj#coffee#JoinObjectLiteral()$/;"	f
sj#coffee#JoinString	plugged/splitjoin.vim/autoload/sj/coffee.vim	/^function! sj#coffee#JoinString()$/;"	f
sj#coffee#SplitFunction	plugged/splitjoin.vim/autoload/sj/coffee.vim	/^function! sj#coffee#SplitFunction()$/;"	f
sj#coffee#SplitIfClause	plugged/splitjoin.vim/autoload/sj/coffee.vim	/^function! sj#coffee#SplitIfClause()$/;"	f
sj#coffee#SplitObjectLiteral	plugged/splitjoin.vim/autoload/sj/coffee.vim	/^function! sj#coffee#SplitObjectLiteral()$/;"	f
sj#coffee#SplitString	plugged/splitjoin.vim/autoload/sj/coffee.vim	/^function! sj#coffee#SplitString()$/;"	f
sj#coffee#SplitTernaryClause	plugged/splitjoin.vim/autoload/sj/coffee.vim	/^function! sj#coffee#SplitTernaryClause()$/;"	f
sj#coffee#SplitTripleString	plugged/splitjoin.vim/autoload/sj/coffee.vim	/^function! sj#coffee#SplitTripleString()$/;"	f
sj#css#JoinDefinition	plugged/splitjoin.vim/autoload/sj/css.vim	/^function! sj#css#JoinDefinition()$/;"	f
sj#css#JoinMultilineSelector	plugged/splitjoin.vim/autoload/sj/css.vim	/^function! sj#css#JoinMultilineSelector()$/;"	f
sj#css#SplitDefinition	plugged/splitjoin.vim/autoload/sj/css.vim	/^function! sj#css#SplitDefinition()$/;"	f
sj#css#SplitMultilineSelector	plugged/splitjoin.vim/autoload/sj/css.vim	/^function! sj#css#SplitMultilineSelector()$/;"	f
sj#cue#JoinArgs	plugged/splitjoin.vim/autoload/sj/cue.vim	/^function! sj#cue#JoinArgs()$/;"	f
sj#cue#JoinArray	plugged/splitjoin.vim/autoload/sj/cue.vim	/^function! sj#cue#JoinArray()$/;"	f
sj#cue#JoinStructLiteral	plugged/splitjoin.vim/autoload/sj/cue.vim	/^function! sj#cue#JoinStructLiteral()$/;"	f
sj#cue#SplitArgs	plugged/splitjoin.vim/autoload/sj/cue.vim	/^function! sj#cue#SplitArgs()$/;"	f
sj#cue#SplitArray	plugged/splitjoin.vim/autoload/sj/cue.vim	/^function! sj#cue#SplitArray()$/;"	f
sj#cue#SplitImports	plugged/splitjoin.vim/autoload/sj/cue.vim	/^function! sj#cue#SplitImports()$/;"	f
sj#cue#SplitStructLiteral	plugged/splitjoin.vim/autoload/sj/cue.vim	/^function! sj#cue#SplitStructLiteral()$/;"	f
sj#elixir#JoinArray	plugged/splitjoin.vim/autoload/sj/elixir.vim	/^function! sj#elixir#JoinArray()$/;"	f
sj#elixir#JoinCommaDelimitedItems	plugged/splitjoin.vim/autoload/sj/elixir.vim	/^function! sj#elixir#JoinCommaDelimitedItems()$/;"	f
sj#elixir#JoinDoBlock	plugged/splitjoin.vim/autoload/sj/elixir.vim	/^function! sj#elixir#JoinDoBlock()$/;"	f
sj#elixir#JoinPipe	plugged/splitjoin.vim/autoload/sj/elixir.vim	/^function! sj#elixir#JoinPipe()$/;"	f
sj#elixir#SplitArray	plugged/splitjoin.vim/autoload/sj/elixir.vim	/^function! sj#elixir#SplitArray()$/;"	f
sj#elixir#SplitDoBlock	plugged/splitjoin.vim/autoload/sj/elixir.vim	/^function! sj#elixir#SplitDoBlock()$/;"	f
sj#elixir#SplitPipe	plugged/splitjoin.vim/autoload/sj/elixir.vim	/^function! sj#elixir#SplitPipe()$/;"	f
sj#elm#JoinBraces	plugged/splitjoin.vim/autoload/sj/elm.vim	/^function! sj#elm#JoinBraces()$/;"	f
sj#elm#SplitBraces	plugged/splitjoin.vim/autoload/sj/elm.vim	/^function! sj#elm#SplitBraces()$/;"	f
sj#eruby#JoinIfClause	plugged/splitjoin.vim/autoload/sj/eruby.vim	/^function! sj#eruby#JoinIfClause()$/;"	f
sj#eruby#SplitHtmlAttributes	plugged/splitjoin.vim/autoload/sj/eruby.vim	/^function! sj#eruby#SplitHtmlAttributes()$/;"	f
sj#eruby#SplitHtmlTags	plugged/splitjoin.vim/autoload/sj/eruby.vim	/^function! sj#eruby#SplitHtmlTags()$/;"	f
sj#eruby#SplitIfClause	plugged/splitjoin.vim/autoload/sj/eruby.vim	/^function! sj#eruby#SplitIfClause()$/;"	f
sj#go#JoinFuncCallOrDefinition	plugged/splitjoin.vim/autoload/sj/go.vim	/^function! sj#go#JoinFuncCallOrDefinition()$/;"	f
sj#go#JoinImports	plugged/splitjoin.vim/autoload/sj/go.vim	/^function! sj#go#JoinImports()$/;"	f
sj#go#JoinSingleLineFunctionBody	plugged/splitjoin.vim/autoload/sj/go.vim	/^function! sj#go#JoinSingleLineFunctionBody()$/;"	f
sj#go#JoinStruct	plugged/splitjoin.vim/autoload/sj/go.vim	/^function! sj#go#JoinStruct()$/;"	f
sj#go#JoinStructDeclaration	plugged/splitjoin.vim/autoload/sj/go.vim	/^function! sj#go#JoinStructDeclaration()$/;"	f
sj#go#JoinVars	plugged/splitjoin.vim/autoload/sj/go.vim	/^function! sj#go#JoinVars() abort$/;"	f
sj#go#SplitFunc	plugged/splitjoin.vim/autoload/sj/go.vim	/^function! sj#go#SplitFunc()$/;"	f
sj#go#SplitFuncCall	plugged/splitjoin.vim/autoload/sj/go.vim	/^function! sj#go#SplitFuncCall()$/;"	f
sj#go#SplitImports	plugged/splitjoin.vim/autoload/sj/go.vim	/^function! sj#go#SplitImports()$/;"	f
sj#go#SplitSingleLineCurlyBracketBlock	plugged/splitjoin.vim/autoload/sj/go.vim	/^function! sj#go#SplitSingleLineCurlyBracketBlock()$/;"	f
sj#go#SplitStruct	plugged/splitjoin.vim/autoload/sj/go.vim	/^function! sj#go#SplitStruct()$/;"	f
sj#go#SplitVars	plugged/splitjoin.vim/autoload/sj/go.vim	/^function! sj#go#SplitVars() abort$/;"	f
sj#haml#JoinInterpolation	plugged/splitjoin.vim/autoload/sj/haml.vim	/^function! sj#haml#JoinInterpolation()$/;"	f
sj#haml#JoinToInlineInterpolation	plugged/splitjoin.vim/autoload/sj/haml.vim	/^function! sj#haml#JoinToInlineInterpolation()$/;"	f
sj#haml#SplitInlineInterpolation	plugged/splitjoin.vim/autoload/sj/haml.vim	/^function! sj#haml#SplitInlineInterpolation()$/;"	f
sj#haml#SplitInterpolation	plugged/splitjoin.vim/autoload/sj/haml.vim	/^function! sj#haml#SplitInterpolation()$/;"	f
sj#handlebars#JoinBlockComponent	plugged/splitjoin.vim/autoload/sj/handlebars.vim	/^function! sj#handlebars#JoinBlockComponent()$/;"	f
sj#handlebars#JoinComponent	plugged/splitjoin.vim/autoload/sj/handlebars.vim	/^function! sj#handlebars#JoinComponent()$/;"	f
sj#handlebars#SplitBlockComponent	plugged/splitjoin.vim/autoload/sj/handlebars.vim	/^function! sj#handlebars#SplitBlockComponent()$/;"	f
sj#handlebars#SplitComponent	plugged/splitjoin.vim/autoload/sj/handlebars.vim	/^function! sj#handlebars#SplitComponent()$/;"	f
sj#html#JoinAttributes	plugged/splitjoin.vim/autoload/sj/html.vim	/^function! sj#html#JoinAttributes()$/;"	f
sj#html#JoinTags	plugged/splitjoin.vim/autoload/sj/html.vim	/^function! sj#html#JoinTags()$/;"	f
sj#html#SplitAttributes	plugged/splitjoin.vim/autoload/sj/html.vim	/^function! sj#html#SplitAttributes()$/;"	f
sj#html#SplitTags	plugged/splitjoin.vim/autoload/sj/html.vim	/^function! sj#html#SplitTags()$/;"	f
sj#java#JoinFuncall	plugged/splitjoin.vim/autoload/sj/java.vim	/^function! sj#java#JoinFuncall()$/;"	f
sj#java#JoinIfClauseBody	plugged/splitjoin.vim/autoload/sj/java.vim	/^function! sj#java#JoinIfClauseBody()$/;"	f
sj#java#JoinIfClauseCondition	plugged/splitjoin.vim/autoload/sj/java.vim	/^function! sj#java#JoinIfClauseCondition()$/;"	f
sj#java#JoinLambda	plugged/splitjoin.vim/autoload/sj/java.vim	/^function! sj#java#JoinLambda()$/;"	f
sj#java#SplitFuncall	plugged/splitjoin.vim/autoload/sj/java.vim	/^function! sj#java#SplitFuncall()$/;"	f
sj#java#SplitIfClauseBody	plugged/splitjoin.vim/autoload/sj/java.vim	/^function! sj#java#SplitIfClauseBody()$/;"	f
sj#java#SplitIfClauseCondition	plugged/splitjoin.vim/autoload/sj/java.vim	/^function! sj#java#SplitIfClauseCondition()$/;"	f
sj#java#SplitLambda	plugged/splitjoin.vim/autoload/sj/java.vim	/^function! sj#java#SplitLambda()$/;"	f
sj#js#JoinArgs	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! sj#js#JoinArgs()$/;"	f
sj#js#JoinArray	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! sj#js#JoinArray()$/;"	f
sj#js#JoinFatArrowFunction	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! sj#js#JoinFatArrowFunction()$/;"	f
sj#js#JoinFunction	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! sj#js#JoinFunction()$/;"	f
sj#js#JoinObjectLiteral	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! sj#js#JoinObjectLiteral()$/;"	f
sj#js#JoinOneLineIf	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! sj#js#JoinOneLineIf()$/;"	f
sj#js#SplitArgs	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! sj#js#SplitArgs()$/;"	f
sj#js#SplitArray	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! sj#js#SplitArray()$/;"	f
sj#js#SplitFatArrowFunction	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! sj#js#SplitFatArrowFunction()$/;"	f
sj#js#SplitFunction	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! sj#js#SplitFunction()$/;"	f
sj#js#SplitObjectLiteral	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! sj#js#SplitObjectLiteral()$/;"	f
sj#js#SplitOneLineIf	plugged/splitjoin.vim/autoload/sj/js.vim	/^function! sj#js#SplitOneLineIf()$/;"	f
sj#jsx#JoinHtmlTag	plugged/splitjoin.vim/autoload/sj/jsx.vim	/^function! sj#jsx#JoinHtmlTag()$/;"	f
sj#jsx#JoinJsxExpression	plugged/splitjoin.vim/autoload/sj/jsx.vim	/^function! sj#jsx#JoinJsxExpression()$/;"	f
sj#jsx#SplitJsxExpression	plugged/splitjoin.vim/autoload/sj/jsx.vim	/^function! sj#jsx#SplitJsxExpression()$/;"	f
sj#jsx#SplitSelfClosingTag	plugged/splitjoin.vim/autoload/sj/jsx.vim	/^function! sj#jsx#SplitSelfClosingTag()$/;"	f
sj#lua#JoinFunction	plugged/splitjoin.vim/autoload/sj/lua.vim	/^function! sj#lua#JoinFunction()$/;"	f
sj#lua#JoinTable	plugged/splitjoin.vim/autoload/sj/lua.vim	/^function! sj#lua#JoinTable()$/;"	f
sj#lua#SplitFunction	plugged/splitjoin.vim/autoload/sj/lua.vim	/^function! sj#lua#SplitFunction()$/;"	f
sj#lua#SplitFunctionString	plugged/splitjoin.vim/autoload/sj/lua.vim	/^function! sj#lua#SplitFunctionString(str)$/;"	f
sj#lua#SplitTable	plugged/splitjoin.vim/autoload/sj/lua.vim	/^function! sj#lua#SplitTable()$/;"	f
sj#perl#JoinHash	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#JoinHash()$/;"	f
sj#perl#JoinIfClause	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#JoinIfClause()$/;"	f
sj#perl#JoinRoundBracketedList	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#JoinRoundBracketedList()$/;"	f
sj#perl#JoinSquareBracketedList	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#JoinSquareBracketedList()$/;"	f
sj#perl#JoinWordList	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#JoinWordList()$/;"	f
sj#perl#SplitAndClause	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#SplitAndClause()$/;"	f
sj#perl#SplitHash	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#SplitHash()$/;"	f
sj#perl#SplitOrClause	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#SplitOrClause()$/;"	f
sj#perl#SplitPrefixIfClause	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#SplitPrefixIfClause()$/;"	f
sj#perl#SplitRoundBracketedList	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#SplitRoundBracketedList()$/;"	f
sj#perl#SplitSquareBracketedList	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#SplitSquareBracketedList()$/;"	f
sj#perl#SplitSuffixIfClause	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#SplitSuffixIfClause()$/;"	f
sj#perl#SplitWordList	plugged/splitjoin.vim/autoload/sj/perl.vim	/^function! sj#perl#SplitWordList()$/;"	f
sj#php#JoinArray	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#JoinArray()$/;"	f
sj#php#JoinBraces	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#JoinBraces()$/;"	f
sj#php#JoinElseClause	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#JoinElseClause()$/;"	f
sj#php#JoinHtmlTags	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#JoinHtmlTags()$/;"	f
sj#php#JoinIfClause	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#JoinIfClause()$/;"	f
sj#php#JoinMethodChain	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#JoinMethodChain()$/;"	f
sj#php#JoinPhpMarker	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#JoinPhpMarker()$/;"	f
sj#php#SplitArray	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#SplitArray()$/;"	f
sj#php#SplitBraces	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#SplitBraces()$/;"	f
sj#php#SplitElseClause	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#SplitElseClause()$/;"	f
sj#php#SplitIfClause	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#SplitIfClause()$/;"	f
sj#php#SplitMethodChain	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#SplitMethodChain()$/;"	f
sj#php#SplitPhpMarker	plugged/splitjoin.vim/autoload/sj/php.vim	/^function! sj#php#SplitPhpMarker()$/;"	f
sj#python#JoinArray	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#JoinArray()$/;"	f
sj#python#JoinAssignment	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#JoinAssignment()$/;"	f
sj#python#JoinDict	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#JoinDict()$/;"	f
sj#python#JoinImport	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#JoinImport()$/;"	f
sj#python#JoinStatement	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#JoinStatement()$/;"	f
sj#python#JoinTernaryAssignment	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#JoinTernaryAssignment()$/;"	f
sj#python#JoinTuple	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#JoinTuple()$/;"	f
sj#python#SplitArray	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#SplitArray()$/;"	f
sj#python#SplitAssignment	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#SplitAssignment()$/;"	f
sj#python#SplitDict	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#SplitDict()$/;"	f
sj#python#SplitImport	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#SplitImport()$/;"	f
sj#python#SplitListComprehension	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#SplitListComprehension()$/;"	f
sj#python#SplitStatement	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#SplitStatement()$/;"	f
sj#python#SplitTernaryAssignment	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#SplitTernaryAssignment()$/;"	f
sj#python#SplitTuple	plugged/splitjoin.vim/autoload/sj/python.vim	/^function! sj#python#SplitTuple()$/;"	f
sj#r#JoinFuncall	plugged/splitjoin.vim/autoload/sj/r.vim	/^function! sj#r#JoinFuncall()$/;"	f
sj#r#JoinSmart	plugged/splitjoin.vim/autoload/sj/r.vim	/^function! sj#r#JoinSmart()$/;"	f
sj#r#SplitFuncall	plugged/splitjoin.vim/autoload/sj/r.vim	/^function! sj#r#SplitFuncall()$/;"	f
sj#ruby#JoinArray	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinArray()$/;"	f
sj#ruby#JoinArrayLiteral	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinArrayLiteral()$/;"	f
sj#ruby#JoinBlock	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinBlock()$/;"	f
sj#ruby#JoinCachingConstruct	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinCachingConstruct()$/;"	f
sj#ruby#JoinCase	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinCase()$/;"	f
sj#ruby#JoinContinuedMethodCall	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinContinuedMethodCall()$/;"	f
sj#ruby#JoinHash	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinHash()$/;"	f
sj#ruby#JoinHeredoc	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinHeredoc()$/;"	f
sj#ruby#JoinIfClause	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinIfClause()$/;"	f
sj#ruby#JoinModuleNamespace	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinModuleNamespace()$/;"	f
sj#ruby#JoinOnelineDef	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinOnelineDef()$/;"	f
sj#ruby#JoinTernaryClause	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinTernaryClause()$/;"	f
sj#ruby#JoinWhenThen	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#JoinWhenThen()$/;"	f
sj#ruby#SplitArray	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitArray()$/;"	f
sj#ruby#SplitArrayLiteral	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitArrayLiteral()$/;"	f
sj#ruby#SplitBlock	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitBlock()$/;"	f
sj#ruby#SplitCachingConstruct	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitCachingConstruct()$/;"	f
sj#ruby#SplitCase	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitCase()$/;"	f
sj#ruby#SplitEndlessDef	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitEndlessDef()$/;"	f
sj#ruby#SplitIfClause	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitIfClause()$/;"	f
sj#ruby#SplitModuleNamespace	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitModuleNamespace()$/;"	f
sj#ruby#SplitOptions	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitOptions()$/;"	f
sj#ruby#SplitProcShorthand	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitProcShorthand()$/;"	f
sj#ruby#SplitString	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitString()$/;"	f
sj#ruby#SplitTernaryClause	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitTernaryClause()$/;"	f
sj#ruby#SplitWhenThen	plugged/splitjoin.vim/autoload/sj/ruby.vim	/^function! sj#ruby#SplitWhenThen()$/;"	f
sj#rust#JoinArgs	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#JoinArgs()$/;"	f
sj#rust#JoinArray	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#JoinArray()$/;"	f
sj#rust#JoinClosure	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#JoinClosure()$/;"	f
sj#rust#JoinCurlyBrackets	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#JoinCurlyBrackets()$/;"	f
sj#rust#JoinEmptyMatchIntoIfLet	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#JoinEmptyMatchIntoIfLet()$/;"	f
sj#rust#JoinImportList	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#JoinImportList()$/;"	f
sj#rust#JoinMatchClause	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#JoinMatchClause()$/;"	f
sj#rust#JoinMatchStatement	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#JoinMatchStatement()$/;"	f
sj#rust#SplitArgs	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#SplitArgs()$/;"	f
sj#rust#SplitArray	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#SplitArray()$/;"	f
sj#rust#SplitBlockClosure	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#SplitBlockClosure()$/;"	f
sj#rust#SplitCurlyBrackets	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#SplitCurlyBrackets()$/;"	f
sj#rust#SplitExprClosure	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#SplitExprClosure()$/;"	f
sj#rust#SplitIfLetIntoMatch	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#SplitIfLetIntoMatch()$/;"	f
sj#rust#SplitImportList	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#SplitImportList()$/;"	f
sj#rust#SplitMatchClause	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#SplitMatchClause()$/;"	f
sj#rust#SplitMatchExpression	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#SplitMatchExpression()$/;"	f
sj#rust#SplitQuestionMark	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#SplitQuestionMark()$/;"	f
sj#rust#SplitUnwrapIntoEmptyMatch	plugged/splitjoin.vim/autoload/sj/rust.vim	/^function! sj#rust#SplitUnwrapIntoEmptyMatch()$/;"	f
sj#scss#JoinNestedDefinition	plugged/splitjoin.vim/autoload/sj/scss.vim	/^function! sj#scss#JoinNestedDefinition()$/;"	f
sj#scss#SplitNestedDefinition	plugged/splitjoin.vim/autoload/sj/scss.vim	/^function! sj#scss#SplitNestedDefinition()$/;"	f
sj#settings#Read	plugged/splitjoin.vim/autoload/sj/settings.vim	/^function! sj#settings#Read(...)$/;"	f
sj#sh#JoinBackslashedLine	plugged/splitjoin.vim/autoload/sj/sh.vim	/^function! sj#sh#JoinBackslashedLine()$/;"	f
sj#sh#JoinWithSemicolon	plugged/splitjoin.vim/autoload/sj/sh.vim	/^function! sj#sh#JoinWithSemicolon()$/;"	f
sj#sh#SplitBySemicolon	plugged/splitjoin.vim/autoload/sj/sh.vim	/^function! sj#sh#SplitBySemicolon()$/;"	f
sj#sh#SplitWithBackslash	plugged/splitjoin.vim/autoload/sj/sh.vim	/^function! sj#sh#SplitWithBackslash()$/;"	f
sj#tex#JoinBlock	plugged/splitjoin.vim/autoload/sj/tex.vim	/^function! sj#tex#JoinBlock()$/;"	f
sj#tex#SplitBlock	plugged/splitjoin.vim/autoload/sj/tex.vim	/^function! sj#tex#SplitBlock()$/;"	f
sj#vim#Join	plugged/splitjoin.vim/autoload/sj/vim.vim	/^function! sj#vim#Join()$/;"	f
sj#vim#JoinIfClause	plugged/splitjoin.vim/autoload/sj/vim.vim	/^function! sj#vim#JoinIfClause()$/;"	f
sj#vim#Split	plugged/splitjoin.vim/autoload/sj/vim.vim	/^function! sj#vim#Split()$/;"	f
sj#vim#SplitIfClause	plugged/splitjoin.vim/autoload/sj/vim.vim	/^function! sj#vim#SplitIfClause()$/;"	f
sj#vue#JoinCssDefinition	plugged/splitjoin.vim/autoload/sj/vue.vim	/^function! sj#vue#JoinCssDefinition()$/;"	f
sj#vue#JoinCssMultilineSelector	plugged/splitjoin.vim/autoload/sj/vue.vim	/^function! sj#vue#JoinCssMultilineSelector()$/;"	f
sj#vue#SplitCssDefinition	plugged/splitjoin.vim/autoload/sj/vue.vim	/^function! sj#vue#SplitCssDefinition()$/;"	f
sj#vue#SplitCssMultilineSelector	plugged/splitjoin.vim/autoload/sj/vue.vim	/^function! sj#vue#SplitCssMultilineSelector()$/;"	f
sj#yaml#JoinArray	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! sj#yaml#JoinArray()$/;"	f
sj#yaml#JoinMap	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! sj#yaml#JoinMap()$/;"	f
sj#yaml#SplitArray	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! sj#yaml#SplitArray()$/;"	f
sj#yaml#SplitMap	plugged/splitjoin.vim/autoload/sj/yaml.vim	/^function! sj#yaml#SplitMap()$/;"	f
skip_if	plugged/ultisnips/test/test_Chars.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:_UmlautsBase
skip_if	plugged/ultisnips/test/test_ContextSnippets.py	/^    skip_if = lambda self: "Bug in Neovim." if self.vim_flavor == "neovim" else None$/;"	m	class:ContextSnippets_ReportErrorOnIndexOutOfRange
skip_if	plugged/ultisnips/test/test_Format.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
skip_if	plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_InDefValue_Leave
skip_if	plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_InDefValue_Overwrite
skip_if	plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_ShebangPython
skip_if	plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_SimpleExample
skip_if	plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite
skip_if	plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_TestEscapedChars_Overwrite
skip_if	plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_TextInNextLine
skip_if	plugged/ultisnips/test/test_Interpolation.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TabStop_Shell_WithUmlauts
skip_if	plugged/ultisnips/test/test_SnippetOptions.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3
skip_if	plugged/ultisnips/test/test_Transformation.py	/^    skip_if = lambda self: no_unidecode_available()$/;"	m	class:Transformation_LowerCaseAsciiResult
skip_if	plugged/ultisnips/test/test_Transformation.py	/^    skip_if = lambda self: no_unidecode_available()$/;"	m	class:Transformation_SimpleCaseAsciiResult
skip_if	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    skip_if = lambda self: running_on_windows()$/;"	m	class:TestLangmapWithUtf8_ExpectCorrectResult
skip_if	plugged/ultisnips/test/vim_test_case.py	/^    skip_if = lambda self: None$/;"	m	class:VimTestCase
slab	plugged/fzf/src/matcher.go	/^	slab           []*util.Slab$/;"	m	struct:fzf.Matcher	typeref:typename:[]*util.Slab
slab	plugged/fzf/src/pattern_test.go	/^var slab *util.Slab$/;"	v	package:fzf	typeref:typename:*util.Slab
slab	plugged/fzf/src/terminal.go	/^	slab               *util.Slab$/;"	m	struct:fzf.Terminal	typeref:typename:*util.Slab
slab16Size	plugged/fzf/src/constants.go	/^	slab16Size int = 100 * 1024 \/\/ 200KB * 32 = 12.8MB$/;"	c	package:fzf	typeref:typename:int
slab32Size	plugged/fzf/src/constants.go	/^	slab32Size int = 2048       \/\/ 8KB * 32 = 256KB$/;"	c	package:fzf	typeref:typename:int
sleeptime	plugged/ultisnips/test/vim_test_case.py	/^    sleeptime = 0.00$/;"	v	class:VimTestCase
slice	plugged/fzf/src/util/chars.go	/^	slice           []byte \/\/ or []rune$/;"	m	struct:util.Chars	typeref:typename:[]byte
sliceChunks	plugged/fzf/src/matcher.go	/^func (m *Matcher) sliceChunks(chunks []*Chunk) [][]*Chunk {$/;"	f	struct:fzf.Matcher	typeref:typename:[][]*Chunk
small_function	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^small_function = function() TRUE$/;"	f
smcup	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) smcup() {$/;"	f	struct:tui.LightRenderer
smth	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/ecto_queries_spec.rb	/^  def smth do$/;"	f
snipMate_Disabled	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_Disabled(_VimTest):$/;"	c
snipMate_EmptyLinesContinueSnippets	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_EmptyLinesContinueSnippets(_VimTest):$/;"	c
snipMate_Extends	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_Extends(_VimTest):$/;"	c
snipMate_Interpolation	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_Interpolation(_VimTest):$/;"	c
snipMate_InterpolationWithSystem	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_InterpolationWithSystem(_VimTest):$/;"	c
snipMate_Issue1325	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_Issue1325(_VimTest):$/;"	c
snipMate_Issue1344	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_Issue1344(_VimTest):$/;"	c
snipMate_Issue658	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_Issue658(_VimTest):$/;"	c
snipMate_MultiMatches	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_MultiMatches(_VimTest):$/;"	c
snipMate_NoNestedTabstops	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_NoNestedTabstops(_VimTest):$/;"	c
snipMate_OtherFiletype	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_OtherFiletype(_VimTest):$/;"	c
snipMate_OverwrittenByRegExpTrigger	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_OverwrittenByRegExpTrigger(_VimTest):$/;"	c
snipMate_SimpleSnippet	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_SimpleSnippet(_VimTest):$/;"	c
snipMate_SimpleSnippetInSnippetFile	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_SimpleSnippetInSnippetFile(_VimTest):$/;"	c
snipMate_SimpleSnippetSubDirectory	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_SimpleSnippetSubDirectory(_VimTest):$/;"	c
snipMate_TestMirrors	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_TestMirrors(_VimTest):$/;"	c
snipMate_TestMirrorsInPlaceholders	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_TestMirrorsInPlaceholders(_VimTest):$/;"	c
snipMate_TestMirrorsInPlaceholders_Overwrite	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_TestMirrorsInPlaceholders_Overwrite(_VimTest):$/;"	c
snipMate_TestNoBraceTabstops	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_TestNoBraceTabstops(_VimTest):$/;"	c
snipMate_TestNoBraceTabstopsAndMirrors	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_TestNoBraceTabstopsAndMirrors(_VimTest):$/;"	c
snipMate_Visual_Simple	plugged/ultisnips/test/test_SnipMate.py	/^class snipMate_Visual_Simple(_VimTest):$/;"	c
snippet_end	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def snippet_end(self):$/;"	m	class:SnippetUtil
snippet_start	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def snippet_start(self):$/;"	m	class:SnippetUtil
snippets	plugged/ultisnips/test/test_Autocommands.py	/^    snippets = ("test", "[ ${1:foo} ]")$/;"	v	class:Autocommands
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ("test", """Hello \\t ${1:default}\\n$2""")$/;"	v	class:LeaveTrailingWhitespace
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ("test", """Hello\\t ${1:default}\\n$2""", "", "s")$/;"	v	class:RemoveTrailingWhitespace
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ("test", """next line\\n\\nshould be empty""", "", "")$/;"	v	class:DoNotTrimSpacesAtEndOfLinesByDefault
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ("test", """next line\\n\\nshould be empty""", "", "m")$/;"	v	class:TrimSpacesAtEndOfLines
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ("trig", "success")$/;"	v	class:NoUmlautsBeforeTriggerAndCharsAfter
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ("trig", "success")$/;"	v	class:UmlautsBeforeTriggerAndCharsAfter
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ("ül", "üü ${1:world} üü $1")$/;"	v	class:Snippet_With_Umlauts_Mirrors
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ("ül", "üü ${1:world} üü ${2:hello}ßß\\nüüüü")$/;"	v	class:Snippet_With_Umlauts_OverwriteFirst
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ("ül", "üü ${1:world} üü ${2:hello}ßß\\nüüüü")$/;"	v	class:Snippet_With_Umlauts_OverwriteNone
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ("ül", "üü ${1:world} üü ${2:hello}ßß\\nüüüü")$/;"	v	class:Snippet_With_Umlauts_OverwriteSecond
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ("ül", "üüüüüßßßß")$/;"	v	class:Snippet_With_Umlauts_TypeOn
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ("ül", 'üü ${1:world} üü `!p snip.rv = len(t[1])*"a"`')$/;"	v	class:Snippet_With_Umlauts_Python
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ($/;"	v	class:TrailingNewline_TabStop_EndNL
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ($/;"	v	class:TrailingNewline_TabStop_EndStartNL
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ($/;"	v	class:TrailingNewline_TabStop_ExtraNL_ECR
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ($/;"	v	class:TrailingNewline_TabStop_JustNL
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ($/;"	v	class:TrailingNewline_TabStop_NLInsideStuffBehind
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ($/;"	v	class:TrailingNewline_TabStop_NotEndStartNL
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ($/;"	v	class:TrailingNewline_TabStop_StartNL
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = ($/;"	v	class:_MultiLineDefault
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = _snip_quote("'")$/;"	v	class:Snippet_With_SingleQuote
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = _snip_quote("'")$/;"	v	class:Snippet_With_SingleQuote_List
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = _snip_quote("ü")$/;"	v	class:Snippet_With_Umlauts
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = _snip_quote("ü")$/;"	v	class:Snippet_With_Umlauts_List
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = _snip_quote('"')$/;"	v	class:Snippet_With_DoubleQuote
snippets	plugged/ultisnips/test/test_Chars.py	/^    snippets = _snip_quote('"')$/;"	v	class:Snippet_With_DoubleQuote_List
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${0|red,blue|}")$/;"	v	class:Choices_ShouldThrowErrorWithZeroTabstop
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1:outer ${2|foo,blah|}} ${3}")$/;"	v	class:Choices_AsNestedElement_CanBeTabbedThrough
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1:outer ${2|foo,blah|}}")$/;"	v	class:Choices_AsNestedElement_CanBeTabbedInto
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1:outer ${2|foo,blah|}}")$/;"	v	class:Choices_AsNestedElement_ShallNotTakeActionIfParentInput
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1:outer ${2|foo,blah|}}")$/;"	v	class:Choices_AsNestedElement_ShouldOverwriteDefaultText
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1|a,,c|}")$/;"	v	class:Choices_EmptyChoiceWillBeDiscarded
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1|a,b,c,d,e,f,g,h,i,j,k,l,m,n|} is ${2:a char}")$/;"	v	class:Choices_MoreThan9Candidates_ShouldTerminateWithSpace
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1|a,b,c,d,e,f,g,h,i,j,k,l,m,n|} is ${2:a char}")$/;"	v	class:Choices_MoreThan9Candidates_ShouldWaitForInputs
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1|cyan,magenta|}, mirror: $1")$/;"	v	class:Choices_With_Mirror
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1|cyan,magenta|}, mirror: $1")$/;"	v	class:Choices_With_Mirror_ContinueMirroring_EvenAfterSelectionDone
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1|red,gray|} is ${2:color}\\nline 2")$/;"	v	class:Choices_WilNotMessWithTabstopsAfterIt
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1|red,gray|}")$/;"	v	class:Choices_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1|red,gray|}")$/;"	v	class:Choices_WillBeExpandedToInlineSelection
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1|red,green|}")$/;"	v	class:Choices_WillAbandonSelection_If_CharTyped
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1|red,green|}")$/;"	v	class:Choices_WillAbandonSelection_If_InputIsGreaterThanMaxSelectionIndex
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1||}")$/;"	v	class:Choices_WillNotExpand_If_ChoiceListIsEmpty
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ("test", "${1|Русский язык,中文,한국어,öääö|}")$/;"	v	class:Choices_CanTakeNonAsciiCharacters
snippets	plugged/ultisnips/test/test_Choices.py	/^    snippets = ($/;"	v	class:Choices_CanEscapeCommaInsideChoiceItem
snippets	plugged/ultisnips/test/test_Completion.py	/^    snippets = ("test", "$1 $2")$/;"	v	class:Completion_BackwardsJumpWithoutCOMPL_ACCEPT
snippets	plugged/ultisnips/test/test_Completion.py	/^    snippets = ("test", "$1 $2")$/;"	v	class:Completion_ForwardsJumpWithoutCOMPL_ACCEPT
snippets	plugged/ultisnips/test/test_Completion.py	/^    snippets = ("test", "$1 ${1:blah}")$/;"	v	class:Completion_SimpleExample_ECR
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("i", "if $1:\\n\\t$2")$/;"	v	class:Undo_ChangesInPlaceholder
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("i", "if $1:\\n\\t$2")$/;"	v	class:Undo_CompletelyUndoSnippet
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("i", "if:\\n\\t$1")$/;"	v	class:Undo_RemoveOneSnippetByTime
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("i", "if:\\n\\t$1")$/;"	v	class:Undo_RemoveOneSnippetByTime2
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", "$1 Hello\\naaa ${1} bbb\\nWorld")$/;"	v	class:Undo_RemoveEditInTabstop
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", "$1hello\\nnice\\nworld")$/;"	v	class:DeleteLastTwoLinesInSnippet
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", "${1:hello} $1")$/;"	v	class:DeleteSnippetInsertion0
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", "${1:hi}\\n${2:world}\\nend")$/;"	v	class:DeleteCurrentTabStop2_JumpBack
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", "${1:hi}\\n${2:world}\\nend")$/;"	v	class:DeleteCurrentTabStop3_JumpAround
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", "${1:hi}\\nend")$/;"	v	class:DeleteCurrentTabStop1_JumpBack
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", "${1:one}(${2:xxx})${3:three}")$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove1
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", "${1}\\n`!p snip.rv = '\\\\n'.join(t[1].split())`\\n\\n${0:pass}")$/;"	v	class:JumpForward_DefSnippet
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", "A${1:C} ${0:DDD}", "This is Case 1")$/;"	v	class:Backspace_TabStop_Zero
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", "A${1:C} ${2:DDD}", "This is Case 1")$/;"	v	class:Backspace_TabStop_NotZero
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", "Hello\\n${1:Hello}World")$/;"	v	class:Undo_RemoveWholeSnippet
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", "Hello\\naaa ${1} bbb\\nWorld")$/;"	v	class:Undo_RemoveMultilineSnippet
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", r"$1${1\/(.*)\/(?0::.)\/}")$/;"	v	class:DeleteSnippetInsertion1
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ("test", r"if $1: $2")$/;"	v	class:DoNotCrashOnUndoAndJumpInNestedSnippet
snippets	plugged/ultisnips/test/test_Editing.py	/^    snippets = ($/;"	v	class:UpdateModifiedSnippetWithoutCursorMove2
snippets	plugged/ultisnips/test/test_Expand.py	/^    snippets = ("hallo", "Hallo ${1:Welt}")$/;"	v	class:SimpleExpand_DoNotClobberDefaultRegister
snippets	plugged/ultisnips/test/test_Expand.py	/^    snippets = ("hallo", "Hallo Welt!")$/;"	v	class:SimpleExpandExpandOrJump_Expand
snippets	plugged/ultisnips/test/test_Expand.py	/^    snippets = ("hallo", "Hallo Welt!")$/;"	v	class:SimpleExpandJumpOrExpand_Expand
snippets	plugged/ultisnips/test/test_Expand.py	/^    snippets = ("hallo", "Hallo Welt!")$/;"	v	class:_SimpleExpands
snippets	plugged/ultisnips/test/test_Expand.py	/^    snippets = ("hallo", "Hallo Welt!\\nUnd Wie gehts")$/;"	v	class:MultilineExpandTestTyping_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Expand.py	/^    snippets = ("hallo", "Hallo Welt!\\nUnd Wie gehts")$/;"	v	class:MultilineExpand_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Expand.py	/^    snippets = ("hallo", "Hallo Welt\\n")$/;"	v	class:SimpleExpandEndingWithNewline_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Expand.py	/^    snippets = ("test", "SimpleText")$/;"	v	class:ExitSnippetModeAfterTabstopZero
snippets	plugged/ultisnips/test/test_Expand.py	/^    snippets = ("test", r"${1:\\Safe\\\\}")$/;"	v	class:SimpleExpand_Issue1343
snippets	plugged/ultisnips/test/test_Expand.py	/^    snippets = ("test", r"test$1 foo$0")$/;"	v	class:SimpleExpandExpandOrJump_Ambiguity
snippets	plugged/ultisnips/test/test_Expand.py	/^    snippets = ("test", r"test$1 foo$0")$/;"	v	class:SimpleExpandJumpOrExpand_Ambiguity
snippets	plugged/ultisnips/test/test_Fixes.py	/^    snippets = ("pd", "padding: ${1:0}px")$/;"	v	class:VirtualEdit
snippets	plugged/ultisnips/test/test_Fixes.py	/^    snippets = ("test", "${1:hello} ${2:world} ${0}")$/;"	v	class:RetainsTheUnnamedRegister
snippets	plugged/ultisnips/test/test_Fixes.py	/^    snippets = ("test", "${1:hello} ${2:world} ${0}")$/;"	v	class:RetainsTheUnnamedRegister_ButOnlyOnce
snippets	plugged/ultisnips/test/test_Fixes.py	/^    snippets = ("test", "${2:#2} ${1:#1};$0")$/;"	v	class:Bug1251994
snippets	plugged/ultisnips/test/test_Fixes.py	/^    snippets = ("test", "Expand me!", "", "w")$/;"	v	class:NullByte_ExpandAfter
snippets	plugged/ultisnips/test/test_Fixes.py	/^    snippets = ("test", "\\t${1}${0}")$/;"	v	class:ShiftWidthZero
snippets	plugged/ultisnips/test/test_Fixes.py	/^    snippets = ("test", "hello")$/;"	v	class:NonUnicodeDataInUnnamedRegister
snippets	plugged/ultisnips/test/test_Fixes.py	/^    snippets = ("text", "Expand me!", "", "")$/;"	v	class:PassThroughNonexecutedTrigger
snippets	plugged/ultisnips/test/test_Fixes.py	/^    snippets = ("word", "never expanded", "", "w")$/;"	v	class:NullByte_ListSnippets
snippets	plugged/ultisnips/test/test_Folding.py	/^    snippets = ($/;"	v	class:FoldOverwrite_Simple_ECR
snippets	plugged/ultisnips/test/test_Folding.py	/^    snippets = ($/;"	v	class:Fold_DeleteMiddleLine_ECR
snippets	plugged/ultisnips/test/test_Folding.py	/^    snippets = ($/;"	v	class:FoldingEnabled_SnippetWithFold_ExpectNoFolding
snippets	plugged/ultisnips/test/test_Folding.py	/^    snippets = ($/;"	v	class:PerlSyntaxFold
snippets	plugged/ultisnips/test/test_Format.py	/^    snippets = ("m", "\\tBlaahblah \\t\\t  ")$/;"	v	class:RecTabStopsWithExpandtab_SimpleExample_ECR
snippets	plugged/ultisnips/test/test_Format.py	/^    snippets = ("test", "${1:longer expand}\\n$1\\n$0", "", "f")$/;"	v	class:FOSimple_Break_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Format.py	/^    snippets = ("test", "${1:longer expand}after\\nstart$1end")$/;"	v	class:FOTextAfter_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Format.py	/^    snippets = ("test", "${1:longer expand}after\\nstart$1end")$/;"	v	class:FOWrapOnLongWord_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Format.py	/^    snippets = ("test", "Before${1:longer expand}After\\nstart$1end")$/;"	v	class:FOTextBeforeAndAfter_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Format.py	/^    snippets = ("test", "for\\n    blah")$/;"	v	class:ProperIndenting_SimpleCase_ECR
snippets	plugged/ultisnips/test/test_Format.py	/^    snippets = ("test", "hui")$/;"	v	class:ProperIndenting_AutoIndentAndNewline_ECR
snippets	plugged/ultisnips/test/test_Format.py	/^    snippets = ("test", "hui")$/;"	v	class:ProperIndenting_SingleLineNoReindenting_ECR
snippets	plugged/ultisnips/test/test_Format.py	/^    snippets = (("m1", "Something"), ("m", "\\t$0"))$/;"	v	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", """${1:hi} `!p res = t[1]+".blah"` End""")$/;"	v	class:PythonCodeOld_ReferencePlaceholderAfter
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", """${1:hi} `!p snip.rv = t[1]+".blah"` End""")$/;"	v	class:PythonCode_ReferencePlaceholder
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", """`!p res = len(t[1])*"#"`\\n${1:some text}""")$/;"	v	class:PythonCodeOld_ReferencePlaceholderBefore
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", """`!p snip.rv = len(t[1])*"#"`\\n${1:some text}""")$/;"	v	class:PythonCode_ReferencePlaceholderBefore
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", """hi `!p res = "Hallo"` End""")$/;"	v	class:PythonCodeOld_SimpleExample
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", """hi `!p snip.rv = "Hallo"` End""")$/;"	v	class:PythonCode_SimpleExample
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", """hi `!v indent(".")` End""")$/;"	v	class:TabStop_VimScriptInterpolation_SimpleExample
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", """hi`!p snip.rv = ""`End""")$/;"	v	class:PythonCode_SimpleExample_ReturnValueIsEmptyString
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", "Hallo ${1:now `echo fromecho`} end")$/;"	v	class:TabStop_Shell_InDefValue_Leave
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", "Hallo ${1:now `echo fromecho`} end")$/;"	v	class:TabStop_Shell_InDefValue_Overwrite
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", "`!p snip.rv = 5`")$/;"	v	class:Python_SnipRvCanBeNonText
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", "h`!p snip.rv = snip.v.mode + snip.v.text`b")$/;"	v	class:PythonVisual_LineSelect_Simple
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", "h`!p snip.rv = snip.v.mode + snip.v.text`b")$/;"	v	class:PythonVisual_NoVisualSelection_Ignore
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", "h`!p snip.rv = snip.v.mode + snip.v.text`b")$/;"	v	class:PythonVisual_SelectOneWord
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", "hi `echo hallo` you!")$/;"	v	class:TabStop_Shell_SimpleExample
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", "hi `echo hallo`\\nWeiter")$/;"	v	class:TabStop_Shell_TextInNextLine
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", "hi `echo höüäh` you!")$/;"	v	class:TabStop_Shell_WithUmlauts
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", r"""${2:${1\/.+\/egal\/}} ${1:$3} ${3:`!p snip.rv = "hi"`}""")$/;"	v	class:PythonCode_TrickyReferences
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", r"""`echo \\`echo "\\\\$hi"\\``""")$/;"	v	class:TabStop_Shell_TestEscapedChars_Overwrite
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", r"""`hi="blah"; echo \\`echo "$hi"\\``""")$/;"	v	class:TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", r"""hi `!p snip.rv = snip.opt("g:UStest") or "no"` End""")$/;"	v	class:PythonCode_OptExists
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", r"""hi `!p snip.rv = snip.opt("g:UStest") or "no"` End""")$/;"	v	class:PythonCode_OptNoExists
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", r"""hi`!p snip.rv = "a" * 100 + '\\n'*100 + "a"*100`end""")$/;"	v	class:PythonCode_LongerTextThanSource_MultiLine
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ("test", r"""hi`!p snip.rv = "a" * 100`end""")$/;"	v	class:PythonCode_LongerTextThanSource_Chars
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCodeOld_IndentedMultiline
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCodeOld_TransformedBeforeMultiLine
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteFirst
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteSecond
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_CanOverwriteTabstop
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_IndentEtSw
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_IndentEtSwOffset
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_IndentNoetSwTs
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_IndentProblem
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_Locals
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_MultiAppend
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_MultiAppendShift
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_MultiAppendShiftMethods
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_MultiAppendSimpleIndent
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_MultilineIndented
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_ResetIndent
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_SimpleAppend
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_SimpleMkline
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_TransformedBeforeMultiLine
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonCode_UseNewOverOld
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonVisual_HasAccessToSelectedPlaceholders
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:PythonVisual_HasAccessToZeroPlaceholders
snippets	plugged/ultisnips/test/test_Interpolation.py	/^    snippets = ($/;"	v	class:TabStop_Shell_ShebangPython
snippets	plugged/ultisnips/test/test_ListSnippets.py	/^    snippets = ($/;"	v	class:_ListAllSnippets
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = "test", "$1 $1_"$/;"	v	class:Mirror_TestKill_InsertAfter_NoKill
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = "test", "$1 $1_"$/;"	v	class:Mirror_TestKill_InsertBefore_NoKill
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = "test", "$1 $1_"$/;"	v	class:Mirror_TestKill_InsertBeginning_Kill
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = "test", "$1 $1_"$/;"	v	class:Mirror_TestKill_InsertEnd_Kill
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = "test", "welt${1:welt${2:welt}welt} $2"$/;"	v	class:Mirror_TestKillTabstop_Kill
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "    $1\\n$1\\na$1b\\n$1\\ntest $1 mich")$/;"	v	class:SimpleMirrorMultilineMany_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1 $1 $1 $1")$/;"	v	class:SimpleMirrorSameLineManyMultiline_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1 $1 $1 $1")$/;"	v	class:SimpleMirrorSameLineMany_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1 $1")$/;"	v	class:SimpleMirrorSameLine_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1 $1")$/;"	v	class:SimpleMirrorSameLine_InText_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1 ${1:replace me}")$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1 ${1:replace me}")$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_ECR
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1 ${1:this is it} $1")$/;"	v	class:MirrorBeforeTabstopLeave_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1 ${1:this is it} $1")$/;"	v	class:MirrorBeforeTabstopOverwrite_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1 Hinten\\n$1")$/;"	v	class:TextTabStopTextAfterTab_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1$1 ")$/;"	v	class:SimpleMirrorSameLineNoSpaceSpaceAfter_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1$1")$/;"	v	class:SimpleMirrorSameLineNoSpace_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1\\n$1 Hinten")$/;"	v	class:TextTabStopAfterMirror_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1\\n$1")$/;"	v	class:SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1\\n$1")$/;"	v	class:SimpleMirrorDelete_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1\\n$1")$/;"	v	class:TextTabStopSimpleMirrorMultiline_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1\\n$1\\n$1")$/;"	v	class:MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1\\n$1\\n$1")$/;"	v	class:MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1\\n${1:sometext}")$/;"	v	class:TextTabStopSimpleMirrorMultilineMirrorInFront_ECR
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1\\nVorne $1 Hinten")$/;"	v	class:TextTabStopSurroundMirror_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1\\nVorne $1")$/;"	v	class:TextTabStopTextBeforeMirror_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "$1\\n\\n$1\\n\\n$1")$/;"	v	class:MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ObenVorne $1 ObenHinten\\nVorne $1 Hinten")$/;"	v	class:TextTabStopAllSurrounded_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "Vorne $1 Hinten\\n$1")$/;"	v	class:TextTabStopTextSurroundedTab_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "Vorne $1\\n$1")$/;"	v	class:TextTabStopTextBeforeTab_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha $1 ${2:$1.h $1.c}\\ntest $1")$/;"	v	class:TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha $1 ${2:$1.h}")$/;"	v	class:TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha $1 ${2:$1}")$/;"	v	class:TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha $1 ${2:$1}")$/;"	v	class:TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha $1 ${2:snip} ${3:$1.h $2}")$/;"	v	class:TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha $1 ${2:snip} ${3:$1.h $2}")$/;"	v	class:TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha $5 ${1:blub} $4 $0 ${2:$1.h} $1 $3 ${4:More}")$/;"	v	class:TabstopWithMirrorManyFromAll_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha ${1:blub} ${2:$1.h}")$/;"	v	class:TabstopWithMirrorInDefaultNoType_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha ${1:blub} ${2:$1}")$/;"	v	class:TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha ${1:default value} $1\\nanother: $1 mirror")$/;"	v	class:SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha ${1:default value} $1\\nanother: $1 mirror")$/;"	v	class:SimpleTabstopWithDefaultComplexType_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha ${1:defa}\\n$1")$/;"	v	class:SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ("test", "ha ${1:defa}\\n$1")$/;"	v	class:SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = ($/;"	v	class:MirrorRealLifeExample_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = (("test", "$1$1 "), ("outer", "$1"))$/;"	v	class:SimpleMirrorSameLineNoSpaceInsideOtherSpaceAfter_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Mirror.py	/^    snippets = (("test", "$1$1"), ("outer", "$1"))$/;"	v	class:SimpleMirrorSameLineNoSpaceInsideOther_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Movement.py	/^    snippets = ("<trh", "<tr>\\n\\t<th>$1<\/th>\\n\\t$2\\n<\/tr>\\n$3")$/;"	v	class:CursorMovement_BS_InEditMode
snippets	plugged/ultisnips/test/test_Movement.py	/^    snippets = ("test", "${1:Hi}\\n${2:blub}")$/;"	v	class:IMMoving_ExitWhenOutsideAbove_ECR
snippets	plugged/ultisnips/test/test_Movement.py	/^    snippets = ("test", "${1:Hi}\\n${2:blub}")$/;"	v	class:IMMoving_ExitWhenOutsideBelow_ECR
snippets	plugged/ultisnips/test/test_Movement.py	/^    snippets = ("test", "${1:Some}")$/;"	v	class:IMMoving_CursorsKeys_ECR
snippets	plugged/ultisnips/test/test_Movement.py	/^    snippets = ("test", r"$1 ${1:a tab}")$/;"	v	class:CursorMovement_Multiline_ECR
snippets	plugged/ultisnips/test/test_Movement.py	/^    snippets = ("test", r"$1 ${1:a tab}")$/;"	v	class:IMMoving_AcceptInputWhenMoved_ECR
snippets	plugged/ultisnips/test/test_Movement.py	/^    snippets = ("test", r"$1 ${2:a tab} ${1:Tab}")$/;"	v	class:IMMoving_NoExitingEventAtEnd_ECR
snippets	plugged/ultisnips/test/test_Movement.py	/^    snippets = ("test", r"$1 ${2:a tab} ${1:Tab}")$/;"	v	class:IMMoving_NoExiting_ECR
snippets	plugged/ultisnips/test/test_Movement.py	/^    snippets = ("test", r"$1 ${2:blub} ${1:Tab}")$/;"	v	class:IMMoving_ExitWhenOutsideRight_ECR
snippets	plugged/ultisnips/test/test_Movement.py	/^    snippets = ("test", r"${1:Hi} ${2:blub}")$/;"	v	class:IMMoving_ExitWhenOutsideLeft_ECR
snippets	plugged/ultisnips/test/test_Movement.py	/^    snippets = ("test", r"${1:Hi} ${2:blub}")$/;"	v	class:IMMoving_NotExitingWhenBarelyOutsideLeft_ECR
snippets	plugged/ultisnips/test/test_MultipleMatches.py	/^    snippets = ($/;"	v	class:Multiple_ManySnippetsOneTrigger_ECR
snippets	plugged/ultisnips/test/test_MultipleMatches.py	/^    snippets = ($/;"	v	class:_MultipleMatches
snippets	plugged/ultisnips/test/test_Plugin.py	/^    snippets = ("long", "Hello", "", "w")$/;"	v	class:Plugin_SuperTab_SimpleTest
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ("m", "M START\\n    $0\\nM END")$/;"	v	class:RecTabStops_InNewlineMultilineWithIndent_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ("m", "M START\\n    $1\\nM END -> $0")$/;"	v	class:RecTabStops_InNewlineMultilineWithNonZeroTS_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ("m", "M START\\n$0\\nM END")$/;"	v	class:RecTabStops_InNewlineManualIndentTextInFront_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ("m", "M START\\n$0\\nM END")$/;"	v	class:RecTabStops_InNewlineManualIndent_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ("m", "M START\\n$0\\nM END")$/;"	v	class:RecTabStops_InNewlineMultiline_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ("m", "[ ${1:first}  ${2:sec} ]")$/;"	v	class:RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ("m", "[ ${1:first}  ${2:sec} ]")$/;"	v	class:RecTabStops_InNewlineInTabstop_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ("m", "[ ${1:first}  ${2:sec} ]")$/;"	v	class:RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ("m", "[ ${1:first}  ${2:sec} ]")$/;"	v	class:RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ("m", "[ ${1:first}  ${2:sec} ]")$/;"	v	class:RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ("m", "[ ${1:first}  ${2:sec} ]")$/;"	v	class:RecTabStops_SimpleCase_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabStops_MirroredZeroTS_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = ($/;"	v	class:RecTabsStops_TypeInZero_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m", "A $0 B $1"), ("m1", "C $1 D $0 E"))$/;"	v	class:RecTabStops_ExpandedInZeroTSSecondTime_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m", "A $0 B $1"), ("m1", "C $1 D $0 E"))$/;"	v	class:RecTabStops_ExpandedInZeroTSTwice_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m", "A $0 B $1"), ("m1", "C $1 D $0 E"))$/;"	v	class:RecTabStops_ExpandedInZeroTS_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m", "A $0 B"), ("m1", "C $1 D $0 E"))$/;"	v	class:RecTabStops_OuterOnlyWithZeroTS_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m", "A $0 B"), ("m1", "C $1 D $0 E"))$/;"	v	class:RecTabStops_OuterOnlyWithZero_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m", "[ $1 $2 ] $1"), ("m1", "ASnip $1 ASnip $2 ASnip"))$/;"	v	class:RecTabStops_MirrorInnerSnippet_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m", "[ ${1:first} ${2:sec} ]"),)$/;"	v	class:RecTabStops_BarelyNotLeavingInner_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m", "[ ${1:first} ${2:sec} ]"),)$/;"	v	class:RecTabStops_LeavingInnerInnerTwo_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m", "[ ${1:first} ${2:sec} ]"),)$/;"	v	class:RecTabStops_LeavingInnerInner_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m", "[ ${1:first} ${2:sec} ]"),)$/;"	v	class:RecTabStops_LeavingInner_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m", r"${1:one}${0:explicit zero}${2:two}", "snip", "i"),)$/;"	v	class:RecTabsStops_BackspaceZero_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m", r"_${0:explicit zero}", "snip", "i"),)$/;"	v	class:RecTabsStops_TypeInZero2_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m1", "JST"), ("m", "[ ${1:first}  ${2:sec} ]"))$/;"	v	class:RecTabStops_InnerWOTabStopTwiceDirectly_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m1", "JST"), ("m", "[ ${1:first}  ${2:sec} ]"))$/;"	v	class:RecTabStops_InnerWOTabStopTwice_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m1", "Just some Text"), ("m", "[ ${1:first}  ${2:sec} ]"))$/;"	v	class:RecTabStops_InnerWOTabStop_ECR
snippets	plugged/ultisnips/test/test_Recursive.py	/^    snippets = (("m1", "[ ${1:first} $0 ${2:sec} ]"), ("m", "[ ${1:first} ${2:sec} ]"))$/;"	v	class:RecTabStops_ZeroTSisNothingSpecial_ECR
snippets	plugged/ultisnips/test/test_Selection.py	/^    snippets = ("test", "${1:World}")$/;"	v	class:_SelectModeMappings
snippets	plugged/ultisnips/test/test_Selection.py	/^    snippets = ("test", "h${1:blah}w $1")$/;"	v	class:ExclusiveSelection_SimpleTabstop_Test
snippets	plugged/ultisnips/test/test_Selection.py	/^    snippets = ("test", "h${1:blah}w $1")$/;"	v	class:OldSelection_SimpleTabstop_Test
snippets	plugged/ultisnips/test/test_Selection.py	/^    snippets = ($/;"	v	class:ExclusiveSelection_RealWorldCase_Test
snippets	plugged/ultisnips/test/test_Selection.py	/^    snippets = ($/;"	v	class:OldSelection_RealWorldCase_Test
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("((?<=\\W)|^)(\\.)", "self.", "", "r")$/;"	v	class:_Regex_Self
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("(.*test)", "Expand me!", "", "r")$/;"	v	class:SnippetOptions_Regex_SameLine_Long_Start
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("(test *)+", "Expand me!", "", "r")$/;"	v	class:SnippetOptions_Regex_Multiple
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("(test)", "Expand me!", "", "r")$/;"	v	class:SnippetOptions_Regex_Expand
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("(test)", "Expand me!", "", "r")$/;"	v	class:SnippetOptions_Regex_SameLine_Simple
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("(test.*)", "Expand me!", "", "r")$/;"	v	class:SnippetOptions_Regex_SameLine_Long_End
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("test ", "Expand me!", "", "r")$/;"	v	class:SnippetOptions_Regex_WithSpace
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("test it", "Expand me!", "", "b")$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("test it", "Expand me!", "", "b")$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("test it", "Expand me!", "", "b")$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("test me", "Expand me!")$/;"	v	class:MultiWordSnippet_Simple
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("test", "Expand me!", "", "b")$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("test", "Expand me!", "", "b")$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("test", "Expand me!", "", "b")$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand2
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ("test", "\\t\\tExpand\\tme!\\t", "", "t")$/;"	v	class:_No_Tab_Expand
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ($/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ($/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ($/;"	v	class:SnippetOptions_Regex_PythonBlockMatch
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = ($/;"	v	class:_TabExpand_RealWorld
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (("test it", "Expand me!", "", "i"),)$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (("test it", "Expand me!", "", "i"),)$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (("test it", "Expand me!", "", "w"),)$/;"	v	class:_MultiWord_SnippetOptions_ExpandWordSnippets
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (("test", "Expand me!", "", "b"), ("test", "not at beginning", "", ""))$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (("test", "Expand me!", "", "b"), ("test", "not at beginning", "", ""))$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (("test", "Expand me!", "", "i"),)$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (("test", "Expand me!", "", "i"),)$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (("test", "Expand me!", "", "i"),)$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (("test", "Expand me!", "", "i"),)$/;"	v	class:SnippetOptions_ExpandInwordSnippets_ExpandSingle
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (("test", "Expand me!", "", "i"),)$/;"	v	class:SnippetOptions_ExpandInwordSnippets_SimpleExpand
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (("test", "Expand me!", "", "w"),)$/;"	v	class:_SnippetOptions_ExpandWordSnippets
snippets	plugged/ultisnips/test/test_SnippetOptions.py	/^    snippets = (r"cabfed", r"""`!p snip.rv =  match or "No match"`""")$/;"	v	class:SnippetOptions_Regex_PythonBlockNoMatch
snippets	plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_DoNotCareAboutNonMatchings
snippets	plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_MultiWordTriggerOverwriteExisting
snippets	plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_OverwriteExisting
snippets	plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_OverwriteThenChoose_ECR
snippets	plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = ($/;"	v	class:SnippetPriorities_OverwriteTwice_ECR
snippets	plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = (("test", "We do not overwrite", "Overwrite the two", "", -1),)$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded
snippets	plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = (("test", "We overwrite", "Overwrite the two", "", -5),)$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded_neg_prio
snippets	plugged/ultisnips/test/test_SnippetPriorities.py	/^    snippets = (("test", "We overwrite", "Overwrite the two", "", 1),)$/;"	v	class:SnippetPriorities_AddedHasHigherThanFile
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("echo", "$0 run")$/;"	v	class:TabStop_Exit_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("echo", "echo ${1:Hallo}")$/;"	v	class:TabStopNoReplace_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("hallo", "Hallo ${1:WELT} ups")$/;"	v	class:TabStopNavigatingInInsertModeSimple_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("hallo", "hallo $0 $1")$/;"	v	class:TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("hallo", "hallo $0 a small feed")$/;"	v	class:TabStopSimpleReplaceSurrounded1_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("hallo", "hallo $0\\nnice $1 work\\n$3 $2\\nSeem to work")$/;"	v	class:TabStopTestMultilineExpand_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("hallo", "hallo $2 $1")$/;"	v	class:TabStopTestBackwardJumping2_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("hallo", "hallo $2 $1")$/;"	v	class:TabStopTestJumping2_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("hallo", "hallo ${0:End} ${1:Beginning}")$/;"	v	class:TabStopSimpleReplace_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("hallo", "hallo ${0:End} a small feed")$/;"	v	class:TabStopSimpleReplaceSurrounded_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("hallo", "hallo ${1:End} ${0:Beginning}")$/;"	v	class:TabStopSimpleReplaceReversed_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("hallo", "hallo ${2:End} mitte ${1:Beginning}")$/;"	v	class:TabStopTestJumping_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("hallo", "hallo ${2:End} mitte${1:Beginning}")$/;"	v	class:TabStopTestBackwardJumping_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("hallo", "nothing ${1:i} hups")$/;"	v	class:TabStopWithOneChar_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", """<div${1: id="${2:some_id}"}>\\n  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_DeleteFirst
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", """<div${1: id="${2:some_id}"}>\\n  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", """<div${1: id="${2:some_id}"}>\\n  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", """<div${1: id="${2:some_id}"}>\\n  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecond
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", """<div${1: id="${2:some_id}"}>\\n  $3  $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", """<div${1: id="${2:some_id}"}>\\n  $3 $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", """<div${1: id="${2:some_id}"}>\\n  $3 $0\\n<\/div>""")$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", """h${1:a$2b}l""")$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "$1: ${1:'${2:second}'} $2")$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite1
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "$1: ${1:'${2:second}'} $2")$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "$2: ${2:'${1:second}'} $1")$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "[ $1$2 ] $1")$/;"	v	class:TabStop_AdjacentTabStopAddText_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "\\\\${1:literal}")$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfDefinitionText
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "\\n\\\\${1:literal}")$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfLine
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "each_byte { |${1:byte}| $0 }")$/;"	v	class:TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "hi $1 $2 ${1:first line\\nsecond line} ${2:Hi} world")$/;"	v	class:TabStop_Multiline_DelFirstOverwriteSecond_Overwrite
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "hi $1 ${1:first line\\nsecond line} world")$/;"	v	class:TabStop_Multiline_MirrorInFront_Leave
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "hi $1 ${1:first line\\nsecond line} world")$/;"	v	class:TabStop_Multiline_MirrorInFront_Overwrite
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "hi ${1:first line\\nsecond line} world")$/;"	v	class:TabStop_Multiline_Leave
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "hi ${1:first line\\nsecond line} world")$/;"	v	class:TabStop_Multiline_Overwrite
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "hi ${1:this ${2:second ${3:third}}} $4")$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpAround
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "hi ${1:this ${2:second ${3:third}}} $4")$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "hi ${1:this ${2:second ${3:third}}} $4")$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpToThird
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "hi ${1:this ${2:second}} $2")$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_DoNothing
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "hi ${1:this ${2:second}} $2")$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite0
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "hi ${1:this ${2:second}} $2")$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "snip $1")$/;"	v	class:TabStopEscapingWhenSelectedNoCharTS_ECR
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "snip ${1:default}")$/;"	v	class:TabStopEscapingWhenSelected_ECR
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "snip ${1:i}")$/;"	v	class:TabStopEscapingWhenSelectedSingleCharTS_ECR
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", "t$1t${2: }t{\\n\\t$0\\n}")$/;"	v	class:TabStop_CROnlyOnSelectedNear
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", r":latex:\\`$1\\`$0")$/;"	v	class:TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", r"These are two backslashes \\\\\\\\ done")$/;"	v	class:TabStop_EscapingChars_Backslash3
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", r"This \\ is a backslash!")$/;"	v	class:TabStop_EscapingChars_Backslash
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", r"This is a backslash \\\\ done")$/;"	v	class:TabStop_EscapingChars_Backslash2
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", r"\\\\$1{$2}")$/;"	v	class:TabStop_EscapingChars_Backslash4
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", r"a\\${1:literal}")$/;"	v	class:TabStop_EscapingCharsDollars1
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", r"snip \\$0 $$0 end")$/;"	v	class:TabStop_EscapingCharsDollars
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", r"snip \\` literal")$/;"	v	class:TabStop_EscapingCharsBackticks
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ("test", r"usage: \\`basename \\$0\\` ${1:args}")$/;"	v	class:TabStop_EscapingChars_RealLife
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ($/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ($/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ($/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample
snippets	plugged/ultisnips/test/test_TabStop.py	/^    snippets = ($/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = "test", r"$1 ${1\/(aa)|.*\/(?1:yes:no\\\\)\/}"$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter1
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = "test", r"$1 ${1\/(aa)|.*\/(?1:yes\\:no\\))\/}"$/;"	v	class:Transformation_ConditionalWithEscapedDelimiter
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = "test", r"$1 ${1\/(aa)|.*\/(?1:yes\\\\:no)\/}"$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = "test", r"$1 ${1\/.*\/\\L$0$0\\E\/}_"$/;"	v	class:Transformation_TestKill_InsertAfter_NoKill
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = "test", r"$1 ${1\/.*\/\\L$0$0\\E\/}_"$/;"	v	class:Transformation_TestKill_InsertBefore_NoKill
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = "test", r"$1 ${1\/.*\/\\L$0$0\\E\/}_"$/;"	v	class:Transformation_TestKill_InsertBeginning_Kill
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = "test", r"$1 ${1\/.*\/\\L$0$0\\E\/}_"$/;"	v	class:Transformation_TestKill_InsertEnd_Kill
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("ascii", "$1 ${1\/(.*)\/$1\/a}")$/;"	v	class:Transformation_SimpleCaseAsciiResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("ascii", "$1 ${1\/(.*)\/\\L$1\\E\/a}")$/;"	v	class:Transformation_LowerCaseAsciiResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "$1 ${1\/(.)\/\\\\u$1\/}")$/;"	v	class:Transformation_CleverTransformUpercaseChar_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "$1 ${1\/(.*)\/\\L$1\\E\/}")$/;"	v	class:Transformation_CleverTransformLongLower_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "$1 ${1\/(.*)\/\\\\U$1\\E\/}")$/;"	v	class:Transformation_CleverTransformLongUpper_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "$1 ${1\/(.*)\/\\l$1\/}")$/;"	v	class:Transformation_CleverTransformLowercaseChar_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "$1 ${1\/(?:(^a)|(^b)).*\/(?1:yes:no)\/}")$/;"	v	class:Transformation_CIBothDefinedNegative_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "$1 ${1\/(?:(^a)|(^b)).*\/(?1:yes:no)\/}")$/;"	v	class:Transformation_CIBothDefinedPositive_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "$1 ${1\/([ab])oo\/$1ull\/}")$/;"	v	class:Transformation_Backreference_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "$1 ${1\/(^a).*\/(?0:began with an a)\/}")$/;"	v	class:Transformation_ConditionalInsertionSimple_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "$1 ${1\/foo\/batzl\/}")$/;"	v	class:Transformation_SimpleCaseNoTransform_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "$1 ${1\/foo\/batzl\/}")$/;"	v	class:Transformation_SimpleCase_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "${1:Some Text}${1\/.+\/\\\\U$0\\E\/}\\n${1\/.+\/\\L$0\\E\/}")$/;"	v	class:Transformation_MultipleTransformations_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "${1\/.+\/is something\/}${1:some}")$/;"	v	class:Transformation_TabIsAtEndAndDeleted1_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "${1\/.+\/is something\/}${1:some}")$/;"	v	class:Transformation_TabIsAtEndAndDeleted_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "${1\/.+\/is something\/}${1}")$/;"	v	class:Transformation_TabIsAtEndNoTextLeave_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "${1\/.+\/is something\/}${1}")$/;"	v	class:Transformation_TabIsAtEndNoTextType_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "${1\/foo\/batzl\/} $1")$/;"	v	class:Transformation_SimpleCaseTransformInFront_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "${1\/foo\/batzl\/} ${1:replace me}")$/;"	v	class:Transformation_SimpleCaseTransformInFrontDefVal_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "snip ${1\/.+\/(?0:matched)\/} ${1:default}")$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", "snip ${1\/.+\/(?0:matched)\/} ${1:default}")$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValue_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", r"$1 ${1\/(\\w+(?:\\W+\\w+){,7})\\W*(.+)?\/$1(?2:...)\/}")$/;"	v	class:Transformation_ConditionalInsertRWEllipsis_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", r"$1 ${1\/(dead) (par[^ ]*)\/this $2 is a bit $1\/}")$/;"	v	class:Transformation_BackreferenceTwice_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", r"$1 ${1\/, *\/, \/g}")$/;"	v	class:Transformation_OptionReplaceGlobalMatchInReplace_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", r"$1 ${1\/, *\/-\/g}")$/;"	v	class:Transformation_OptionReplaceGlobal_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", r"$1 ${1\/, *\/\\n\/}")$/;"	v	class:Transformation_CINewlines_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", r"$1 ${1\/, *\/\\t\/}")$/;"	v	class:Transformation_CITabstop_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", r"$1 ${1\/^.*?(-)?(>)?$\/(?2::(?1:>:.))\/}")$/;"	v	class:Transformation_ConditionalInConditional_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", r"$1 ${1\/hal((?:lo)|(?:ul))\/(?1:ha\\($1\\))\/}")$/;"	v	class:Transformation_CIEscapedParensinReplace_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", r"$1 ${1\/test\/blah\/i}")$/;"	v	class:Transformation_OptionIgnoreCase_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", r"$1 ${2:${1\/.+\/(?0:defined $0)\/}}")$/;"	v	class:Transformation_InsideTabLeaveAtDefault_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", r"$1 ${2:${1\/.+\/(?0:defined $0)\/}}")$/;"	v	class:Transformation_InsideTabOvertype_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ("test", r"${VISUAL\/^\/* \/mg}")$/;"	v	class:Transformation_OptionMultiline_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ($/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR
snippets	plugged/ultisnips/test/test_Transformation.py	/^    snippets = ($/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR
snippets	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    snippets = ("te'stâ", "abc123ά", "123êabc")$/;"	v	class:VerifyVimDict3
snippets	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    snippets = ("testâ", "abc123ά", "123'êabc")$/;"	v	class:VerifyVimDict1
snippets	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    snippets = ($/;"	v	class:TestLangmapWithUtf8_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    snippets = ($/;"	v	class:TestNonEmptyLangmapWithSemi_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    snippets = ($/;"	v	class:TestNonEmptyLangmap_ExpectCorrectResult
snippets	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    snippets = ('te"stâ', "abc123ά", "123êabc")$/;"	v	class:VerifyVimDict2
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("if", "if {\\n\\t${VISUAL}$0\\n}")$/;"	v	class:Visual_LineSelect_DedentLine
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "beg\\n\\t${0:${VISUAL}}\\nend")$/;"	v	class:Visual_LineSelect_CheckIndentWithTS_NoOverwrite
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "beg\\n\\t${VISUAL}\\n\\t${1:here_we_go}\\nend")$/;"	v	class:Visual_LineSelect_WithTabStop
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "beg\\n\\t${VISUAL}\\nend")$/;"	v	class:Visual_LineSelect_CheckIndentSimple
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "beg\\n\\t${VISUAL}\\nend")$/;"	v	class:Visual_LineSelect_CheckIndentTwice
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${1:${VISUAL}}b")$/;"	v	class:Visual_InDefaultText_SelectOneWord
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${1:${VISUAL}}b")$/;"	v	class:Visual_InDefaultText_SelectOneWord_NoOverwrite
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${1:bef${VISUAL}aft}b")$/;"	v	class:Visual_InDefaultText_LineSelect_NoOverwrite
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${1:bef${VISUAL}aft}b")$/;"	v	class:Visual_InDefaultText_LineSelect_Overwrite
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${1:beforea${VISUAL}aft}b")$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${1:beforea${VISUAL}aft}b")$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_Overwrite
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${1:beforeaaa${VISUAL}aft}b")$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${2:ahh}${VISUAL}${1:ups}b", "Description", "i")$/;"	v	class:Visual_SelectOneWordWithTabstop_TillEndOfLine
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL:world}b")$/;"	v	class:VisualWithDefault_ExpandWithVisual
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL:world}b")$/;"	v	class:VisualWithDefault_ExpandWithoutVisual
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL}b")$/;"	v	class:Visual_CrossOneLine
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL}b")$/;"	v	class:Visual_ExpandTwice
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL}b")$/;"	v	class:Visual_LineSelect_Simple
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL}b")$/;"	v	class:Visual_NoVisualSelection_Ignore
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL}b")$/;"	v	class:Visual_SelectOneWord
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL}b", "", "i")$/;"	v	class:Visual_SelectOneWordExclusive
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL}b", "", "i")$/;"	v	class:Visual_SelectOneWordInclusive
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL}b", "", "i")$/;"	v	class:Visual_SelectOneWord_ProblemAfterTab
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL}b", "Description", "i")$/;"	v	class:Visual_SelectOneWord_Inword
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL}b", "Description", "i")$/;"	v	class:Visual_SelectOneWord_TillEndOfLine
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "h${VISUAL}b${VISUAL}a")$/;"	v	class:Visual_SelectOneWord_TwiceVisual
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", "hello\\n\\t ${1:${VISUAL}}\\nend")$/;"	v	class:Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", r"h${1:bef${VISUAL\/.\/\\U$0\\E\/g}aft}b")$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_NoOverwrite
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", r"h${1:bef${VISUAL\/.\/\\U$0\\E\/g}aft}b")$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_Overwrite
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", r"h${VISUAL:\\\/\\\/ body}b")$/;"	v	class:VisualWithDefaultWithSlashes_ExpandWithoutVisual
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", r"h${VISUAL:world\/.\/\\U$0\\E\/g}b")$/;"	v	class:VisualTransformationWithDefault_ExpandWithVisual
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", r"h${VISUAL:world\/.\/\\U$0\\E\/g}b")$/;"	v	class:VisualTransformationWithDefault_ExpandWithoutVisual
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", r"h${VISUAL\/.\/\\U$0\\E\/g}b")$/;"	v	class:VisualTransformation_LineSelect_Simple
snippets	plugged/ultisnips/test/test_Visual.py	/^    snippets = ("test", r"h${VISUAL\/.\/\\U$0\\E\/g}b")$/;"	v	class:VisualTransformation_SelectOneWord
snippets	plugged/ultisnips/test/vim_test_case.py	/^    snippets = ()$/;"	v	class:VimTestCase
snippets_in_current_scope	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def snippets_in_current_scope(self, search_all):$/;"	m	class:SnippetManager
some	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^              if (some <- condition)$/;"	g
some	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        if (some <- condition)$/;"	g
some_fun	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/doc_spec.rb	/^        def some_fun(x), do: x$/;"	f
some_fun	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/doc_spec.rb	/^        def some_fun(x), do: x$/;"	f	method:some_fun
some_fun	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/doc_spec.rb	/^        def some_fun(x), do: x$/;"	f	method:some_fun.some_fun
some_fun	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/doc_spec.rb	/^        def some_fun(x), do: x$/;"	f	method:some_fun.some_fun.some_fun
some_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/folding/basic_spec.rb	/^    def some_func do # fold$/;"	f
some_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f
some_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	method:some_func
some_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	method:some_func.some_func
some_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	method:some_func.some_func.some_func
some_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	method:some_func.some_func.some_func.some_func
some_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	method:some_func.some_func.some_func.some_func.some_func
some_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func
some_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func
some_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_func do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func.some_other_func
some_function/1	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/exunit_spec.rb	/^    describe 'some_function\/1' do$/;"	d
some_other_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	method:some_func.some_func.some_func
some_other_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	method:some_func.some_func.some_func.some_func
some_other_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	method:some_func.some_func.some_func.some_func.some_func
some_other_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func
some_other_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func
some_other_func	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/basic_spec.rb	/^    def some_other_func do$/;"	f	method:some_func.some_func.some_func.some_func.some_func.some_func.some_other_func.some_func.some_other_func.some_func
something	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^something <- function()$/;"	f
something	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^something <- function()$/;"	f
sort	plugged/fzf/src/matcher.go	/^	sort           bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
sort	plugged/fzf/src/matcher.go	/^	sort     bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
sort	plugged/fzf/src/terminal.go	/^	sort               bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
sort	plugged/fzf/src/terminal.go	/^	sort    bool$/;"	m	struct:fzf.searchRequest	typeref:typename:bool
sortCriteria	plugged/fzf/src/result.go	/^var sortCriteria []criterion$/;"	v	package:fzf	typeref:typename:[]criterion
sortSelected	plugged/fzf/src/terminal.go	/^func (t *Terminal) sortSelected() []selectedItem {$/;"	f	struct:fzf.Terminal	typeref:typename:[]selectedItem
sortable	plugged/fzf/src/pattern.go	/^	sortable      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
sorted	plugged/fzf/src/merger.go	/^	sorted   bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
spaces_to_indent	plugged/ultisnips/pythonx/UltiSnips/indent_util.py	/^    def spaces_to_indent(self, indent):$/;"	m	class:IndentUtil
spinner	plugged/fzf/src/terminal.go	/^	spinner            []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
spinner	plugged/fzf/src/terminal.go	/^	spinner    string$/;"	m	struct:fzf.previewer	typeref:typename:string
spinner	plugged/fzf/src/terminal.go	/^	spinner string$/;"	m	struct:fzf.previewResult	typeref:typename:string
spinnerDuration	plugged/fzf/src/constants.go	/^	spinnerDuration   = 100 * time.Millisecond$/;"	c	package:fzf
split	plugged/splitjoin.vim/spec/support/vim.rb	/^    def split$/;"	f	module:Support.Vim
splitNth	plugged/fzf/src/options.go	/^func splitNth(str string) ([]Range, error) {$/;"	f	package:fzf	typeref:typename:([]Range, error)
splitRegexp	plugged/fzf/src/options.go	/^	splitRegexp      *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
split_at_whitespace	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^def split_at_whitespace(string):$/;"	f
splitting a list	plugged/splitjoin.vim/spec/plugin/elm_spec.rb	/^    describe 'splitting a list' do$/;"	d
splitting a record	plugged/splitjoin.vim/spec/plugin/elm_spec.rb	/^    describe 'splitting a record' do$/;"	d
splitting a tuple	plugged/splitjoin.vim/spec/plugin/elm_spec.rb	/^    describe 'splitting a tuple' do$/;"	d
splitting/joining a list	plugged/splitjoin.vim/spec/plugin/elm_spec.rb	/^  describe 'splitting\/joining a list' do$/;"	d
splitting/joining a record	plugged/splitjoin.vim/spec/plugin/elm_spec.rb	/^  describe 'splitting\/joining a record' do$/;"	d
splitting/joining a tuple	plugged/splitjoin.vim/spec/plugin/elm_spec.rb	/^  describe 'splitting\/joining a tuple' do$/;"	d
srcfile	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^            srcfile <- srcfile(file, encoding = encoding)$/;"	v	function:try
srcfile	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            srcfile <- srcfile(file, encoding = encoding)$/;"	v	function:try
stack	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    stack = models.TextField(blank=True, null=True)$/;"	v	class:FailureLine
stackwalk_stderr	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    stackwalk_stderr = models.TextField(blank=True, null=True)$/;"	v	class:FailureLine
stackwalk_stdout	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    stackwalk_stdout = models.TextField(blank=True, null=True)$/;"	v	class:FailureLine
stage	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @type stage :: pid | atom | {:global, term} | {:via, module, term} | {atom, node}$/;"	y	module:RateLimiter	access:public
start	plugged/ultisnips/pythonx/UltiSnips/text_objects/base.py	/^    def start(self):$/;"	m	class:TextObject
startChan	plugged/fzf/src/terminal.go	/^	startChan          chan fitpad$/;"	m	struct:fzf.Terminal	typeref:typename:chan fitpad
startEventPoller	plugged/fzf/src/reader.go	/^func (r *Reader) startEventPoller() {$/;"	f	struct:fzf.Reader
startHttpServer	plugged/fzf/src/server.go	/^func startHttpServer(address listenAddress, actionChannel chan []*action, getHandler func(getPar/;"	f	package:fzf	typeref:typename:(net.Listener, int, error)
startServer	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^function startServer(dir, config) {$/;"	f
start_column	plugged/completor.vim/pythonx/completers/common/omni.py	/^    def start_column(self):$/;"	m	class:Omni
start_column	plugged/completor.vim/pythonx/completor/__init__.py	/^    def start_column(self):$/;"	m	class:Completor
start_link	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def start_link() do$/;"	f	module:Broadcaster	access:public
start_link	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def start_link() do$/;"	f	module:C	access:public
start_link	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def start_link() do$/;"	f	module:Printer	access:public
start_link	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def start_link() do$/;"	f	module:QueueBroadcaster	access:public
start_link	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def start_link(number) do$/;"	f	module:A	access:public
start_link	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def start_link(number) do$/;"	f	module:B	access:public
start_server	plugged/ultisnips/pythonx/UltiSnips/remote_pdb.py	/^    def start_server(self):$/;"	m	class:RemotePDB
start_time	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    start_time = models.DateTimeField()$/;"	v	class:Job
started	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    started = models.DateTimeField(null=True)$/;"	v	class:TextLogStep
started_line_number	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    started_line_number = models.PositiveIntegerField()$/;"	v	class:TextLogStep
starts_here	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:ChoicesToken
starts_here	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:MirrorToken
starts_here	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:PythonCodeToken
starts_here	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:ShellCodeToken
starts_here	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:TabStopToken
starts_here	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:TransformationToken
starts_here	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:VimLCodeToken
starts_here	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def starts_here(cls, stream):$/;"	m	class:VisualToken
starts_here	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^    def starts_here(cls, stream, chars=r"{}\\$`"):$/;"	m	class:EscapeCharToken
state	plugged/fzf/src/util/atomicbool.go	/^	state int32 \/\/ "1" is true, "0" is false$/;"	m	struct:util.AtomicBool	typeref:typename:int32
state	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    state = models.CharField(max_length=25)$/;"	v	class:Job
status	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    status = models.CharField(max_length=64, db_index=True)$/;"	v	class:Bugscache
status	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    status = models.CharField(max_length=7, choices=STATUS_CHOICES)$/;"	v	class:FailureLine
status	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    status = models.IntegerField(choices=STATUSES, default=PENDING)$/;"	v	class:JobLog
stderr	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) stderr(str string) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) stderrInternal(str string, allowNLCR bool, resetCode string) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) stderrInternal(str string, allowNLCR bool, resetCode string) {$/;"	f	struct:tui.LightWindow
stdin	plugged/validator.vim/pythonx/lints/javascript/eslint.py	/^    stdin = True$/;"	v	class:EsLint
stdin	plugged/validator.vim/pythonx/lints/javascript/jshint.py	/^    stdin = True$/;"	v	class:Jshint
stdin	plugged/validator.vim/pythonx/lints/javascript/standard.py	/^    stdin = True$/;"	v	class:Standard
stdin	plugged/validator.vim/pythonx/validator/__init__.py	/^    stdin = False$/;"	v	class:Validator
step	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    step = models.ForeignKey(TextLogStep, on_delete=models.CASCADE, related_name='errors')$/;"	v	class:TextLogError
steps	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    steps = ($/;"	v	class:MovePosition_DelSecondLine1
steps	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    steps = ($/;"	v	class:MovePosition_InsSameLine1
steps	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    steps = (((0, 1), (0, -8), (0, 1)), ((0, 1), (0, 1), (0, 2)))$/;"	v	class:MovePosition_DelSameLine
steps	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    steps = (((0, 12), (0, -4), (1, 0)), ((0, 12), (-1, 0), (0, 12)))$/;"	v	class:MovePosition_DelSecondLine
steps	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    steps = (((0, 3), (0, 3), (0, 12)),)$/;"	v	class:MovePosition_InsSameLine2
steps	plugged/ultisnips/pythonx/UltiSnips/test_position.py	/^    steps = (((0, 4), (0, -3), (0, 3)), ((0, 8), (0, -1), (0, 3)))$/;"	v	class:MovePosition_DelSameLine1
store_buffer	plugged/completor.vim/pythonx/completers/common/buffer.py	/^    def store_buffer(self, buffer, base, cur_nr, cur_line):$/;"	m	class:TokenStore
str	plugged/fzf/src/tokenizer.go	/^	str   *string$/;"	m	struct:fzf.Delimiter	typeref:typename:*string
strLines	plugged/fzf/src/options.go	/^func strLines(str string) []string {$/;"	f	package:fzf	typeref:typename:[]string
string	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/doc_spec.rb	/^  describe 'string' do$/;"	d
string array literals	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "string array literals" do$/;"	d
stringBytes	plugged/fzf/src/functions.go	/^func stringBytes(data string) []byte {$/;"	f	package:fzf	typeref:typename:[]byte
stripAnsi	plugged/fzf/src/terminal.go	/^	stripAnsi  bool$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:bool
strip_doc_blocks	plugged/splitjoin.vim/spec/support/vim-elixir/bin/test_indent	/^def strip_doc_blocks(body)$/;"	f
strip_optional	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^def strip_optional(menu):$/;"	f
strip_tag	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^def strip_tag(word):$/;"	f
structs	plugged/splitjoin.vim/spec/plugin/go_spec.rb	/^  describe "structs" do$/;"	d
structs	plugged/splitjoin.vim/spec/plugin/rust_spec.rb	/^  describe "structs" do$/;"	d
structure names	plugged/splitjoin.vim/spec/support/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?struct[ \\t]+([a-zA-Z0-9_]+)\/\\2\/s,structure names\/$/;"	k	langdef:Rust
style	plugged/fzf/src/tui/tcell.go	/^func (p ColorPair) style() tcell.Style {$/;"	f	unknown:tui.ColorPair	typeref:typename:tcell.Style
submit_time	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    submit_time = models.DateTimeField()$/;"	v	class:Job
subscription_tag	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @opaque subscription_tag :: reference$/;"	y	module:RateLimiter	access:public
subtest	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    subtest = models.TextField(blank=True, null=True)$/;"	v	class:FailureLine
summary	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    summary = models.CharField(max_length=255)$/;"	v	class:Bugscache
support_popup	plugged/completor.vim/pythonx/completor/__init__.py	/^    def support_popup(self):$/;"	m	class:Completor
suppress	plugged/fzf/src/terminal.go	/^	suppress           bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
surround.vim	plugged/vim-surround/README.markdown	/^# surround.vim$/;"	c
suspend_proxy_edits	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^def suspend_proxy_edits():$/;"	f
swift	plugged/completor.vim/README.md	/^#### swift$/;"	t	section:Completor""Completers
symbol	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    symbol = models.CharField(max_length=25, default='?', db_index=True)$/;"	v	class:JobGroup
symbol	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    symbol = models.CharField(max_length=25, default='?', db_index=True)$/;"	v	class:JobType
symbol array literals	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "symbol array literals" do$/;"	d
sync	plugged/completor.vim/pythonx/completers/ale.py	/^    sync = True$/;"	v	class:ALE
sync	plugged/completor.vim/pythonx/completers/common/__init__.py	/^    sync = True$/;"	v	class:Common
sync	plugged/completor.vim/pythonx/completers/common/buffer.py	/^    sync = True$/;"	v	class:Buffer
sync	plugged/completor.vim/pythonx/completers/common/filename.py	/^    sync = True$/;"	v	class:Filename
sync	plugged/completor.vim/pythonx/completers/common/neoinclude.py	/^    sync = True$/;"	v	class:Neoinclude
sync	plugged/completor.vim/pythonx/completers/common/omni.py	/^    sync = True$/;"	v	class:Omni
sync	plugged/completor.vim/pythonx/completers/common/ultisnips.py	/^    sync = True$/;"	v	class:Ultisnips
sync	plugged/completor.vim/pythonx/completor/__init__.py	/^    sync = False$/;"	v	class:Completor
sync	plugged/fzf/src/terminal.go	/^	sync    bool$/;"	m	struct:fzf.searchRequest	typeref:typename:bool
sync_notify	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def sync_notify(event, timeout \\\\ 5000) do$/;"	f	module:Broadcaster	access:public
sync_notify	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^        def sync_notify(event, timeout \\\\ 5000) do$/;"	f	module:QueueBroadcaster	access:public
syntax	plugged/completor.vim/README.md	/^#### syntax$/;"	t	section:Completor""Completers
syntax	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def syntax(content, pattern)$/;"	f	class:Buffer
system	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^def system(cmd, capture=False, ok_fail=False):$/;"	f
t	plugged/fzf/src/terminal.go	/^	t actionType$/;"	m	struct:fzf.action	typeref:typename:actionType
tabstop	plugged/fzf/src/terminal.go	/^	tabstop            int$/;"	m	struct:fzf.Terminal	typeref:typename:int
tabstop	plugged/fzf/src/tui/light.go	/^	tabstop       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
tabstop	plugged/fzf/src/tui/light.go	/^	tabstop  int$/;"	m	struct:tui.LightWindow	typeref:typename:int
tabular#DoGTabularize	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! tabular#DoGTabularize()$/;"	f
tabular#ElementFormatPattern	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! tabular#ElementFormatPattern()$/;"	f
tabular#PipeRange	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! tabular#PipeRange(includepat, ...) range$/;"	f
tabular#PipeRangeWithOptions	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! tabular#PipeRangeWithOptions(includepat, filterlist, options) range$/;"	f
tabular#SplitDelimUnitTest	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! tabular#SplitDelimUnitTest()$/;"	f
tabular#TabularizeStrings	plugged/splitjoin.vim/spec/support/tabular/autoload/tabular.vim	/^function! tabular#TabularizeStrings(strings, delim, ...)$/;"	f
tac	plugged/fzf/src/matcher.go	/^	tac            bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
tac	plugged/fzf/src/merger.go	/^	tac      bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
tag_pattern	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^tag_pattern = re.compile(br'\\s\\((InBase|Hidden|Inaccessible|,)+\\)')$/;"	v
target/$(BINARY32)	plugged/fzf/Makefile	/^target\/$(BINARY32): $(SOURCES)$/;"	t
target/$(BINARY64)	plugged/fzf/Makefile	/^target\/$(BINARY64): $(SOURCES)$/;"	t
target/$(BINARYARM5)	plugged/fzf/Makefile	/^target\/$(BINARYARM5): $(SOURCES)$/;"	t
target/$(BINARYARM6)	plugged/fzf/Makefile	/^target\/$(BINARYARM6): $(SOURCES)$/;"	t
target/$(BINARYARM7)	plugged/fzf/Makefile	/^target\/$(BINARYARM7): $(SOURCES)$/;"	t
target/$(BINARYARM8)	plugged/fzf/Makefile	/^target\/$(BINARYARM8): $(SOURCES)$/;"	t
target/$(BINARYLOONG64)	plugged/fzf/Makefile	/^target\/$(BINARYLOONG64): $(SOURCES)$/;"	t
target/$(BINARYPPC64LE)	plugged/fzf/Makefile	/^target\/$(BINARYPPC64LE): $(SOURCES)$/;"	t
target/$(BINARYRISCV64)	plugged/fzf/Makefile	/^target\/$(BINARYRISCV64): $(SOURCES)$/;"	t
target/$(BINARYS390)	plugged/fzf/Makefile	/^target\/$(BINARYS390): $(SOURCES)$/;"	t
task_id	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    task_id = models.CharField(max_length=22,$/;"	v	class:TaskclusterMetadata
tearDown	plugged/ultisnips/test/vim_test_case.py	/^    def tearDown(self):$/;"	m	class:VimTestCase
teardown	plugged/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestBase
teardown	plugged/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestGoFZF
teardown	plugged/fzf/test/test_go.rb	/^  def teardown$/;"	f	module:TestShell
tempFiles	plugged/fzf/src/terminal.go	/^	tempFiles []string$/;"	m	struct:fzf.commandSpec	typeref:typename:[]string
template	plugged/fzf/src/terminal.go	/^	template     string$/;"	m	struct:fzf.previewRequest	typeref:typename:string
template	plugged/fzf/src/terminal.go	/^	template   string$/;"	m	struct:fzf.replacePlaceholderParams	typeref:typename:string
template	plugged/fzf/src/terminal_test.go	/^	template string$/;"	m	struct:fzf.give	typeref:typename:string
templateToString	plugged/fzf/src/terminal_test.go	/^func templateToString(format string, data interface{}) string {$/;"	f	package:fzf	typeref:typename:string
tempname	plugged/completor.vim/pythonx/completor/__init__.py	/^    def tempname(self):$/;"	m	class:Completor
tempname	plugged/fzf/test/test_go.rb	/^  def tempname$/;"	f	class:TestBase
term	plugged/fzf/src/pattern.go	/^type term struct {$/;"	s	package:fzf
termEqual	plugged/fzf/src/pattern.go	/^	termEqual$/;"	c	package:fzf
termExact	plugged/fzf/src/pattern.go	/^	termExact$/;"	c	package:fzf
termFuzzy	plugged/fzf/src/pattern.go	/^	termFuzzy termType = iota$/;"	c	package:fzf	typeref:type:termType
termPrefix	plugged/fzf/src/pattern.go	/^	termPrefix$/;"	c	package:fzf
termSet	plugged/fzf/src/pattern.go	/^type termSet []term$/;"	t	package:fzf	typeref:typename:[]term
termSets	plugged/fzf/src/pattern.go	/^	termSets      []termSet$/;"	m	struct:fzf.Pattern	typeref:typename:[]termSet
termSize	plugged/fzf/src/terminal.go	/^	termSize           tui.TermSize$/;"	m	struct:fzf.Terminal	typeref:typename:tui.TermSize
termSuffix	plugged/fzf/src/pattern.go	/^	termSuffix$/;"	c	package:fzf
termType	plugged/fzf/src/pattern.go	/^type termType int$/;"	t	package:fzf	typeref:typename:int
terminate	plugged/fzf/src/reader.go	/^func (r *Reader) terminate() {$/;"	f	struct:fzf.Reader
terminate	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @callback terminate(reason, state :: term) ::$/;"	c	module:RateLimiter
tern	plugged/completor.vim/pythonx/completers/javascript/package.json	/^    "tern": "^0.24.3",$/;"	s	object:dependencies
tern	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^var tern = require('tern');$/;"	v
ternaries	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "ternaries" do$/;"	d
test	plugged/fzf/Makefile	/^test: $(SOURCES)$/;"	t
test	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^                   description = description, test = test,$/;"	n	list:makeRestart.anonListb1d136150307
test	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^test <- this('the function works', {$/;"	g
test	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^test <- this('the function works',$/;"	g
test	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            description = description, test = test,$/;"	n	list:makeRestart.anonListe36e773c0307
test	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^test <- this('the function works', {$/;"	g
test	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^test <- this('the function works',$/;"	g
test	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/anonymous_functions_spec.rb	/^  def test do$/;"	f
test	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/blocks_spec.rb	/^    def test do$/;"	f	method:name.name.f.f
test	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/if_spec.rb	/^  def test do$/;"	f
test	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^    def test do$/;"	f	method:example.project.config.test.test.test.project.test.create.double.double.double.test_another_feature
test	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def test do$/;"	f	method:example.project.config
test	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def test do$/;"	f	method:example.project.config.test
test	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def test do$/;"	f	method:example.project.config.test.test
test	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def test do$/;"	f	method:example.project.config.test.test.test.project
test	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/pipeline_spec.rb	/^  def test do$/;"	f
test	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/pipeline_spec.rb	/^  def test do$/;"	f	method:test
test	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/pipeline_spec.rb	/^  def test do$/;"	f	method:test.test
test	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    test = models.TextField(blank=True, null=True)$/;"	v	class:FailureLine
testCase	plugged/fzf/src/terminal_test.go	/^type testCase struct {$/;"	s	package:fzf
testCommands	plugged/fzf/src/terminal_test.go	/^func testCommands(t *testing.T, tests []testCase) {$/;"	f	package:fzf
testParserReference	plugged/fzf/src/ansi_test.go	/^func testParserReference(t testing.TB, str string) {$/;"	f	package:fzf
test_accept_non_empty	plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty$/;"	f	class:TestGoFZF
test_accept_non_empty_with_empty_list	plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_empty_list$/;"	f	class:TestGoFZF
test_accept_non_empty_with_multi_selection	plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_multi_selection$/;"	f	class:TestGoFZF
test_accept_or_print_query_with_match	plugged/fzf/test/test_go.rb	/^  def test_accept_or_print_query_with_match$/;"	f	class:TestGoFZF
test_accept_or_print_query_with_multi_selection	plugged/fzf/test/test_go.rb	/^  def test_accept_or_print_query_with_multi_selection$/;"	f	class:TestGoFZF
test_accept_or_print_query_without_match	plugged/fzf/test/test_go.rb	/^  def test_accept_or_print_query_without_match$/;"	f	class:TestGoFZF
test_alt_c	plugged/fzf/test/test_go.rb	/^  def test_alt_c$/;"	f	module:TestShell
test_alt_c_command	plugged/fzf/test/test_go.rb	/^  def test_alt_c_command$/;"	f	module:TestShell
test_another_feature	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/lists_spec.rb	/^  def test_another_feature do$/;"	f	method:example.project.config.test.test.test.project.test.create.double.double.double
test_args	plugged/validator.vim/tests/test_validator.py	/^def test_args():$/;"	f
test_backward_delete_char_eof	plugged/fzf/test/test_go.rb	/^  def test_backward_delete_char_eof$/;"	f	class:TestGoFZF
test_backward_eof	plugged/fzf/test/test_go.rb	/^  def test_backward_eof$/;"	f	class:TestGoFZF
test_become	plugged/fzf/test/test_go.rb	/^  def test_become$/;"	f	class:TestGoFZF
test_become_tty	plugged/fzf/test/test_go.rb	/^  def test_become_tty$/;"	f	class:TestGoFZF
test_binary	plugged/validator.vim/tests/test_validator.py	/^def test_binary():$/;"	f
test_bind	plugged/fzf/test/test_go.rb	/^  def test_bind$/;"	f	class:TestGoFZF
test_bind_print_query	plugged/fzf/test/test_go.rb	/^  def test_bind_print_query$/;"	f	class:TestGoFZF
test_bind_replace_query	plugged/fzf/test/test_go.rb	/^  def test_bind_replace_query$/;"	f	class:TestGoFZF
test_cancel	plugged/fzf/test/test_go.rb	/^  def test_cancel$/;"	f	class:TestGoFZF
test_change_and_transform_header	plugged/fzf/test/test_go.rb	/^  def test_change_and_transform_header$/;"	f	class:TestGoFZF
test_change_first_last	plugged/fzf/test/test_go.rb	/^  def test_change_first_last$/;"	f	class:TestGoFZF
test_change_header	plugged/fzf/test/test_go.rb	/^  def test_change_header$/;"	f	class:TestGoFZF
test_change_preview_window	plugged/fzf/test/test_go.rb	/^  def test_change_preview_window$/;"	f	class:TestGoFZF
test_change_preview_window_rotate	plugged/fzf/test/test_go.rb	/^  def test_change_preview_window_rotate$/;"	f	class:TestGoFZF
test_change_preview_window_rotate_hidden	plugged/fzf/test/test_go.rb	/^  def test_change_preview_window_rotate_hidden$/;"	f	class:TestGoFZF
test_change_preview_window_rotate_hidden_down	plugged/fzf/test/test_go.rb	/^  def test_change_preview_window_rotate_hidden_down$/;"	f	class:TestGoFZF
test_change_preview_window_should_not_reset_change_preview	plugged/fzf/test/test_go.rb	/^  def test_change_preview_window_should_not_reset_change_preview$/;"	f	class:TestGoFZF
test_change_prompt	plugged/fzf/test/test_go.rb	/^  def test_change_prompt$/;"	f	class:TestGoFZF
test_change_query	plugged/fzf/test/test_go.rb	/^  def test_change_query$/;"	f	class:TestGoFZF
test_clear_list_when_header_lines_changed_due_to_reload	plugged/fzf/test/test_go.rb	/^  def test_clear_list_when_header_lines_changed_due_to_reload$/;"	f	class:TestGoFZF
test_clear_query	plugged/fzf/test/test_go.rb	/^  def test_clear_query$/;"	f	class:TestGoFZF
test_clear_selection	plugged/fzf/test/test_go.rb	/^  def test_clear_selection$/;"	f	class:TestGoFZF
test_close	plugged/fzf/test/test_go.rb	/^  def test_close$/;"	f	class:TestGoFZF
test_complete_quoted_command	plugged/fzf/test/test_go.rb	/^  def test_complete_quoted_command$/;"	f	class:TestZsh
test_ctrl_r	plugged/fzf/test/test_go.rb	/^  def test_ctrl_r$/;"	f	module:TestShell
test_ctrl_r_abort	plugged/fzf/test/test_go.rb	/^  def test_ctrl_r_abort$/;"	f	module:TestShell
test_ctrl_r_multiline	plugged/fzf/test/test_go.rb	/^  def test_ctrl_r_multiline$/;"	f	module:TestShell
test_ctrl_t	plugged/fzf/test/test_go.rb	/^  def test_ctrl_t$/;"	f	module:TestShell
test_ctrl_t_unicode	plugged/fzf/test/test_go.rb	/^  def test_ctrl_t_unicode$/;"	f	module:TestShell
test_custom_completion	plugged/fzf/test/test_go.rb	/^  def test_custom_completion$/;"	f	module:CompletionTest
test_custom_completion_api	plugged/fzf/test/test_go.rb	/^  def test_custom_completion_api$/;"	f	module:CompletionTest
test_cycle	plugged/fzf/test/test_go.rb	/^  def test_cycle$/;"	f	class:TestGoFZF
test_default_extended	plugged/fzf/test/test_go.rb	/^  def test_default_extended$/;"	f	class:TestGoFZF
test_delete_with_modifiers	plugged/fzf/test/test_go.rb	/^  def test_delete_with_modifiers$/;"	f	class:TestGoFZF
test_dir_completion	plugged/fzf/test/test_go.rb	/^  def test_dir_completion$/;"	f	module:CompletionTest
test_disabled	plugged/completor.vim/tests/test_completor.py	/^def test_disabled(vim_mod):$/;"	f
test_disabled	plugged/fzf/test/test_go.rb	/^  def test_disabled$/;"	f	class:TestGoFZF
test_disabled_preview_update	plugged/fzf/test/test_go.rb	/^  def test_disabled_preview_update$/;"	f	class:TestGoFZF
test_doc	plugged/completor.vim/tests/test_go.py	/^    def test_doc(self, action):$/;"	m	class:TestDoc
test_dynamic_completion_loader	plugged/fzf/test/test_go.rb	/^  def test_dynamic_completion_loader$/;"	f	class:TestBash
test_edit	plugged/completor.vim/tests/test_edit.py	/^def test_edit():$/;"	f
test_ellipsis	plugged/fzf/test/test_go.rb	/^  def test_ellipsis$/;"	f	class:TestGoFZF
test_escaped_meta_characters	plugged/fzf/test/test_go.rb	/^  def test_escaped_meta_characters$/;"	f	class:TestGoFZF
test_eslint_cmd	plugged/validator.vim/tests/test_javascript.py	/^def test_eslint_cmd(none_exists):$/;"	f
test_eslint_parse_loclist	plugged/validator.vim/tests/test_javascript.py	/^def test_eslint_parse_loclist():$/;"	f
test_exact	plugged/fzf/test/test_go.rb	/^  def test_exact$/;"	f	class:TestGoFZF
test_execute	plugged/fzf/test/test_go.rb	/^  def test_execute$/;"	f	class:TestGoFZF
test_execute_multi	plugged/fzf/test/test_go.rb	/^  def test_execute_multi$/;"	f	class:TestGoFZF
test_execute_plus_flag	plugged/fzf/test/test_go.rb	/^  def test_execute_plus_flag$/;"	f	class:TestGoFZF
test_execute_shell	plugged/fzf/test/test_go.rb	/^  def test_execute_shell$/;"	f	class:TestGoFZF
test_exit_0	plugged/fzf/test/test_go.rb	/^  def test_exit_0$/;"	f	class:TestGoFZF
test_exit_0_exit_code	plugged/fzf/test/test_go.rb	/^  def test_exit_0_exit_code$/;"	f	class:TestGoFZF
test_exitstatus_empty	plugged/fzf/test/test_go.rb	/^  def test_exitstatus_empty$/;"	f	class:TestGoFZF
test_expect	plugged/fzf/test/test_go.rb	/^  def test_expect$/;"	f	class:TestGoFZF
test_expect_print_query	plugged/fzf/test/test_go.rb	/^  def test_expect_print_query$/;"	f	class:TestGoFZF
test_expect_print_query_select_1	plugged/fzf/test/test_go.rb	/^  def test_expect_print_query_select_1$/;"	f	class:TestGoFZF
test_expect_printable_character_print_query	plugged/fzf/test/test_go.rb	/^  def test_expect_printable_character_print_query$/;"	f	class:TestGoFZF
test_expect_with_bound_actions	plugged/fzf/test/test_go.rb	/^  def test_expect_with_bound_actions$/;"	f	class:TestGoFZF
test_file_completion	plugged/fzf/test/test_go.rb	/^  def test_file_completion$/;"	f	module:CompletionTest
test_file_completion_root	plugged/fzf/test/test_go.rb	/^  def test_file_completion_root$/;"	f	module:CompletionTest
test_file_completion_unicode	plugged/fzf/test/test_go.rb	/^  def test_file_completion_unicode$/;"	f	module:CompletionTest
test_file_word	plugged/fzf/test/test_go.rb	/^  def test_file_word$/;"	f	class:TestGoFZF
test_filter_exitstatus	plugged/fzf/test/test_go.rb	/^  def test_filter_exitstatus$/;"	f	class:TestGoFZF
test_focus_event	plugged/fzf/test/test_go.rb	/^  def test_focus_event$/;"	f	class:TestGoFZF
test_format_cmd	plugged/validator.vim/tests/test_validator.py	/^def test_format_cmd():$/;"	f
test_fzf_default_command	plugged/fzf/test/test_go.rb	/^  def test_fzf_default_command$/;"	f	class:TestGoFZF
test_fzf_default_command_failure	plugged/fzf/test/test_go.rb	/^  def test_fzf_default_command_failure$/;"	f	class:TestGoFZF
test_fzf_multi_line	plugged/fzf/test/test_go.rb	/^  def test_fzf_multi_line$/;"	f	class:TestGoFZF
test_fzf_multi_line_no_pointer_and_marker	plugged/fzf/test/test_go.rb	/^  def test_fzf_multi_line_no_pointer_and_marker$/;"	f	class:TestGoFZF
test_fzf_multi_line_reverse	plugged/fzf/test/test_go.rb	/^  def test_fzf_multi_line_reverse$/;"	f	class:TestGoFZF
test_fzf_pos	plugged/fzf/test/test_go.rb	/^  def test_fzf_pos$/;"	f	class:TestGoFZF
test_get_cmd_info	plugged/completor.vim/tests/test_cpp.py	/^def test_get_cmd_info(vim_mod):$/;"	f
test_get_cmd_info	plugged/completor.vim/tests/test_go.py	/^    def test_get_cmd_info(self, vim_mod, create_buffer, action, monkeypatch):$/;"	m	class:TestGetCmdInfo
test_get_completer	plugged/completor.vim/tests/test_api.py	/^def test_get_completer(vim_mod):$/;"	f
test_get_start_column	plugged/completor.vim/tests/test_api.py	/^def test_get_start_column(vim_mod):$/;"	f
test_get_token_path	plugged/completor.vim/tests/test_cpp.py	/^def test_get_token_path():$/;"	f
test_gofmt	plugged/validator.vim/tests/test_go.py	/^def test_gofmt():$/;"	f
test_golint	plugged/validator.vim/tests/test_go.py	/^def test_golint():$/;"	f
test_gometalinter	plugged/validator.vim/tests/test_go.py	/^def test_gometalinter():$/;"	f
test_has_omnifunc	plugged/completor.vim/tests/test_omni.py	/^def test_has_omnifunc(vim_mod):$/;"	f
test_header	plugged/fzf/test/test_go.rb	/^  def test_header$/;"	f	class:TestGoFZF
test_header_and_header_lines	plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse	plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse_list	plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse_list$/;"	f	class:TestGoFZF
test_header_first	plugged/fzf/test/test_go.rb	/^  def test_header_first$/;"	f	class:TestGoFZF
test_header_first_reverse	plugged/fzf/test/test_go.rb	/^  def test_header_first_reverse$/;"	f	class:TestGoFZF
test_header_lines	plugged/fzf/test/test_go.rb	/^  def test_header_lines$/;"	f	class:TestGoFZF
test_header_lines_overflow	plugged/fzf/test/test_go.rb	/^  def test_header_lines_overflow$/;"	f	class:TestGoFZF
test_header_lines_reverse	plugged/fzf/test/test_go.rb	/^  def test_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_lines_reverse_list	plugged/fzf/test/test_go.rb	/^  def test_header_lines_reverse_list$/;"	f	class:TestGoFZF
test_header_lines_with_nth	plugged/fzf/test/test_go.rb	/^  def test_header_lines_with_nth$/;"	f	class:TestGoFZF
test_header_reverse	plugged/fzf/test/test_go.rb	/^  def test_header_reverse$/;"	f	class:TestGoFZF
test_header_reverse_list	plugged/fzf/test/test_go.rb	/^  def test_header_reverse_list$/;"	f	class:TestGoFZF
test_height_range_fit	plugged/fzf/test/test_go.rb	/^  def test_height_range_fit$/;"	f	class:TestGoFZF
test_height_range_fit_preview_above	plugged/fzf/test/test_go.rb	/^  def test_height_range_fit_preview_above$/;"	f	class:TestGoFZF
test_height_range_fit_preview_above_alternative	plugged/fzf/test/test_go.rb	/^  def test_height_range_fit_preview_above_alternative$/;"	f	class:TestGoFZF
test_height_range_fit_preview_left	plugged/fzf/test/test_go.rb	/^  def test_height_range_fit_preview_left$/;"	f	class:TestGoFZF
test_height_range_overflow	plugged/fzf/test/test_go.rb	/^  def test_height_range_overflow$/;"	f	class:TestGoFZF
test_height_range_with_exit_0	plugged/fzf/test/test_go.rb	/^  def test_height_range_with_exit_0$/;"	f	class:TestGoFZF
test_history	plugged/fzf/test/test_go.rb	/^  def test_history$/;"	f	class:TestGoFZF
test_hscroll_off	plugged/fzf/test/test_go.rb	/^  def test_hscroll_off$/;"	f	class:TestGoFZF
test_info_command	plugged/fzf/test/test_go.rb	/^  def test_info_command$/;"	f	class:TestGoFZF
test_info_command_inline	plugged/fzf/test/test_go.rb	/^  def test_info_command_inline$/;"	f	class:TestGoFZF
test_info_command_inline_right	plugged/fzf/test/test_go.rb	/^  def test_info_command_inline_right$/;"	f	class:TestGoFZF
test_info_command_right	plugged/fzf/test/test_go.rb	/^  def test_info_command_right$/;"	f	class:TestGoFZF
test_info_hidden	plugged/fzf/test/test_go.rb	/^  def test_info_hidden$/;"	f	class:TestGoFZF
test_info_inline_right	plugged/fzf/test/test_go.rb	/^  def test_info_inline_right$/;"	f	class:TestGoFZF
test_info_inline_right_clearance	plugged/fzf/test/test_go.rb	/^  def test_info_inline_right_clearance$/;"	f	class:TestGoFZF
test_info_inline_separator	plugged/fzf/test/test_go.rb	/^  def test_info_inline_separator$/;"	f	class:TestGoFZF
test_info_no_separator	plugged/fzf/test/test_go.rb	/^  def test_info_no_separator$/;"	f	class:TestGoFZF
test_info_right	plugged/fzf/test/test_go.rb	/^  def test_info_right$/;"	f	class:TestGoFZF
test_info_separator_ansi_colors_and_tabs	plugged/fzf/test/test_go.rb	/^  def test_info_separator_ansi_colors_and_tabs$/;"	f	class:TestGoFZF
test_info_separator_no_unicode	plugged/fzf/test/test_go.rb	/^  def test_info_separator_no_unicode$/;"	f	class:TestGoFZF
test_info_separator_repeat	plugged/fzf/test/test_go.rb	/^  def test_info_separator_repeat$/;"	f	class:TestGoFZF
test_info_separator_unicode	plugged/fzf/test/test_go.rb	/^  def test_info_separator_unicode$/;"	f	class:TestGoFZF
test_interrupt_execute	plugged/fzf/test/test_go.rb	/^  def test_interrupt_execute$/;"	f	class:TestGoFZF
test_invalid_cache	plugged/fzf/test/test_go.rb	/^  def test_invalid_cache$/;"	f	class:TestGoFZF
test_invalid_cache_query_type	plugged/fzf/test/test_go.rb	/^  def test_invalid_cache_query_type$/;"	f	class:TestGoFZF
test_invalid_option	plugged/fzf/test/test_go.rb	/^  def test_invalid_option$/;"	f	class:TestGoFZF
test_inverse_only_search_should_not_sort_the_result	plugged/fzf/test/test_go.rb	/^  def test_inverse_only_search_should_not_sort_the_result$/;"	f	class:TestGoFZF
test_is_message_end	plugged/completor.vim/tests/test_api.py	/^def test_is_message_end(vim_mod):$/;"	f
test_item_index_reset_on_reload	plugged/fzf/test/test_go.rb	/^  def test_item_index_reset_on_reload$/;"	f	class:TestGoFZF
test_jscs_parse_loclist	plugged/validator.vim/tests/test_javascript.py	/^def test_jscs_parse_loclist():$/;"	f
test_jshint_parse_loclist	plugged/validator.vim/tests/test_javascript.py	/^def test_jshint_parse_loclist():$/;"	f
test_jump	plugged/fzf/test/test_go.rb	/^  def test_jump$/;"	f	class:TestGoFZF
test_jump_accept	plugged/fzf/test/test_go.rb	/^  def test_jump_accept$/;"	f	class:TestGoFZF
test_jump_events	plugged/fzf/test/test_go.rb	/^  def test_jump_events$/;"	f	class:TestGoFZF
test_keep_right	plugged/fzf/test/test_go.rb	/^  def test_keep_right$/;"	f	class:TestGoFZF
test_key_bindings	plugged/fzf/test/test_go.rb	/^  def test_key_bindings$/;"	f	class:TestGoFZF
test_kill_default_command_on_abort	plugged/fzf/test/test_go.rb	/^  def test_kill_default_command_on_abort$/;"	f	class:TestGoFZF
test_kill_default_command_on_accept	plugged/fzf/test/test_go.rb	/^  def test_kill_default_command_on_accept$/;"	f	class:TestGoFZF
test_kill_reload_command_on_abort	plugged/fzf/test/test_go.rb	/^  def test_kill_reload_command_on_abort$/;"	f	class:TestGoFZF
test_kill_reload_command_on_accept	plugged/fzf/test/test_go.rb	/^  def test_kill_reload_command_on_accept$/;"	f	class:TestGoFZF
test_labels_bottom	plugged/fzf/test/test_go.rb	/^  def test_labels_bottom$/;"	f	class:TestGoFZF
test_labels_center	plugged/fzf/test/test_go.rb	/^  def test_labels_center$/;"	f	class:TestGoFZF
test_labels_left	plugged/fzf/test/test_go.rb	/^  def test_labels_left$/;"	f	class:TestGoFZF
test_labels_right	plugged/fzf/test/test_go.rb	/^  def test_labels_right$/;"	f	class:TestGoFZF
test_labels_variables	plugged/fzf/test/test_go.rb	/^  def test_labels_variables$/;"	f	class:TestGoFZF
test_listen	plugged/fzf/test/test_go.rb	/^  def test_listen$/;"	f	class:TestGoFZF
test_listen_with_api_key	plugged/fzf/test/test_go.rb	/^  def test_listen_with_api_key$/;"	f	class:TestGoFZF
test_load	plugged/completor.vim/tests/test_completor.py	/^def test_load(vim_mod, monkeypatch):$/;"	f
test_load_checkers	plugged/validator.vim/tests/test_load.py	/^def test_load_checkers():$/;"	f
test_long_line	plugged/fzf/test/test_go.rb	/^  def test_long_line$/;"	f	class:TestGoFZF
test_luac	plugged/validator.vim/tests/test_lua.py	/^def test_luac():$/;"	f
test_luacheck	plugged/validator.vim/tests/test_lua.py	/^def test_luacheck():$/;"	f
test_margin	plugged/fzf/test/test_go.rb	/^  def test_margin$/;"	f	class:TestGoFZF
test_margin_reverse	plugged/fzf/test/test_go.rb	/^  def test_margin_reverse$/;"	f	class:TestGoFZF
test_margin_reverse_list	plugged/fzf/test/test_go.rb	/^  def test_margin_reverse_list$/;"	f	class:TestGoFZF
test_marker	plugged/fzf/test/test_go.rb	/^  def test_marker$/;"	f	class:TestGoFZF
test_message_end	plugged/completor.vim/tests/test_rust.py	/^def test_message_end(vim_mod):$/;"	f
test_multi_action	plugged/fzf/test/test_go.rb	/^  def test_multi_action$/;"	f	class:TestGoFZF
test_multi_max	plugged/fzf/test/test_go.rb	/^  def test_multi_max$/;"	f	class:TestGoFZF
test_multi_order	plugged/fzf/test/test_go.rb	/^  def test_multi_order$/;"	f	class:TestGoFZF
test_no_clear	plugged/fzf/test/test_go.rb	/^  def test_no_clear$/;"	f	class:TestGoFZF
test_no_extra_newline_issue_3209	plugged/fzf/test/test_go.rb	/^  def test_no_extra_newline_issue_3209$/;"	f	class:TestGoFZF
test_normalized_match	plugged/fzf/test/test_go.rb	/^  def test_normalized_match$/;"	f	class:TestGoFZF
test_on_data	plugged/completor.vim/tests/test_api.py	/^def test_on_data(vim_mod):$/;"	f
test_on_data	plugged/completor.vim/tests/test_common.py	/^def test_on_data(vim_mod, create_buffer):$/;"	f
test_on_data	plugged/completor.vim/tests/test_filename.py	/^def test_on_data(vim_mod):$/;"	f
test_on_data	plugged/completor.vim/tests/test_omni.py	/^def test_on_data(vim_mod):$/;"	f
test_on_doc	plugged/completor.vim/tests/test_rust.py	/^def test_on_doc(vim_mod):$/;"	f
test_one_and_zero	plugged/fzf/test/test_go.rb	/^  def test_one_and_zero$/;"	f	class:TestGoFZF
test_or_operator	plugged/fzf/test/test_go.rb	/^  def test_or_operator$/;"	f	class:TestGoFZF
test_parse	plugged/completor.vim/tests/test_cpp.py	/^def test_parse(vim_mod):$/;"	f
test_parse	plugged/completor.vim/tests/test_go.py	/^def test_parse():$/;"	f
test_parse	plugged/completor.vim/tests/test_rust.py	/^def test_parse():$/;"	f
test_parse_ast_dump	plugged/completor.vim/tests/test_cpp.py	/^def test_parse_ast_dump():$/;"	f
test_parse_config	plugged/completor.vim/tests/test_completor.py	/^def test_parse_config():$/;"	f
test_parse_loclist	plugged/validator.vim/tests/test_validator.py	/^def test_parse_loclist():$/;"	f
test_partial_caching	plugged/fzf/test/test_go.rb	/^  def test_partial_caching$/;"	f	class:TestGoFZF
test_perl	plugged/validator.vim/tests/test_perl.py	/^def test_perl():$/;"	f
test_perlcritic	plugged/validator.vim/tests/test_perl.py	/^def test_perlcritic():$/;"	f
test_pointer	plugged/fzf/test/test_go.rb	/^  def test_pointer$/;"	f	class:TestGoFZF
test_pointer_with_jump	plugged/fzf/test/test_go.rb	/^  def test_pointer_with_jump$/;"	f	class:TestGoFZF
test_pos	plugged/fzf/test/test_go.rb	/^  def test_pos$/;"	f	class:TestGoFZF
test_prepare_request	plugged/completor.vim/tests/test_api.py	/^def test_prepare_request(vim_mod, create_buffer):$/;"	f
test_prev_next_selected	plugged/fzf/test/test_go.rb	/^  def test_prev_next_selected$/;"	f	class:TestGoFZF
test_preview	plugged/fzf/test/test_go.rb	/^  def test_preview$/;"	f	class:TestGoFZF
test_preview_bindings_with_default_preview	plugged/fzf/test/test_go.rb	/^  def test_preview_bindings_with_default_preview$/;"	f	class:TestGoFZF
test_preview_bindings_without_default_preview	plugged/fzf/test/test_go.rb	/^  def test_preview_bindings_without_default_preview$/;"	f	class:TestGoFZF
test_preview_clear_screen	plugged/fzf/test/test_go.rb	/^  def test_preview_clear_screen$/;"	f	class:TestGoFZF
test_preview_correct_tab_width_after_ansi_reset_code	plugged/fzf/test/test_go.rb	/^  def test_preview_correct_tab_width_after_ansi_reset_code$/;"	f	class:TestGoFZF
test_preview_file	plugged/fzf/test/test_go.rb	/^  def test_preview_file$/;"	f	class:TestGoFZF
test_preview_flags	plugged/fzf/test/test_go.rb	/^  def test_preview_flags$/;"	f	class:TestGoFZF
test_preview_header	plugged/fzf/test/test_go.rb	/^  def test_preview_header$/;"	f	class:TestGoFZF
test_preview_hidden	plugged/fzf/test/test_go.rb	/^  def test_preview_hidden$/;"	f	class:TestGoFZF
test_preview_q_no_match	plugged/fzf/test/test_go.rb	/^  def test_preview_q_no_match$/;"	f	class:TestGoFZF
test_preview_q_no_match_with_initial_query	plugged/fzf/test/test_go.rb	/^  def test_preview_q_no_match_with_initial_query$/;"	f	class:TestGoFZF
test_preview_scroll_begin_and_offset	plugged/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_and_offset$/;"	f	class:TestGoFZF
test_preview_scroll_begin_constant	plugged/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_constant$/;"	f	class:TestGoFZF
test_preview_scroll_begin_expr	plugged/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_expr$/;"	f	class:TestGoFZF
test_preview_size_0	plugged/fzf/test/test_go.rb	/^  def test_preview_size_0$/;"	f	class:TestGoFZF
test_preview_size_0_hidden	plugged/fzf/test/test_go.rb	/^  def test_preview_size_0_hidden$/;"	f	class:TestGoFZF
test_preview_update_on_select	plugged/fzf/test/test_go.rb	/^  def test_preview_update_on_select$/;"	f	class:TestGoFZF
test_preview_window_follow	plugged/fzf/test/test_go.rb	/^  def test_preview_window_follow$/;"	f	class:TestGoFZF
test_preview_window_hidden_on_focus	plugged/fzf/test/test_go.rb	/^  def test_preview_window_hidden_on_focus$/;"	f	class:TestGoFZF
test_process_completion	plugged/fzf/test/test_go.rb	/^  def test_process_completion$/;"	f	module:CompletionTest
test_put	plugged/fzf/test/test_go.rb	/^  def test_put$/;"	f	class:TestGoFZF
test_python_jedi_requests	plugged/completor.vim/tests/test_python.py	/^def test_python_jedi_requests(vim_mod):$/;"	f
test_query_unicode	plugged/fzf/test/test_go.rb	/^  def test_query_unicode$/;"	f	class:TestGoFZF
test_read0	plugged/fzf/test/test_go.rb	/^  def test_read0$/;"	f	class:TestGoFZF
test_regex	plugged/validator.vim/tests/test_sh.py	/^def test_regex():$/;"	f
test_reload	plugged/fzf/test/test_go.rb	/^  def test_reload$/;"	f	class:TestGoFZF
test_reload_and_change	plugged/fzf/test/test_go.rb	/^  def test_reload_and_change$/;"	f	class:TestGoFZF
test_reload_and_change_cache	plugged/fzf/test/test_go.rb	/^  def test_reload_and_change_cache$/;"	f	class:TestGoFZF
test_reload_and_change_preview_should_update_preview	plugged/fzf/test/test_go.rb	/^  def test_reload_and_change_preview_should_update_preview$/;"	f	class:TestGoFZF
test_reload_disabled_case1	plugged/fzf/test/test_go.rb	/^  def test_reload_disabled_case1$/;"	f	class:TestGoFZF
test_reload_disabled_case2	plugged/fzf/test/test_go.rb	/^  def test_reload_disabled_case2$/;"	f	class:TestGoFZF
test_reload_disabled_case3	plugged/fzf/test/test_go.rb	/^  def test_reload_disabled_case3$/;"	f	class:TestGoFZF
test_reload_disabled_case4	plugged/fzf/test/test_go.rb	/^  def test_reload_disabled_case4$/;"	f	class:TestGoFZF
test_reload_disabled_case5	plugged/fzf/test/test_go.rb	/^  def test_reload_disabled_case5$/;"	f	class:TestGoFZF
test_reload_disabled_case6	plugged/fzf/test/test_go.rb	/^  def test_reload_disabled_case6$/;"	f	class:TestGoFZF
test_reload_even_when_theres_no_match	plugged/fzf/test/test_go.rb	/^  def test_reload_even_when_theres_no_match$/;"	f	class:TestGoFZF
test_reload_should_terminate_standard_input_stream	plugged/fzf/test/test_go.rb	/^  def test_reload_should_terminate_standard_input_stream$/;"	f	class:TestGoFZF
test_reload_should_update_preview	plugged/fzf/test/test_go.rb	/^  def test_reload_should_update_preview$/;"	f	class:TestGoFZF
test_reload_sync	plugged/fzf/test/test_go.rb	/^  def test_reload_sync$/;"	f	class:TestGoFZF
test_request	plugged/completor.vim/tests/test_rust.py	/^def test_request(vim_mod):$/;"	f
test_result_event	plugged/fzf/test/test_go.rb	/^  def test_result_event$/;"	f	class:TestGoFZF
test_rst2pseudoxml_severe_colon_regex	plugged/validator.vim/tests/test_rst.py	/^def test_rst2pseudoxml_severe_colon_regex():$/;"	f
test_rst2pseudoxml_severe_dot_regex	plugged/validator.vim/tests/test_rst.py	/^def test_rst2pseudoxml_severe_dot_regex():$/;"	f
test_rst2pseudoxml_warning_regex	plugged/validator.vim/tests/test_rst.py	/^def test_rst2pseudoxml_warning_regex():$/;"	f
test_rubocop_error	plugged/validator.vim/tests/test_rubocop.py	/^def test_rubocop_error():$/;"	f
test_rubocop_style	plugged/validator.vim/tests/test_rubocop.py	/^def test_rubocop_style():$/;"	f
test_rubocop_warning	plugged/validator.vim/tests/test_rubocop.py	/^def test_rubocop_warning():$/;"	f
test_ruby	plugged/validator.vim/tests/test_ruby.py	/^def test_ruby():$/;"	f
test_scroll	plugged/fzf/test/test_go.rb	/^  def test_scroll$/;"	f	class:TestGoFZF
test_scroll_off	plugged/fzf/test/test_go.rb	/^  def test_scroll_off$/;"	f	class:TestGoFZF
test_scroll_off_large	plugged/fzf/test/test_go.rb	/^  def test_scroll_off_large$/;"	f	class:TestGoFZF
test_select_1	plugged/fzf/test/test_go.rb	/^  def test_select_1$/;"	f	class:TestGoFZF
test_select_1_exit_0_fail	plugged/fzf/test/test_go.rb	/^  def test_select_1_exit_0_fail$/;"	f	class:TestGoFZF
test_select_all_deselect_all_toggle_all	plugged/fzf/test/test_go.rb	/^  def test_select_all_deselect_all_toggle_all$/;"	f	class:TestGoFZF
test_select_deselect	plugged/fzf/test/test_go.rb	/^  def test_select_deselect$/;"	f	class:TestGoFZF
test_shellcheck_regex	plugged/validator.vim/tests/test_sh.py	/^def test_shellcheck_regex():$/;"	f
test_show_and_hide_preview	plugged/fzf/test/test_go.rb	/^  def test_show_and_hide_preview$/;"	f	class:TestGoFZF
test_smart_case_for_each_term	plugged/fzf/test/test_go.rb	/^  def test_smart_case_for_each_term$/;"	f	class:TestGoFZF
test_ssh_completion	plugged/fzf/test/test_go.rb	/^  def test_ssh_completion$/;"	f	module:CompletionTest
test_start_event	plugged/fzf/test/test_go.rb	/^  def test_start_event$/;"	f	class:TestGoFZF
test_start_on_reload	plugged/fzf/test/test_go.rb	/^  def test_start_on_reload$/;"	f	class:TestGoFZF
test_strip_xterm_osc_sequence	plugged/fzf/test/test_go.rb	/^  def test_strip_xterm_osc_sequence$/;"	f	class:TestGoFZF
test_subseq	plugged/completor.vim/pythonx/completers/common/utils.py	/^def test_subseq(src, target):$/;"	f
test_sync	plugged/fzf/test/test_go.rb	/^  def test_sync$/;"	f	class:TestGoFZF
test_tabstop	plugged/fzf/test/test_go.rb	/^  def test_tabstop$/;"	f	class:TestGoFZF
test_tac	plugged/fzf/test/test_go.rb	/^  def test_tac$/;"	f	class:TestGoFZF
test_tac_nosort	plugged/fzf/test/test_go.rb	/^  def test_tac_nosort$/;"	f	class:TestGoFZF
test_tac_sort	plugged/fzf/test/test_go.rb	/^  def test_tac_sort$/;"	f	class:TestGoFZF
test_tiebreak	plugged/fzf/test/test_go.rb	/^  def test_tiebreak$/;"	f	class:TestGoFZF
test_tiebreak_begin_algo_v2	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_begin_algo_v2$/;"	f	class:TestGoFZF
test_tiebreak_chunk	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_chunk$/;"	f	class:TestGoFZF
test_tiebreak_end	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_end$/;"	f	class:TestGoFZF
test_tiebreak_index_begin	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_index_begin$/;"	f	class:TestGoFZF
test_tiebreak_length_with_nth	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_length_with_nth$/;"	f	class:TestGoFZF
test_toggle_alternative_preview_window	plugged/fzf/test/test_go.rb	/^  def test_toggle_alternative_preview_window$/;"	f	class:TestGoFZF
test_toggle_header	plugged/fzf/test/test_go.rb	/^  def test_toggle_header$/;"	f	class:TestGoFZF
test_toggle_preview_without_default_preview_command	plugged/fzf/test/test_go.rb	/^  def test_toggle_preview_without_default_preview_command$/;"	f	class:TestGoFZF
test_toggle_preview_wrap	plugged/fzf/test/test_go.rb	/^  def test_toggle_preview_wrap$/;"	f	class:TestGoFZF
test_toggle_sort	plugged/fzf/test/test_go.rb	/^  def test_toggle_sort$/;"	f	class:TestGoFZF
test_track	plugged/fzf/test/test_go.rb	/^  def test_track$/;"	f	class:TestGoFZF
test_track_action	plugged/fzf/test/test_go.rb	/^  def test_track_action$/;"	f	class:TestGoFZF
test_transform	plugged/fzf/test/test_go.rb	/^  def test_transform$/;"	f	class:TestGoFZF
test_transform_prompt	plugged/fzf/test/test_go.rb	/^  def test_transform_prompt$/;"	f	class:TestGoFZF
test_transform_query	plugged/fzf/test/test_go.rb	/^  def test_transform_query$/;"	f	class:TestGoFZF
test_unbind_rebind	plugged/fzf/test/test_go.rb	/^  def test_unbind_rebind$/;"	f	class:TestGoFZF
test_unicode	plugged/completor.vim/tests/test_common.py	/^def test_unicode(vim_mod, create_buffer):$/;"	f
test_unicode_case	plugged/fzf/test/test_go.rb	/^  def test_unicode_case$/;"	f	class:TestGoFZF
test_unset_completion	plugged/fzf/test/test_go.rb	/^  def test_unset_completion$/;"	f	module:CompletionTest
test_vanilla	plugged/fzf/test/test_go.rb	/^  def test_vanilla$/;"	f	class:TestGoFZF
test_vimlparser_message_wihtout_code	plugged/validator.vim/tests/test_vim.py	/^def test_vimlparser_message_wihtout_code():$/;"	f
test_vimlparser_message_with_code	plugged/validator.vim/tests/test_vim.py	/^def test_vimlparser_message_with_code():$/;"	f
test_vint_undefined_variable	plugged/validator.vim/tests/test_vim.py	/^def test_vint_undefined_variable():$/;"	f
test_with_nth	plugged/fzf/test/test_go.rb	/^  def test_with_nth$/;"	f	class:TestGoFZF
test_with_nth_ansi	plugged/fzf/test/test_go.rb	/^  def test_with_nth_ansi$/;"	f	class:TestGoFZF
test_with_nth_basic	plugged/fzf/test/test_go.rb	/^  def test_with_nth_basic$/;"	f	class:TestGoFZF
test_with_nth_no_ansi	plugged/fzf/test/test_go.rb	/^  def test_with_nth_no_ansi$/;"	f	class:TestGoFZF
test_zsh	plugged/validator.vim/tests/test_zsh.py	/^def test_zsh():$/;"	f
tests_on_docker	plugged/splitjoin.vim/spec/support/rust.vim/test/run-tests	/^def tests_on_docker():$/;"	f
tex	plugged/splitjoin.vim/spec/plugin/tex_spec.rb	/^describe "tex" do$/;"	d
text	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      text: data,$/;"	p	class:complete.file
text	plugged/fzf/src/item.go	/^	text        util.Chars    \/\/ 32 = 24 + 1 + 1 + 2 + 4$/;"	m	struct:fzf.Item	typeref:typename:util.Chars
text	plugged/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.Pattern	typeref:typename:[]rune
text	plugged/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.term	typeref:typename:[]rune
text	plugged/fzf/src/tokenizer.go	/^	text         *util.Chars$/;"	m	struct:fzf.Token	typeref:typename:*util.Chars
text	plugged/fzf/src/tui/light.go	/^	text         string$/;"	m	struct:tui.wrappedLine	typeref:typename:string
text	plugged/ultisnips/pythonx/UltiSnips/vim_state.py	/^    def text(self):$/;"	m	class:VisualContentPreserver
text	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    text = models.TextField()$/;"	v	class:JobNote
text_after	plugged/ultisnips/test/test_Format.py	/^    text_after = ""$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
text_after	plugged/ultisnips/test/vim_test_case.py	/^    text_after = "\\n\\n --- some text after --- "$/;"	v	class:VimTestCase
text_before	plugged/ultisnips/test/test_Format.py	/^    text_before = ""$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
text_before	plugged/ultisnips/test/vim_test_case.py	/^    text_before = " --- some text before --- \\n\\n"$/;"	v	class:VimTestCase
text_document_request	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    def text_document_request(self, category):$/;"	m	class:Lsp
text_log_error	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    text_log_error = models.ForeignKey(TextLogError,$/;"	v	class:TextLogErrorMatch
text_log_error	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    text_log_error = models.OneToOneField(TextLogError,$/;"	v	class:TextLogErrorMetadata
text_log_errors	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    text_log_errors = models.ManyToManyField("TextLogError", through='TextLogErrorMatch',$/;"	v	class:ClassifiedFailure
text_type	plugged/completor.vim/pythonx/completor/compat.py	/^    text_type = str$/;"	v
text_type	plugged/completor.vim/pythonx/completor/compat.py	/^    text_type = unicode$/;"	v
theme	plugged/fzf/src/terminal.go	/^	theme              *tui.ColorTheme$/;"	m	struct:fzf.Terminal	typeref:typename:*tui.ColorTheme
theme	plugged/fzf/src/tui/light.go	/^	theme         *ColorTheme$/;"	m	struct:tui.LightRenderer	typeref:typename:*ColorTheme
theme	plugged/fzf/src/tui/tui.go	/^	theme        *ColorTheme$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:*ColorTheme
theme	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    theme <- bw() +$/;"	g
theme	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    theme <- bw() +$/;"	g
thetime	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    thetime <- stn.time[select[1]] # e. g. 2222$/;"	g
thetime	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    thetime <- stn.time[select[1]] # e. g. 2222$/;"	g
threshold	plugged/fzf/src/options.go	/^	threshold   int$/;"	m	struct:fzf.previewOpts	typeref:typename:int
tier	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    tier = models.PositiveIntegerField()$/;"	v	class:Job
time	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    time = models.DateTimeField(db_index=True)$/;"	v	class:Push
timeoutInterval	plugged/fzf/src/tui/light_windows.go	/^	timeoutInterval = 10$/;"	c	package:tui
title	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    title = models.CharField(max_length=70, null=True)$/;"	v	class:JobDetail
tmux	plugged/completor.vim/README.md	/^#### tmux$/;"	t	section:Completor""Completers
tmux	plugged/fzf/test/test_go.rb	/^  attr_reader :tmux$/;"	A	class:TestBase
tmuxOptions	plugged/fzf/src/options.go	/^type tmuxOptions struct {$/;"	s	package:fzf
toActions	plugged/fzf/src/terminal.go	/^func toActions(types ...actionType) []*action {$/;"	f	package:fzf	typeref:typename:[]*action
toAnsiString	plugged/fzf/src/ansi.go	/^func toAnsiString(color tui.Color, offset int) string {$/;"	f	package:fzf	typeref:typename:string
to_bytes	plugged/completor.vim/pythonx/completor/compat.py	/^def to_bytes(s, charset='utf-8'):$/;"	f
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:Base
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:CodeAction
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:Completion
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:DidChange
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:DidChangeConfiguration
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:DidOpen
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:DidSave
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:Format
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:Initialize
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:Initialized
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:References
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:Rename
to_dict	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_dict(self):$/;"	m	class:Symbol
to_dict	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def to_dict(self):$/;"	m	class:FailureLine
to_request	plugged/completor.vim/pythonx/completers/lsp/models.py	/^    def to_request(self):$/;"	m	class:Base
to_unicode	plugged/completor.vim/pythonx/completor/compat.py	/^def to_unicode(x, charset):$/;"	f
to_unicode	plugged/validator.vim/pythonx/validator/utils.py	/^def to_unicode(v):$/;"	f
to_vim	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^    def to_vim(self):$/;"	m	class:_VimCursor
to_vim_cursor	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def to_vim_cursor(self):$/;"	m	class:_SnippetUtilCursor
toggleItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) toggleItem(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
toggleSort	plugged/fzf/src/terminal.go	/^	toggleSort         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
token_store	plugged/completor.vim/pythonx/completers/common/buffer.py	/^token_store = TokenStore()$/;"	v
tokenize	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/lexer.py	/^def tokenize(text, indent, offset, allowed_tokens):$/;"	f
tokenize_snippet_text	plugged/ultisnips/pythonx/UltiSnips/snippet/parsing/base.py	/^def tokenize_snippet_text($/;"	f
top	plugged/fzf/src/tui/light.go	/^	top      int$/;"	m	struct:tui.LightWindow	typeref:typename:int
top	plugged/fzf/src/tui/tcell.go	/^	top         int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
top	plugged/fzf/src/tui/tui.go	/^	top         rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
topLeft	plugged/fzf/src/tui/tui.go	/^	topLeft     rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
topRight	plugged/fzf/src/tui/tui.go	/^	topRight    rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
topenv	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^topenv <- function(envir = parent.frame(),$/;"	f
topenv	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^topenv <- function(envir = parent.frame(),$/;"	f
track	plugged/fzf/src/terminal.go	/^	track              trackOption$/;"	m	struct:fzf.Terminal	typeref:typename:trackOption
trackCurrent	plugged/fzf/src/options.go	/^	trackCurrent$/;"	c	package:fzf
trackDisabled	plugged/fzf/src/options.go	/^	trackDisabled trackOption = iota$/;"	c	package:fzf	typeref:type:trackOption
trackEnabled	plugged/fzf/src/options.go	/^	trackEnabled$/;"	c	package:fzf
trackOption	plugged/fzf/src/options.go	/^type trackOption int$/;"	t	package:fzf	typeref:typename:int
traits,traits	plugged/splitjoin.vim/spec/support/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?trait[ \\t]+([a-zA-Z0-9_]+)\/\\2\/t,traits,traits\/$/;"	k	langdef:Rust
trans	plugged/fzf/src/chunklist.go	/^	trans  ItemBuilder$/;"	m	struct:fzf.ChunkList	typeref:typename:ItemBuilder
transform	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^def transform(a, cmds):$/;"	f
transformInput	plugged/fzf/src/pattern.go	/^func (p *Pattern) transformInput(item *Item) []Token {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Token
transformed	plugged/fzf/src/item.go	/^	transformed *[]Token      \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]Token
trigger	plugged/completor.vim/pythonx/completers/ale.py	/^    trigger = r'(?:\\w{2,}\\w*|\\.\\w*|::\\w*|->\\w*)$'$/;"	v	class:ALE
trigger	plugged/completor.vim/pythonx/completers/common/filename.py	/^    trigger = re.compile(r"""$/;"	v	class:Filename
trigger	plugged/completor.vim/pythonx/completers/common/neoinclude.py	/^    def trigger(self):$/;"	m	class:Neoinclude
trigger	plugged/completor.vim/pythonx/completers/common/neoinclude.py	/^    def trigger(self, value):$/;"	m	class:Neoinclude
trigger	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^trigger = re.compile(r'(\\.|->|#|::)\\s*(\\w*)$')$/;"	v
trigger	plugged/completor.vim/pythonx/completers/go.py	/^    trigger = r'(?:\\w{2,}\\w*|\\.\\w*)$'$/;"	v	class:Go
trigger	plugged/completor.vim/pythonx/completers/javascript/__init__.py	/^    trigger = r"""\\w+$|[\\w\\)\\]\\}\\'\\"]+\\.\\w*$|["']\\w*$"""$/;"	v	class:Tern
trigger	plugged/completor.vim/pythonx/completers/lsp/__init__.py	/^    trigger = r'(?:\\w{2,}\\w*|\\.\\w*|::\\w*|->\\w*)$'$/;"	v	class:Lsp
trigger	plugged/completor.vim/pythonx/completers/python/__init__.py	/^    trigger = (r'\\w{3,}$|'$/;"	v	class:Jedi
trigger	plugged/completor.vim/pythonx/completers/rust.py	/^    trigger = r'(?:\\w{2,}\\w*|\\.\\w*|::\\w*)$'$/;"	v	class:Racer
trigger	plugged/completor.vim/pythonx/completor/__init__.py	/^    trigger = None$/;"	v	class:Completor
trigger	plugged/ultisnips/pythonx/UltiSnips/snippet/definition/base.py	/^    def trigger(self):$/;"	m	class:SnippetDefinition
triggerLoad	plugged/fzf/src/terminal.go	/^	triggerLoad        bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
trigger_cache	plugged/completor.vim/pythonx/completers/common/neoinclude.py	/^    trigger_cache = {$/;"	v	class:Neoinclude
trigger_cache	plugged/completor.vim/pythonx/completers/common/omni.py	/^    trigger_cache = {}$/;"	v	class:Omni
trimLeft	plugged/fzf/src/terminal.go	/^func (t *Terminal) trimLeft(runes []rune, width int) ([]rune, int32) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, int32)
trimLength	plugged/fzf/src/util/chars.go	/^	trimLength      uint16$/;"	m	struct:util.Chars	typeref:typename:uint16
trimLengthKnown	plugged/fzf/src/util/chars.go	/^	trimLengthKnown bool$/;"	m	struct:util.Chars	typeref:typename:bool
trimMessage	plugged/fzf/src/terminal.go	/^func (t *Terminal) trimMessage(message string, maxWidth int) string {$/;"	f	struct:fzf.Terminal	typeref:typename:string
trimQuery	plugged/fzf/src/terminal.go	/^func trimQuery(query string) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
trimRight	plugged/fzf/src/terminal.go	/^func (t *Terminal) trimRight(runes []rune, width int) ([]rune, bool) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, bool)
truncateQuery	plugged/fzf/src/terminal.go	/^func (t *Terminal) truncateQuery() {$/;"	f	struct:fzf.Terminal
try	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^try <- function(expr, silent = FALSE) {$/;"	f
try	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^try <- function(expr, silent = FALSE) {$/;"	f
try indent	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/try_spec.rb	/^describe 'try indent' do$/;"	d
tryLock	plugged/fzf/src/terminal.go	/^func (t *Terminal) tryLock(timeout time.Duration) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
trySkip	plugged/fzf/src/algo/algo.go	/^func trySkip(input *util.Chars, caseSensitive bool, b byte, from int) int {$/;"	f	package:algo	typeref:typename:int
try_curl	plugged/fzf/install	/^try_curl() {$/;"	f
try_wget	plugged/fzf/install	/^try_wget() {$/;"	f
tt	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    tt <- try({$/;"	v	function:foo
tt	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    tt <- try({$/;"	v	function:foo
tty	plugged/fzf/src/tui/ttyname_unix.go	/^var tty atomic.Value$/;"	v	package:tui	typeref:typename:atomic.Value
ttyin	plugged/fzf/src/terminal.go	/^	ttyin              *os.File$/;"	m	struct:fzf.Terminal	typeref:typename:*os.File
ttyin	plugged/fzf/src/terminal.go	/^var ttyin *os.File$/;"	v	package:fzf	typeref:typename:*os.File
ttyin	plugged/fzf/src/tui/light.go	/^	ttyin         *os.File$/;"	m	struct:tui.LightRenderer	typeref:typename:*os.File
ttyinChannel	plugged/fzf/src/tui/light.go	/^	ttyinChannel    chan byte$/;"	m	struct:tui.LightRenderer	typeref:typename:chan byte
ttyname	plugged/fzf/src/tui/ttyname_unix.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
ttyname	plugged/fzf/src/tui/ttyname_windows.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
ttyout	plugged/fzf/src/tui/light.go	/^	ttyout        *os.File$/;"	m	struct:tui.LightRenderer	typeref:typename:*os.File
tui	plugged/fzf/src/terminal.go	/^	tui                tui.Renderer$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Renderer
tui	plugged/fzf/src/tui/dummy.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/eventtype_string.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/light.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/light_unix.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/light_windows.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/tcell.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/tcell_test.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/ttyname_unix.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/ttyname_windows.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/tui.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/tui_test.go	/^package tui$/;"	p
typ	plugged/fzf/src/pattern.go	/^	typ           termType$/;"	m	struct:fzf.term	typeref:typename:termType
type	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      type: 'completions',$/;"	p	class:complete.query
type	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      type: 'full',$/;"	p	class:complete.file
type	plugged/splitjoin.vim/spec/support/vim-elixir/large_file.ex	/^  @type type :: :producer | :consumer | :producer_consumer$/;"	y	module:RateLimiter	access:public
type	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def type(content)$/;"	f	class:Buffer
type	plugged/splitjoin.vim/spec/support/vim-elm-syntax/addon-info.json	/^    "type": "git",$/;"	s	object:repository
type script	plugged/completor.vim/README.md	/^#### type script$/;"	t	section:Completor""Completers
type_map	plugged/validator.vim/pythonx/validator/__init__.py	/^    def type_map(self):$/;"	m	class:Validator
types	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^      types: true,$/;"	p	class:complete.query
types,type definitions	plugged/splitjoin.vim/spec/support/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?type[ \\t]+([a-zA-Z0-9_]+)\/\\2\/T,types,type definitions\/$/;"	k	langdef:Rust
u	plugged/vim-repeat/autoload/repeat.vim	/^    nmap u <Plug>(RepeatUndo)$/;"	m
uiMutex	plugged/fzf/src/terminal.go	/^	uiMutex            sync.Mutex$/;"	m	struct:fzf.Terminal	typeref:typename:sync.Mutex
ultisnips_snippets	plugged/ultisnips/ftplugin/snippets.vim	/^augroup ultisnips_snippets.vim$/;"	a
unescape	plugged/ultisnips/pythonx/UltiSnips/text.py	/^def unescape(text):$/;"	f
unicode	plugged/fzf/src/terminal.go	/^	unicode            bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
unique_name_temp	plugged/ultisnips/test/vim_interface.py	/^    def unique_name_temp(self, suffix="", prefix=""):$/;"	m	class:TempFileManager
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ("os_name", "platform", "architecture")$/;"	v	class:BuildPlatform.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ("os_name", "platform", "architecture")$/;"	v	class:MachinePlatform.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ("title", "value", "job")$/;"	v	class:JobDetail.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ($/;"	v	class:FailureLine.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ($/;"	v	class:RunnableJob.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ($/;"	v	class:TextLogErrorMatch.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ('job', 'bug_id')$/;"	v	class:BugJobMap.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ('job', 'name', 'url')$/;"	v	class:JobLog.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ('job', 'started_line_number',$/;"	v	class:TextLogStep.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ('name', 'signature', 'build_system_type', 'repository')$/;"	v	class:ReferenceDataSignatures.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ('name', 'symbol')$/;"	v	class:JobGroup.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ('option_collection_hash', 'option')$/;"	v	class:OptionCollection.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ('push', 'revision')$/;"	v	class:Commit.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ('repository', 'revision')$/;"	v	class:Push.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = ('step', 'line_number')$/;"	v	class:TextLogError.Meta
unique_together	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        unique_together = (('name', 'symbol'),)$/;"	v	class:JobType.Meta
unite#sources#ultisnips#define	plugged/ultisnips/autoload/unite/sources/ultisnips.vim	/^function! unite#sources#ultisnips#define() abort$/;"	f
unquote	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        unquote <- function(e)$/;"	f	function:bquote
unquote	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    unquote <- function(e)$/;"	f	function:bquote
unquote	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        unquote <- function(e)$/;"	f	function:bquote
unquote	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    unquote <- function(e)$/;"	f	function:bquote
unregister_snippet_source	plugged/ultisnips/pythonx/UltiSnips/snippet_manager.py	/^    def unregister_snippet_source(self, name):$/;"	m	class:SnippetManager
unset_var	plugged/fzf/test/test_go.rb	/^  def unset_var(name)$/;"	f	module:TestShell
unshift	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def unshift(self, amount=1):$/;"	m	class:SnippetUtil
unstructured_bugs	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def unstructured_bugs(self):$/;"	m	class:FailureLine
until	plugged/fzf/test/test_go.rb	/^  def until(refresh = false, timeout: DEFAULT_TIMEOUT)$/;"	f	class:Tmux
upOneLine	plugged/fzf/src/tui/light.go	/^	upOneLine     bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
update	plugged/fzf/Makefile	/^update:$/;"	t
updatePromptOffset	plugged/fzf/src/terminal.go	/^func (t *Terminal) updatePromptOffset() ([]rune, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, []rune)
updateTerminalSize	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
updateTerminalSize	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
update_after_verification	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def update_after_verification(self, user):$/;"	m	class:Job
update_autoclassification_bug	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def update_autoclassification_bug(self, bug_number):$/;"	m	class:Job
update_extends	plugged/ultisnips/pythonx/UltiSnips/snippet/source/base.py	/^    def update_extends(self, child_ft, parent_fts):$/;"	m	class:SnippetSource
update_matches	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def update_matches(self, other):$/;"	m	class:ClassifiedFailure
update_status	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def update_status(self, status):$/;"	m	class:JobLog
update_textobjects	plugged/ultisnips/pythonx/UltiSnips/text_objects/snippet_instance.py	/^    def update_textobjects(self, buf):$/;"	m	class:SnippetInstance
upper case	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/sigil_spec.rb	/^  describe 'upper case' do$/;"	d
url	plugged/splitjoin.vim/spec/support/vim-elm-syntax/addon-info.json	/^    "url": "https:\/\/github.com\/andys8\/vim-elm-syntax.git"$/;"	s	object:repository
url	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    url = models.CharField(max_length=255)$/;"	v	class:Repository
url	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    url = models.URLField(max_length=255)$/;"	v	class:JobLog
url	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    url = models.URLField(null=True, max_length=512)$/;"	v	class:JobDetail
use markdown for docs	plugged/splitjoin.vim/spec/support/vim-elixir/spec/syntax/doc_spec.rb	/^    describe "use markdown for docs" do$/;"	d
use_guru_for_def	plugged/completor.vim/pythonx/completers/go.py	/^    use_guru_for_def = False$/;"	v	class:Go
use_proxy_buffer	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^def use_proxy_buffer(snippets_stack, vstate):$/;"	f
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
user	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True)  # null if autoclassifie/;"	v	class:BugJobMap
user	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True)  # null if autoclassifie/;"	v	class:JobNote
util	plugged/fzf/src/util/atexit.go	/^package util$/;"	p
util	plugged/fzf/src/util/atexit_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/atomicbool.go	/^package util$/;"	p
util	plugged/fzf/src/util/atomicbool_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/chars.go	/^package util$/;"	p
util	plugged/fzf/src/util/chars_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/eventbox.go	/^package util$/;"	p
util	plugged/fzf/src/util/eventbox_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/slab.go	/^package util$/;"	p
util	plugged/fzf/src/util/util.go	/^package util$/;"	p
util	plugged/fzf/src/util/util_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/util_unix.go	/^package util$/;"	p
util	plugged/fzf/src/util/util_windows.go	/^package util$/;"	p
utilsGenerics	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        utilsGenerics <- c("edit", "str")$/;"	c	function:foo
utilsGenerics	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        utilsGenerics <- c("edit", "str")$/;"	c	function:foo
v	plugged/ultisnips/pythonx/UltiSnips/text_objects/python_code.py	/^    def v(self):  # pylint:disable=invalid-name$/;"	m	class:SnippetUtil
validateOptions	plugged/fzf/src/options.go	/^func validateOptions(opts *Options) error {$/;"	f	package:fzf	typeref:typename:error
validateSign	plugged/fzf/src/options.go	/^func validateSign(sign string, signOptName string) error {$/;"	f	package:fzf	typeref:typename:error
validate_buffer	plugged/ultisnips/pythonx/UltiSnips/buffer_proxy.py	/^    def validate_buffer(self):$/;"	m	class:VimBufferProxy
validator	plugged/validator.vim/autoload/validator.vim	/^  augroup validator$/;"	a
validator	plugged/validator.vim/plugin/validator.vim	/^    augroup validator$/;"	a
validator#disable	plugged/validator.vim/autoload/validator.vim	/^function! validator#disable()$/;"	f
validator#disable_events	plugged/validator.vim/autoload/validator.vim	/^function! validator#disable_events()$/;"	f
validator#enable	plugged/validator.vim/autoload/validator.vim	/^function! validator#enable()$/;"	f
validator#enable_events	plugged/validator.vim/autoload/validator.vim	/^function! validator#enable_events()$/;"	f
validator#get_status_string	plugged/validator.vim/autoload/validator.vim	/^function! validator#get_status_string()$/;"	f
validator#next	plugged/validator.vim/autoload/validator.vim	/^function! validator#next()$/;"	f
validator#notifier#clear	plugged/validator.vim/autoload/validator/notifier.vim	/^function! validator#notifier#clear()$/;"	f
validator#notifier#notify	plugged/validator.vim/autoload/validator/notifier.vim	/^function! validator#notifier#notify(loclist, bufnr)$/;"	f
validator#utils#load_checkers	plugged/validator.vim/autoload/validator/utils.vim	/^function! validator#utils#load_checkers(ft, tmp, instant)$/;"	f
validator#utils#parse_loclist	plugged/validator.vim/autoload/validator/utils.vim	/^function! validator#utils#parse_loclist(msg, nr, ft, checker)$/;"	f
validator#utils#setup_python	plugged/validator.vim/autoload/validator/utils.vim	/^function! validator#utils#setup_python()$/;"	f
value	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    value = escape_txt_chars(value)$/;"	g
value	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    value = escape_txt_chars(value)$/;"	g
value	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    value = models.CharField(max_length=125)$/;"	v	class:JobDetail
varName	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^           varName <- names(symNames)[i]$/;"	v	function:anonFuncb1d136150400
varName	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        varName <- names(symNames)[i]$/;"	v	function:anonFunce36e773c0400
variable declarations	plugged/splitjoin.vim/spec/plugin/go_spec.rb	/^  describe "variable declarations" do$/;"	d
vars	plugged/completor.vim/tests/conftest.py	/^    vars = Vars(completor_min_chars=2)$/;"	v	class:Vim
vars_wrapper	plugged/completor.vim/pythonx/completor/_vim.py	/^    class vars_wrapper(object):$/;"	c	function:_patch_nvim	file:
vcov	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^            if(length(coef))$/;"	g
vcov	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        vcov <- if(length(coef))$/;"	g
vcov	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            if(length(coef))$/;"	g
vcov	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        vcov <- if(length(coef))$/;"	g
verbose_name_plural	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        verbose_name_plural = 'bugscache'$/;"	v	class:Bugscache.Meta
verbose_name_plural	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        verbose_name_plural = 'reference data signatures'$/;"	v	class:ReferenceDataSignatures.Meta
verbose_name_plural	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        verbose_name_plural = 'repositories'$/;"	v	class:Repository.Meta
verbose_name_plural	plugged/vim-coiled-snake/tests/issues/test_3.py	/^        verbose_name_plural = 'text log error matches'$/;"	v	class:TextLogErrorMatch.Meta
verify_classification	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def verify_classification(self, classification):$/;"	m	class:TextLogError
version	plugged/completor.vim/pythonx/completers/javascript/package.json	/^  "version": "1.0.0",$/;"	s
version	plugged/fzf/install.ps1	/^$version="0.53.0"$/;"	v
version	plugged/fzf/main.go	/^var version = "0.53"$/;"	v	package:main
version	plugged/fzf/src/terminal.go	/^	version            int64$/;"	m	struct:fzf.Terminal	typeref:typename:int64
version	plugged/fzf/src/terminal.go	/^	version    int64$/;"	m	struct:fzf.previewer	typeref:typename:int64
version	plugged/fzf/src/terminal.go	/^	version   int64$/;"	m	struct:fzf.previewed	typeref:typename:int64
version	plugged/fzf/src/terminal.go	/^	version int64$/;"	m	struct:fzf.previewResult	typeref:typename:int64
version	plugged/ultisnips/test/vim_test_case.py	/^    version = None  # Will be set to vim --version output$/;"	v	class:VimTestCase
vim	plugged/completor.vim/pythonx/completor/__init__.py	/^from ._vim import vim_obj as vim$/;"	x	nameref:unknown:vim_obj
vim	plugged/splitjoin.vim/spec/plugin/vim_spec.rb	/^describe "vim" do$/;"	d
vim	plugged/validator.vim/tests/conftest.py	/^vim = types.ModuleType('vim')$/;"	v
vim script	plugged/completor.vim/README.md	/^#### vim script$/;"	t	section:Completor""Completers
vim-elixir	plugged/splitjoin.vim/spec/support/vim-elixir/README.md	/^# vim-elixir$/;"	c
vim-elm-syntax	plugged/splitjoin.vim/spec/support/vim-elm-syntax/README.md	/^# vim-elm-syntax$/;"	c
vim-javascript	plugged/splitjoin.vim/spec/support/vim-javascript/README.md	/^# vim-javascript$/;"	c
vim-lastplace v4.6.0	plugged/vim-lastplace/README.md	/^# vim-lastplace v4.6.0$/;"	c
vim:	plugged/vim-lastplace/README.md	/^### vim:$/;"	S	section:vim-lastplace v4.6.0""Install
vim_action_trigger	plugged/completor.vim/pythonx/completor/_vim.py	/^def vim_action_trigger():$/;"	f
vim_daemon_send	plugged/completor.vim/pythonx/completor/_vim.py	/^def vim_daemon_send():$/;"	f
vim_executable	plugged/ultisnips/test/vim_interface.py	/^    def vim_executable(self):$/;"	m	class:VimInterface
vim_exists	plugged/completor.vim/pythonx/completor/_vim.py	/^def vim_exists():$/;"	f
vim_expand	plugged/completor.vim/pythonx/completor/_vim.py	/^def vim_expand():$/;"	f
vim_flavor	plugged/ultisnips/test/vim_test_case.py	/^    vim_flavor = None  # will be 'vim' or 'neovim'.$/;"	v	class:VimTestCase
vim_in_comment_or_string	plugged/completor.vim/pythonx/completor/_vim.py	/^def vim_in_comment_or_string():$/;"	f
vim_mod	plugged/completor.vim/tests/conftest.py	/^def vim_mod():$/;"	f
vim_obj	plugged/completor.vim/pythonx/completor/_vim.py	/^vim_obj = _Vim()$/;"	v
vim_support_popup	plugged/completor.vim/pythonx/completor/_vim.py	/^def vim_support_popup():$/;"	f
vim_tempname	plugged/completor.vim/pythonx/completor/_vim.py	/^def vim_tempname():$/;"	f
vinegar	plugged/vim-vinegar/plugin/vinegar.vim	/^augroup vinegar$/;"	a
vinegar.vim	plugged/vim-vinegar/README.markdown	/^# vinegar.vim$/;"	c
virtual_position	plugged/ultisnips/pythonx/UltiSnips/vim_helper.py	/^def virtual_position(line, col):$/;"	f
visibleHeaderLines	plugged/fzf/src/terminal.go	/^func (t *Terminal) visibleHeaderLines() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
vmove	plugged/fzf/src/terminal.go	/^func (t *Terminal) vmove(o int, allowCycle bool) {$/;"	f	struct:fzf.Terminal
vset	plugged/fzf/src/terminal.go	/^func (t *Terminal) vset(o int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
wait	plugged/fzf/src/reader.go	/^	wait     bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
wait	plugged/fzf/test/test_go.rb	/^def wait(timeout = DEFAULT_TIMEOUT)$/;"	f
wait_until_file_exists	plugged/ultisnips/test/vim_interface.py	/^def wait_until_file_exists(file_path, times=None, interval=0.01):$/;"	f
walkerOpts	plugged/fzf/src/options.go	/^type walkerOpts struct {$/;"	s	package:fzf
want	plugged/fzf/src/terminal_test.go	/^	want$/;"	M	struct:fzf.testCase	typeref:typename:want
want	plugged/fzf/src/terminal_test.go	/^type want struct {$/;"	s	package:fzf
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:MultiLine
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestLotsaNewlines
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ($/;"	v	class:TestWithNewline
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = (("D", 0, 0, "abc"), ("I", 0, 0, "def"))$/;"	v	class:TestNoSubstring
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = (("D", 0, 1, "asomelongertextb"), ("I", 0, 1, "o"))$/;"	v	class:TestCommonCharacters
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = (("D", 0, 1, "tdin.h"),)$/;"	v	class:MatchIsTooCheap
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = (("D", 0, 10, "Beginning"), ("I", 0, 10, "t"))$/;"	v	class:TestRealLife
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = (("D", 0, 11, "this is it"), ("I", 0, 11, "a"))$/;"	v	class:TestUltiSnipsProblem
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = (("D", 0, 5, " "),)$/;"	v	class:TestGuessing_DeleteOneChar
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = (("D", 0, 5, " hallo"),)$/;"	v	class:TestCheapDelete
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = (("D", 0, 6, " "),)$/;"	v	class:TestGuessing_BackspaceOneChar
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = (("D", 1, 6, "kjsdhfjksdhfkjhsdfkh"), ("I", 1, 6, "b"))$/;"	v	class:TestCrash
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = (("I", 0, 11, " "),)$/;"	v	class:TestRealLife1
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = (("I", 0, 6, " "),)$/;"	v	class:TestGuessing_InsertOneChar
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = (("I", 0, 7, " "),)$/;"	v	class:TestGuessing_InsertOneChar1
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ()$/;"	v	class:TestAllMatch
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ()$/;"	v	class:TestEmptyString
wanted	plugged/ultisnips/pythonx/UltiSnips/test_diff.py	/^    wanted = ()$/;"	v	class:TestGuessing_Noop0
wanted	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = " :latex:`Hello`World"$/;"	v	class:Anon_NoTrigger_FirstCharOfLine
wanted	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = "123 simple 123 expand 123 456"$/;"	v	class:Anon_Trigger_Multi
wanted	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = ":latex:`Hello`World"$/;"	v	class:Anon_NoTrigger_BeginningOfLine
wanted	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = "abc simple expand"$/;"	v	class:Anon_NoTrigger_AfterSpace
wanted	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = "abcsimple 123 expand 123 456"$/;"	v	class:Anon_NoTrigger_Multi
wanted	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = "abcsimple expand"$/;"	v	class:Anon_NoTrigger_Simple
wanted	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = "simple expand"$/;"	v	class:Anon_Trigger_Opts
wanted	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = "simple expand"$/;"	v	class:Anon_Trigger_Simple
wanted	plugged/ultisnips/test/test_AnonymousExpansion.py	/^    wanted = "simple expand\\nabc" + EX$/;"	v	class:Anon_Trigger_Twice
wanted	plugged/ultisnips/test/test_Autocommands.py	/^    wanted = "[ [ bar ] ] done M1U1"$/;"	v	class:Autocommands
wanted	plugged/ultisnips/test/test_Autotrigger.py	/^    wanted = "a"$/;"	v	class:Autotrigger_GlobalDisable
wanted	plugged/ultisnips/test/test_Autotrigger.py	/^    wanted = "a\\nautotriggered"$/;"	v	class:Autotrigger_GlobalDisableThenToggle
wanted	plugged/ultisnips/test/test_Autotrigger.py	/^    wanted = "autotriggered"$/;"	v	class:Autotrigger_CanExpandOnTriggerWithLengthMoreThanOne
wanted	plugged/ultisnips/test/test_Autotrigger.py	/^    wanted = "autotriggered"$/;"	v	class:Autotrigger_CanMatchSimpleTrigger
wanted	plugged/ultisnips/test/test_Autotrigger.py	/^    wanted = "autotriggered\\na"$/;"	v	class:Autotrigger_CanMatchContext
wanted	plugged/ultisnips/test/test_Autotrigger.py	/^    wanted = "autotriggered\\na\\nautotriggered"$/;"	v	class:Autotrigger_CanToggle
wanted	plugged/ultisnips/test/test_Autotrigger.py	/^    wanted = "if var == nil: pass\\n="$/;"	v	class:Autotrigger_CanMatchPreviouslySelectedPlaceholder
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:MultiLineDefault_BS
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:MultiLineDefault_Jump
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:MultiLineDefault_Type
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_EndNL
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_EndStartNL
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_ExtraNL_ECR
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_JustNL
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_NLInsideStuffBehind
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_NotEndStartNL
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """$/;"	v	class:TrailingNewline_TabStop_StartNL
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """Hello \\t \\nGoodbye"""$/;"	v	class:LeaveTrailingWhitespace
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """Hello\\nGoodbye"""$/;"	v	class:RemoveTrailingWhitespace
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """\\tnext line\\n\\n\\tshould be empty"""$/;"	v	class:TrimSpacesAtEndOfLines
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = """\\tnext line\\n\\t\\n\\tshould be empty"""$/;"	v	class:DoNotTrimSpacesAtEndOfLinesByDefault
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = "Expand me'!"$/;"	v	class:Snippet_With_SingleQuote
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = "Expand me'!"$/;"	v	class:Snippet_With_SingleQuote_List
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = "Expand meü!"$/;"	v	class:Snippet_With_Umlauts
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = "Expand meü!"$/;"	v	class:Snippet_With_Umlauts_List
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = "oouu success b"$/;"	v	class:NoUmlautsBeforeTriggerAndCharsAfter
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = "te üü hello üü hello"$/;"	v	class:Snippet_With_Umlauts_Mirrors
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = "te üü hüüll üü aaaaa"$/;"	v	class:Snippet_With_Umlauts_Python
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = "te üü more text üü helloßß\\nüüüüend"$/;"	v	class:Snippet_With_Umlauts_OverwriteFirst
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = "te üü world üü helloßß\\nüüüüend"$/;"	v	class:Snippet_With_Umlauts_OverwriteNone
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = "te üü world üü more textßß\\nüüüüend"$/;"	v	class:Snippet_With_Umlauts_OverwriteSecond
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = "te üüüüüßßßßmore text"$/;"	v	class:Snippet_With_Umlauts_TypeOn
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = "ööuu success b"$/;"	v	class:UmlautsBeforeTriggerAndCharsAfter
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = 'Expand me"!'$/;"	v	class:Snippet_With_DoubleQuote
wanted	plugged/ultisnips/test/test_Chars.py	/^    wanted = 'Expand me"!'$/;"	v	class:Snippet_With_DoubleQuote_List
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "1 is a char"$/;"	v	class:Choices_MoreThan9Candidates_ShouldWaitForInputs
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "1.a|2.c"$/;"	v	class:Choices_EmptyChoiceWillBeDiscarded
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "1.red|2.gray"$/;"	v	class:Choices_WillBeExpandedToInlineSelection
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "1.Русский язык|2.中文|3.한국어|4.öääö"$/;"	v	class:Choices_CanTakeNonAsciiCharacters
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "3"$/;"	v	class:Choices_WillAbandonSelection_If_InputIsGreaterThanMaxSelectionIndex
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "a is a char"$/;"	v	class:Choices_MoreThan9Candidates_ShouldTerminateWithSpace
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "char"$/;"	v	class:Choices_WillAbandonSelection_If_CharTyped
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "cyan is a color, mirror: cyan is a color"$/;"	v	class:Choices_With_Mirror_ContinueMirroring_EvenAfterSelectionDone
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "cyan, mirror: cyan"$/;"	v	class:Choices_With_Mirror
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "fun2(param1, param_end) result: fun2(param1, "$/;"	v	class:Choices_CanEscapeCommaInsideChoiceItem
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "gray is color\\nline 2"$/;"	v	class:Choices_WilNotMessWithTabstopsAfterIt
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "gray"$/;"	v	class:Choices_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "input"$/;"	v	class:Choices_AsNestedElement_ShallNotTakeActionIfParentInput
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "outer 1.foo|2.blah input"$/;"	v	class:Choices_AsNestedElement_CanBeTabbedThrough
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "outer 1.foo|2.blah"$/;"	v	class:Choices_AsNestedElement_ShouldOverwriteDefaultText
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "outer foo"$/;"	v	class:Choices_AsNestedElement_CanBeTabbedInto
wanted	plugged/ultisnips/test/test_Choices.py	/^    wanted = "||"$/;"	v	class:Choices_WillNotExpand_If_ChoiceListIsEmpty
wanted	plugged/ultisnips/test/test_Completion.py	/^    wanted = ($/;"	v	class:Completion_SimpleExample_ECR
wanted	plugged/ultisnips/test/test_Completion.py	/^    wanted = COMPLETION_OPTIONS + "completion1 foo"$/;"	v	class:Completion_ForwardsJumpWithoutCOMPL_ACCEPT
wanted	plugged/ultisnips/test/test_Completion.py	/^    wanted = COMPLETION_OPTIONS + "foo completion1"$/;"	v	class:Completion_BackwardsJumpWithoutCOMPL_ACCEPT
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "(2, 1)"$/;"	v	class:ContextSnippets_CursorIsZeroBased
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "1 1"$/;"	v	class:ContextSnippets_ContextIsClearedBeforeExpand
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "Yes No"$/;"	v	class:ContextSnippets_ContextHasAccessToVisual
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "abc"$/;"	v	class:ContextSnippets_ExpandOnTrue
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "abc"$/;"	v	class:ContextSnippets_Header_ExpandOnTrue
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "abc"$/;"	v	class:ContextSnippets_SimpleSnippet
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "adup" + EX + "\\n" + word + "[" + word + "]"$/;"	v	class:ContextSnippets_Before
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "b"$/;"	v	class:ContextSnippets_PriorityKeyword
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "e" + EX$/;"	v	class:ContextSnippets_ReportError
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "e" + EX$/;"	v	class:ContextSnippets_ReportErrorOnIndexOutOfRange
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = "{ < a > }"$/;"	v	class:ContextSnippets_UseContext
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = keys$/;"	v	class:ContextSnippets_DoNotExpandOnFalse
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = keys$/;"	v	class:ContextSnippets_Header_DoNotExpandOnFalse
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = negative + EX + "HERE"$/;"	v	class:ContextSnippets_ContextHasAccessToReMatch
wanted	plugged/ultisnips/test/test_ContextSnippets.py	/^    wanted = r"""$/;"	v	class:ContextSnippets_SnippetPriority
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = """\\$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove2
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = ""$/;"	v	class:Undo_CompletelyUndoSnippet
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "AA BBB"$/;"	v	class:Backspace_TabStop_NotZero
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "AA BBB"$/;"	v	class:Backspace_TabStop_Zero
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "a b c\\na\\nb\\nc\\n\\nshallnot"$/;"	v	class:JumpForward_DefSnippet
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "aaaaa()3333"$/;"	v	class:UpdateModifiedSnippetWithoutCursorMove1
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "end"$/;"	v	class:DeleteCurrentTabStop1_JumpBack
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "first line\\n\\n\\ntest\\n\\n\\nthird line"$/;"	v	class:Undo_RemoveWholeSnippet
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "hello upsi Hello\\naaa upsi bbb\\nWorld"$/;"	v	class:Undo_RemoveEditInTabstop
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "hello"$/;"	v	class:DeleteLastTwoLinesInSnippet
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "hello\\nend"$/;"	v	class:DeleteCurrentTabStop2_JumpBack
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "hello\\nendworld"$/;"	v	class:DeleteCurrentTabStop3_JumpAround
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "if :\\n\\t"$/;"	v	class:Undo_ChangesInPlaceholder
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "if a: test"$/;"	v	class:DoNotCrashOnUndoAndJumpInNestedSnippet
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "if:\\n\\t"$/;"	v	class:Undo_RemoveOneSnippetByTime2
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "if:\\n\\ti"$/;"	v	class:Undo_RemoveOneSnippetByTime
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "test"$/;"	v	class:DeleteSnippetInsertion1
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "test"$/;"	v	class:Undo_RemoveMultilineSnippet
wanted	plugged/ultisnips/test/test_Editing.py	/^    wanted = "world"$/;"	v	class:DeleteSnippetInsertion0
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "Hallo Welt!"$/;"	v	class:SimpleExpandExpandOrJump_Expand
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "Hallo Welt!"$/;"	v	class:SimpleExpandJumpOrExpand_Expand
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "Hallo Welt!"$/;"	v	class:SimpleExpand_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "Hallo Welt!\\nHallo We"$/;"	v	class:SimpleExpandNewLineAndBackspae_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "Hallo Welt!\\nHallo Welt!"$/;"	v	class:SimpleExpandTwice_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "Hallo Welt!and again"$/;"	v	class:SimpleExpandTypeAfterExpand_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "Hallo Welt\\n\\nAnd more"$/;"	v	class:SimpleExpandEndingWithNewline_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "Hallo \\n"$/;"	v	class:SimpleExpand_DoNotClobberDefaultRegister
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "SimpleText" + EX$/;"	v	class:ExitSnippetModeAfterTabstopZero
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "Wie Hallo Welt! gehts"$/;"	v	class:ExpandInTheMiddleOfLine_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "Wie Hallo Welt!\\nUnd Wie gehts gehts"$/;"	v	class:MultilineExpand_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "Wie Hallo Welt!\\nUnd Wie gehtsHuiui! gehts"$/;"	v	class:MultilineExpandTestTyping_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "hallo " + EX$/;"	v	class:DoNotExpandAfterSpace_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "na du Hallo Welt!and blub"$/;"	v	class:SimpleExpandTypeAndDelete_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "test foofoo"$/;"	v	class:SimpleExpandJumpOrExpand_Ambiguity
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = "testfoo foo foo"$/;"	v	class:SimpleExpandExpandOrJump_Ambiguity
wanted	plugged/ultisnips/test/test_Expand.py	/^    wanted = r"\\Safe\\foo"$/;"	v	class:SimpleExpand_Issue1343
wanted	plugged/ultisnips/test/test_Fixes.py	/^    wanted = "  world hello;blub"$/;"	v	class:Bug1251994
wanted	plugged/ultisnips/test/test_Fixes.py	/^    wanted = "\\nblah\\nhello world "$/;"	v	class:RetainsTheUnnamedRegister_ButOnlyOnce
wanted	plugged/ultisnips/test/test_Fixes.py	/^    wanted = "\\t\\t\\tpadding: 2px"$/;"	v	class:VirtualEdit
wanted	plugged/ultisnips/test/test_Fixes.py	/^    wanted = "\\tfoo"$/;"	v	class:ShiftWidthZero
wanted	plugged/ultisnips/test/test_Fixes.py	/^    wanted = "foobar \\x00Expand me!"$/;"	v	class:NullByte_ExpandAfter
wanted	plugged/ultisnips/test/test_Fixes.py	/^    wanted = "foobar\\x00\\n"$/;"	v	class:NullByte_ListSnippets
wanted	plugged/ultisnips/test/test_Fixes.py	/^    wanted = "hello"$/;"	v	class:NonUnicodeDataInUnnamedRegister
wanted	plugged/ultisnips/test/test_Fixes.py	/^    wanted = "tex" + EX + "more\\nExpand me!"$/;"	v	class:PassThroughNonexecutedTrigger
wanted	plugged/ultisnips/test/test_Fixes.py	/^    wanted = "yank HELLO world yank"$/;"	v	class:RetainsTheUnnamedRegister
wanted	plugged/ultisnips/test/test_Folding.py	/^    wanted = """Hello {{{$/;"	v	class:FoldingEnabled_SnippetWithFold_ExpectNoFolding
wanted	plugged/ultisnips/test/test_Folding.py	/^    wanted = "# hi  {{{\\n\\n# End: hi  }}}"$/;"	v	class:FoldOverwrite_Simple_ECR
wanted	plugged/ultisnips/test/test_Folding.py	/^    wanted = "# hi  {{{\\n\\n# End: hi  }}}"$/;"	v	class:Fold_DeleteMiddleLine_ECR
wanted	plugged/ultisnips/test/test_Folding.py	/^    wanted = "package c03;\\nsub junk {}\\n1;"$/;"	v	class:PerlSyntaxFold
wanted	plugged/ultisnips/test/test_Format.py	/^    wanted = "    for\\n        blahHui"$/;"	v	class:ProperIndenting_SimpleCase_ECR
wanted	plugged/ultisnips/test/test_Format.py	/^    wanted = "    hui\\n    blah"$/;"	v	class:ProperIndenting_AutoIndentAndNewline_ECR
wanted	plugged/ultisnips/test/test_Format.py	/^    wanted = "    huiblah"$/;"	v	class:ProperIndenting_SingleLineNoReindenting_ECR
wanted	plugged/ultisnips/test/test_Format.py	/^    wanted = "   Blaahblah \\t\\t  "$/;"	v	class:RecTabStopsWithExpandtab_SimpleExample_ECR
wanted	plugged/ultisnips/test/test_Format.py	/^    wanted = "   Something\\n        Hallo"$/;"	v	class:RecTabStopsWithExpandtab_SpecialIndentProblem_ECR
wanted	plugged/ultisnips/test/test_Format.py	/^    wanted = """BeforeThis is a$/;"	v	class:FOTextBeforeAndAfter_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Format.py	/^    wanted = """This is a longer$/;"	v	class:FOTextAfter_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Format.py	/^    wanted = """This is a$/;"	v	class:FOWrapOnLongWord_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Format.py	/^    wanted = "#include <cstdlib>"$/;"	v	class:ProperIndenting_FirstLineInFileComplete_ECR
wanted	plugged/ultisnips/test/test_Format.py	/^    wanted = "#include <foo>"$/;"	v	class:ProperIndenting_FirstLineInFile_ECR
wanted	plugged/ultisnips/test/test_Format.py	/^    wanted = ($/;"	v	class:FOSimple_Break_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "    hi 4 End"$/;"	v	class:TabStop_VimScriptInterpolation_SimpleExample
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "    start b isbigger a end"$/;"	v	class:PythonCodeOld_IndentedMultiline
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "    start b isbigger a end"$/;"	v	class:PythonCode_MultilineIndented
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """        hi World End"""$/;"	v	class:PythonCode_IndentProblem
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """    hi$/;"	v	class:PythonCode_IndentEtSwOffset
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """   hi$/;"	v	class:PythonCode_IndentEtSw
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """   hi$/;"	v	class:PythonCode_IndentNoetSwTs
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_MultiAppendShift
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_MultiAppendShiftMethods
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_MultiAppendSimpleIndent
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_ResetIndent
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """$/;"	v	class:PythonCode_SimpleMkline
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """first second (placeholder: first second (placeholder: ))$/;"	v	class:PythonVisual_HasAccessToZeroPlaceholders
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """first second (placeholder: first)$/;"	v	class:PythonVisual_HasAccessToSelectedPlaceholders
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """hi no End"""$/;"	v	class:PythonCode_OptNoExists
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """hi nothing test End"""$/;"	v	class:PythonCode_Locals
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = """hi yes End"""$/;"	v	class:PythonCode_OptExists
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "##########\\nHallo Welt"$/;"	v	class:PythonCodeOld_ReferencePlaceholderBefore
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "##########\\nHallo Welt"$/;"	v	class:PythonCode_ReferencePlaceholderBefore
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "$hi"$/;"	v	class:TabStop_Shell_TestEscapedChars_Overwrite
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "5"$/;"	v	class:Python_SnipRvCanBeNonText
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "Hallo now Hallo Welt endand more"$/;"	v	class:TabStop_Shell_ShebangPython
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "Hallo now fromecho endand more"$/;"	v	class:TabStop_Shell_InDefValue_Leave
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "Hallo overwrite endand more"$/;"	v	class:TabStop_Shell_InDefValue_Overwrite
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "OKAYhokayoOKAY"$/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteSecond
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "aaa"$/;"	v	class:PythonCode_AccessKilledTabstop_OverwriteFirst
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "bl-\\n\\tah, bah"$/;"	v	class:PythonCode_CanOverwriteTabstop
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "blah"$/;"	v	class:TabStop_Shell_TestEscapedCharsAndShellVars_Overwrite
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "egal Hallo End"$/;"	v	class:PythonCodeOld_TransformedBeforeMultiLine
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "egal Hallo End"$/;"	v	class:PythonCode_TransformedBeforeMultiLine
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hVhello\\nnice\\nworld\\nb"$/;"	v	class:PythonVisual_LineSelect_Simple
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hbabc"$/;"	v	class:PythonVisual_NoVisualSelection_Ignore
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hi Hallo End"$/;"	v	class:PythonCodeOld_SimpleExample
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hi Hallo End"$/;"	v	class:PythonCode_SimpleExample
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hi Hallo1\\nHallo2 End"$/;"	v	class:PythonCode_SimpleAppend
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hi Hallo1\\nHallo2\\nHallo3 End"$/;"	v	class:PythonCode_MultiAppend
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hi New End"$/;"	v	class:PythonCode_UseNewOverOld
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hi hallo you!and more"$/;"	v	class:TabStop_Shell_SimpleExample
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hi hallo\\nWeiterand more"$/;"	v	class:TabStop_Shell_TextInNextLine
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hi höüäh you!and more"$/;"	v	class:TabStop_Shell_WithUmlauts
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hi" + 100 * "a" + "endups"$/;"	v	class:PythonCode_LongerTextThanSource_Chars
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hi" + 100 * "a" + 100 * "\\n" + 100 * "a" + "endups"$/;"	v	class:PythonCode_LongerTextThanSource_MultiLine
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hiEnd"$/;"	v	class:PythonCode_SimpleExample_ReturnValueIsEmptyString
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "ho ho.blah End"$/;"	v	class:PythonCodeOld_ReferencePlaceholderAfter
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "ho ho.blah End"$/;"	v	class:PythonCode_ReferencePlaceholder
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "hvblablubb"$/;"	v	class:PythonVisual_SelectOneWord
wanted	plugged/ultisnips/test/test_Interpolation.py	/^    wanted = "ups egal hi hi"$/;"	v	class:PythonCode_TrickyReferences
wanted	plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = " BLAAH"$/;"	v	class:ListAllAvailable_SpaceInFront_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = "BLAAH"$/;"	v	class:ListAllAvailable_NothingTyped_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = "hallo BLAAH"$/;"	v	class:ListAllAvailable_testtyped_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = "hallo TEST ONE"$/;"	v	class:ListAllAvailable_testtypedSecondOpt_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = "hallo qualleHi"$/;"	v	class:ListAllAvailable_NonDefined_NoExpectionShouldBeRaised
wanted	plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = "hallo test" + LS + "2\\n"$/;"	v	class:ListAllAvailable_Disabled_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_ListSnippets.py	/^    wanted = "} BLAAH"$/;"	v	class:ListAllAvailable_BraceInFront_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "    hallo\\nhallo\\nahallob\\nhallo\\ntest hallo mich"$/;"	v	class:SimpleMirrorMultilineMany_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = """for(size_t a_variable = 0; a_variable < 100; a_variable *= 2)$/;"	v	class:MirrorRealLifeExample_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ObenVorne hallo welt ObenHinten\\nVorne hallo welt Hinten"$/;"	v	class:TextTabStopAllSurrounded_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "Vorne hallo test Hinten\\nhallo test"$/;"	v	class:TextTabStopTextSurroundedTab_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "Vorne hallo\\nhallo"$/;"	v	class:TextTabStopTextBeforeTab_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "a a a"$/;"	v	class:MirrorBeforeTabstopOverwrite_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha blah hi hulla end hu hi hub hulla"$/;"	v	class:TabstopWithMirrorManyFromAll_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha blub blub"$/;"	v	class:TabstopWithMirrorInDefaultNoType1_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha blub blub.h"$/;"	v	class:TabstopWithMirrorInDefaultNoType_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha defa\\ndefa"$/;"	v	class:SimpleTabstopWithDefaultSimpelKeep_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha default value default value\\nanother: default value mirror"$/;"	v	class:SimpleTabstopWithDefaultComplexKeep_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha stdin do snap stdin.h do snap"$/;"	v	class:TabstopWithMirrorInDefaultMultipleOverwrite_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha stdin overwritten"$/;"	v	class:TabstopWithMirrorInDefaultOverwrite1_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha stdin overwritten"$/;"	v	class:TabstopWithMirrorInDefaultOverwrite_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha stdin snip stdin.h snip"$/;"	v	class:TabstopWithMirrorInDefaultMultipleLeave_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha stdin stdin.h stdin.c\\ntest stdin"$/;"	v	class:TabstopWithMirrorInDefaultTwiceAndExtra_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha stdin stdinend"$/;"	v	class:TabstopWithMirrorInDefaultNoOverwrite1_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha world world\\nanother: world mirror"$/;"	v	class:SimpleTabstopWithDefaultComplexType_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ha world\\nworld"$/;"	v	class:SimpleTabstopWithDefaultSimpelType_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hal\\nhal"$/;"	v	class:SimpleMirrorDelete_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "halhups\\nhalhups"$/;"	v	class:SimpleMirrorDeleteSomeEnterSome_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo Du\\nAch Blah\\nhallo Du\\nAch Blah\\nhallo Du\\nAch Blah"$/;"	v	class:MultilineTabStopSimpleMirrorDeleteInLine_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo Du\\nHi\\n\\nhallo Du\\nHi\\n\\nhallo Du\\nHi"$/;"	v	class:MultilineTabStopSimpleMirrorMultiline_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo Du\\nHi\\nhallo Du\\nHi\\nhallo Du\\nHi"$/;"	v	class:MultilineTabStopSimpleMirrorMultiline1_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo Hinten\\nhallo"$/;"	v	class:TextTabStopTextAfterTab_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo du hallo du hallo du hallo du"$/;"	v	class:SimpleMirrorSameLineMany_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo foo hallo foo"$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_DelB4Typing_ECR
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo foo hallo foo"$/;"	v	class:SimpleMirrorSameLineBeforeTabDefVal_ECR
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo hallo"$/;"	v	class:SimpleMirrorSameLine_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo noauch ahiuch_end"$/;"	v	class:Mirror_TestKill_InsertBeginning_Kill
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo noauch auchih_end"$/;"	v	class:Mirror_TestKill_InsertEnd_Kill
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo noauch hinoauch_end"$/;"	v	class:Mirror_TestKill_InsertBefore_NoKill
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo noauch noauchab_end"$/;"	v	class:Mirror_TestKill_InsertAfter_NoKill
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo welt\\nVorne hallo welt Hinten"$/;"	v	class:TextTabStopSurroundMirror_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo weltelt "$/;"	v	class:Mirror_TestKillTabstop_Kill
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo\\nVorne hallo"$/;"	v	class:TextTabStopTextBeforeMirror_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo\\nagain\\nhallo\\nagain"$/;"	v	class:TextTabStopSimpleMirrorMultilineMirrorInFront_ECR
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo\\nhallo Hinten"$/;"	v	class:TextTabStopAfterMirror_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallo\\nhallo"$/;"	v	class:TextTabStopSimpleMirrorMultiline_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallohallo "$/;"	v	class:SimpleMirrorSameLineNoSpaceInsideOtherSpaceAfter_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallohallo "$/;"	v	class:SimpleMirrorSameLineNoSpaceSpaceAfter_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallohallo"$/;"	v	class:SimpleMirrorSameLineNoSpaceInsideOther_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "hallohallo"$/;"	v	class:SimpleMirrorSameLineNoSpace_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "this is it this is it this is it"$/;"	v	class:MirrorBeforeTabstopLeave_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = "ups hallo hallo blah"$/;"	v	class:SimpleMirrorSameLine_InText_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Mirror.py	/^    wanted = ($/;"	v	class:SimpleMirrorSameLineManyMultiline_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Movement.py	/^    wanted = "<tr>\\n\\t<th>blah<\/th>\\n<\/tr>\\nend"$/;"	v	class:CursorMovement_BS_InEditMode
wanted	plugged/ultisnips/test/test_Movement.py	/^    wanted = "hello tab blub tab " + JF + "hallothis"$/;"	v	class:IMMoving_ExitWhenOutsideRight_ECR
wanted	plugged/ultisnips/test/test_Movement.py	/^    wanted = "hello tab hallo tab this"$/;"	v	class:IMMoving_NoExitingEventAtEnd_ECR
wanted	plugged/ultisnips/test/test_Movement.py	/^    wanted = "hello tab hallo tab this"$/;"	v	class:IMMoving_NoExiting_ECR
wanted	plugged/ultisnips/test/test_Movement.py	/^    wanted = "hello tab hallo this"$/;"	v	class:IMMoving_NotExitingWhenBarelyOutsideLeft_ECR
wanted	plugged/ultisnips/test/test_Movement.py	/^    wanted = "hello tab\\nblub this\\n" + JF + "testhallo"$/;"	v	class:IMMoving_ExitWhenOutsideBelow_ECR
wanted	plugged/ultisnips/test/test_Movement.py	/^    wanted = "hello" + JF + "hallo tab blub this"$/;"	v	class:IMMoving_ExitWhenOutsideLeft_ECR
wanted	plugged/ultisnips/test/test_Movement.py	/^    wanted = "text"$/;"	v	class:IMMoving_CursorsKeys_ECR
wanted	plugged/ultisnips/test/test_Movement.py	/^    wanted = "thhallo\\nweltis thhallo\\nweltis"$/;"	v	class:IMMoving_AcceptInputWhenMoved_ECR
wanted	plugged/ultisnips/test/test_Movement.py	/^    wanted = ($/;"	v	class:CursorMovement_Multiline_ECR
wanted	plugged/ultisnips/test/test_Movement.py	/^    wanted = JF + "hallo\\nhello tab\\nblub this"$/;"	v	class:IMMoving_ExitWhenOutsideAbove_ECR
wanted	plugged/ultisnips/test/test_MultipleMatches.py	/^    wanted = "Case1"$/;"	v	class:Multiple_SimpleCaseSelectFirst_ECR
wanted	plugged/ultisnips/test/test_MultipleMatches.py	/^    wanted = "Case2"$/;"	v	class:Multiple_SimpleCaseSelectSecond_ECR
wanted	plugged/ultisnips/test/test_MultipleMatches.py	/^    wanted = "Case2"$/;"	v	class:Multiple_SimpleCaseSelectTooHigh_ESelectLast
wanted	plugged/ultisnips/test/test_MultipleMatches.py	/^    wanted = "testhi"$/;"	v	class:Multiple_ManySnippetsOneTrigger_ECR
wanted	plugged/ultisnips/test/test_MultipleMatches.py	/^    wanted = "testhi"$/;"	v	class:Multiple_SimpleCaseEscapeOut_ECR
wanted	plugged/ultisnips/test/test_MultipleMatches.py	/^    wanted = "testhi"$/;"	v	class:Multiple_SimpleCaseSelectZero_EEscape
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "This is a test snippet!"$/;"	v	class:ParseSnippets_SimpleSnippet
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "This is a test."$/;"	v	class:ParseSnippets_MultiWord_Quotes
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "This is a test."$/;"	v	class:ParseSnippets_MultiWord_Simple
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "This is a test."$/;"	v	class:ParseSnippets_MultiWord_WithQuotes
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "This is another test."$/;"	v	class:ParseSnippets_MultiWord_Description
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "This is yet another test."$/;"	v	class:ParseSnippets_MultiWord_Description_Option
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "abc az test"$/;"	v	class:ParseSnippets_MultiWord_RE1
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "foo-bar test bar\\t\\nfoo-bar test"$/;"	v	class:ParseSnippets_MultiWord_RE2
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "re-test"$/;"	v	class:ParseSnippets_MultiWord_RE3
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "testsnip" + EX$/;"	v	class:ParseSnippets_ClearAll
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "testsnip" + EX$/;"	v	class:ParseSnippets_ExtendsWithoutFiletype
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "testsnip" + EX$/;"	v	class:ParseSnippets_InvalidPriorityLine
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "testsnip" + EX$/;"	v	class:ParseSnippets_InvalidPriorityLine1
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "testsnip" + EX$/;"	v	class:ParseSnippets_MissingEndSnippet
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "testsnip" + EX$/;"	v	class:ParseSnippets_UnknownDirective
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "toclear" + EX + "\\n" + "This is a test."$/;"	v	class:ParseSnippets_ClearOne
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "toclear" + EX + "\\n" + "testsnip" + EX$/;"	v	class:ParseSnippets_ClearTwo
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "x a bob b y\\nx a jon b y"$/;"	v	class:ParseSnippets_Global_Python
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "x a bob b y\\nx a jon b y"$/;"	v	class:ParseSnippets_Global_Python_After
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = "x first a bob b y"$/;"	v	class:ParseSnippets_Global_Local_Python
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_MultiWord_NoContainer
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_MultiWord_UnmatchedContainer
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippet
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippetContext
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippetLocation
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippetPostAction
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintErroneousSnippetPreAction
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintPythonStacktrace
wanted	plugged/ultisnips/test/test_ParseSnippets.py	/^    wanted = keys$/;"	v	class:ParseSnippets_PrintPythonStacktraceMultiline
wanted	plugged/ultisnips/test/test_Plugin.py	/^    wanted = "longtextlongtext\\nlongtextlongtext\\nHello"$/;"	v	class:Plugin_SuperTab_SimpleTest
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "A A AB B C CD D DE E B hi"$/;"	v	class:RecTabStops_ExpandedInZeroTSSecondTime_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "A A C CD D DE E B again B hi"$/;"	v	class:RecTabStops_ExpandedInZeroTSTwice_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "A C CD D DE E B hi"$/;"	v	class:RecTabStops_ExpandedInZeroTS_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "A C CD D DE E B"$/;"	v	class:RecTabStops_OuterOnlyWithZeroTS_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "A C CD D DE E B"$/;"	v	class:RecTabStops_OuterOnlyWithZero_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "M START\\n    M START\\n        hi\\n    M END -> hallo\\n" "M END -> end"$/;"	v	class:RecTabStops_InNewlineMultilineWithNonZeroTS_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "M START\\n    M START\\n        hi\\n    M END\\nM END"$/;"	v	class:RecTabStops_InNewlineMultilineWithIndent_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "M START\\n    M START\\n    hi\\n    M END\\nM END"$/;"	v	class:RecTabStops_InNewlineManualIndent_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "M START\\n    hallo M START\\n    hi\\n    M END\\nM END"$/;"	v	class:RecTabStops_InNewlineManualIndentTextInFront_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "M START\\nM START\\n\\nM END\\nM END"$/;"	v	class:RecTabStops_InNewlineMultiline_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ ASnip Hallo ASnip Hi ASnipendone two ] ASnip Hallo ASnip Hi ASnipendonetotalend"$/;"	v	class:RecTabStops_MirrorInnerSnippet_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ JST  JSThi ]end"$/;"	v	class:RecTabStops_InnerWOTabStopTwice_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ JST JSThi  two ]end"$/;"	v	class:RecTabStops_InnerWOTabStopTwiceDirectly_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ Just some Texthi  two ]end"$/;"	v	class:RecTabStops_InnerWOTabStop_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ [ [ a sec ] hallo ]ups world ]end"$/;"	v	class:RecTabStops_LeavingInnerInner_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ [ [ a sec ] sec ] hallo ]end"$/;"	v	class:RecTabStops_LeavingInnerInnerTwo_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ [ a hallo ]ups world ]end"$/;"	v	class:RecTabStops_BarelyNotLeavingInner_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ [ a sec ] hallo ]world"$/;"	v	class:RecTabStops_LeavingInner_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ [ hello  sec ]  world ]end"$/;"	v	class:RecTabStops_SimpleCaseLeaveFirstSecond_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ [ hello  world ]  sec ]end"$/;"	v	class:RecTabStops_SimpleCaseLeaveSecondSecond_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ [ hello  world ]ups  end ]"$/;"	v	class:RecTabStops_SimpleCase_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ [ one three three two ] four ]end"$/;"	v	class:RecTabStops_MirroredZeroTS_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ [ one three two ] four ]end"$/;"	v	class:RecTabStops_ZeroTSisNothingSpecial_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ hello [ hi  two ]ups  three ]end"$/;"	v	class:RecTabStops_NotAtBeginningOfTS_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ hello\\n[ hi  two ]ups  three ]end"$/;"	v	class:RecTabStops_InNewlineInTabstop_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = "[ hello\\nhello again [ hi  two ]ups  three ]end"$/;"	v	class:RecTabStops_InNewlineInTabstopNotAtBeginOfLine_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = ($/;"	v	class:RecTabStops_ChildTriggerContainsParentTextObjects
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = r"\\vec{\\frac{a}\\frac{aa}cc{two}{b}}hello \\frac{one}world{two}"$/;"	v	class:RecTabsStops_TypeInZero_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = r"_hello _world _end"$/;"	v	class:RecTabsStops_TypeInZero2_ECR
wanted	plugged/ultisnips/test/test_Recursive.py	/^    wanted = r"oneoneexplicit zerotwotwo"$/;"	v	class:RecTabsStops_BackspaceZero_ECR
wanted	plugged/ultisnips/test/test_Selection.py	/^    wanted = """for ($k = 0; $k < count; $k++) {$/;"	v	class:ExclusiveSelection_RealWorldCase_Test
wanted	plugged/ultisnips/test/test_Selection.py	/^    wanted = """for ($k = 0; $k < count; $k++) {$/;"	v	class:OldSelection_RealWorldCase_Test
wanted	plugged/ultisnips/test/test_Selection.py	/^    wanted = "Hello"$/;"	v	class:SelectModeMappings_BufferLocalMappings_ECR
wanted	plugged/ultisnips/test/test_Selection.py	/^    wanted = "Hello"$/;"	v	class:SelectModeMappings_IgnoreMappings_ECR
wanted	plugged/ultisnips/test/test_Selection.py	/^    wanted = "Hello"$/;"	v	class:SelectModeMappings_RemoveBeforeSelecting_ECR
wanted	plugged/ultisnips/test/test_Selection.py	/^    wanted = "Hello"$/;"	v	class:_SelectModeMappings
wanted	plugged/ultisnips/test/test_Selection.py	/^    wanted = "huiw ui"$/;"	v	class:ExclusiveSelection_SimpleTabstop_Test
wanted	plugged/ultisnips/test/test_Selection.py	/^    wanted = "huiw ui"$/;"	v	class:OldSelection_SimpleTabstop_Test
wanted	plugged/ultisnips/test/test_Selection.py	/^    wanted = "xello"$/;"	v	class:SelectModeMappings_DisableRemoveBeforeSelecting_ECR
wanted	plugged/ultisnips/test/test_Selection.py	/^    wanted = "xello"$/;"	v	class:SelectModeMappings_IgnoreMappings1_ECR
wanted	plugged/ultisnips/test/test_Selection.py	/^    wanted = "xello"$/;"	v	class:SelectModeMappings_IgnoreMappings2_ECR
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = """<option value="some">not<\/option>ende"""$/;"	v	class:snipMate_TestMirrorsInPlaceholders_Overwrite
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = """<option value="some">some<\/option>ende"""$/;"	v	class:snipMate_TestMirrorsInPlaceholders
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = """\/*$/;"	v	class:snipMate_Issue658
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "This is a stand alone snippet\\nThis is two stand alone snippet\\nThree"$/;"	v	class:snipMate_SimpleSnippetInSnippetFile
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "This is a test snippet"$/;"	v	class:snipMate_SimpleSnippetSubDirectory
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "This is a test snippet\\n# With a comment"$/;"	v	class:snipMate_SimpleSnippet
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "blah"$/;"	v	class:snipMate_Extends
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "blub is blah"$/;"	v	class:snipMate_TestNoBraceTabstops
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "blub is blub, blah is blah"$/;"	v	class:snipMate_TestNoBraceTabstopsAndMirrors
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "blub\\n\\nblah\\n"$/;"	v	class:snipMate_EmptyLinesContinueSnippets
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "for (j; j < blub; blub++) {\\n\\thi\\n}"$/;"	v	class:snipMate_TestMirrors
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "h$${2:blub}$$hi"$/;"	v	class:snipMate_NoNestedTabstops
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "hblablubb"$/;"	v	class:snipMate_Visual_Simple
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "hello" + EX + "\\nworked"$/;"	v	class:snipMate_OtherFiletype
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "hello" + EX$/;"	v	class:snipMate_Disabled
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "lac03lu"$/;"	v	class:snipMate_Interpolation
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "laöäülu"$/;"	v	class:snipMate_InterpolationWithSystem
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "os.\\tfoo\\nself."$/;"	v	class:snipMate_Issue1344
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "two"$/;"	v	class:snipMate_MultiMatches
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = "ultisnips"$/;"	v	class:snipMate_OverwrittenByRegExpTrigger
wanted	plugged/ultisnips/test/test_SnipMate.py	/^    wanted = r"$\\frac{num}{denom} blub"$/;"	v	class:snipMate_Issue1325
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """$/;"	v	class:SnippetActions_CanModifyParentBody
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """$/;"	v	class:SnippetActions_EnsureIndent
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """$/;"	v	class:SnippetActions_MoveVisual
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """$/;"	v	class:SnippetActions_PostActionCanUseSnippetRange
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """1 {$/;"	v	class:SnippetActions_UseCorrectJumpActions
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """1, 2"""$/;"	v	class:SnippetActions_CanVisuallySelectFirstPlaceholderInAnonSnippetInPre
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """debug(test(some(complex(cond(a)))))$/;"	v	class:SnippetActions_CanMirrorTabStopsOutsideOfSnippet
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """if not blah: pass"""$/;"	v	class:SnippetActions_CanExpandSnippetInDifferentPlace
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """if some_check(1, 2, 3) or 4: 5"""$/;"	v	class:SnippetActions_CanExpandAnonSnippetOnFirstJump
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """if x:$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpAction
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """if x:$/;"	v	class:SnippetActions_CanExpandAnonSnippetInJumpActionWhileSelected
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """import smthing$/;"	v	class:SnippetActions_MoveParentSnippetFromChildInPreAction
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """some context$/;"	v	class:SnippetActions_CanUseContextFromContextMatch
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """some_wrapper(wrapme(2, 1)3): 4"""$/;"	v	class:SnippetActions_CanEvenWrapSnippetInPreAction
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = """totally_different(2, 1)3"""$/;"	v	class:SnippetActions_CanExpandAnonOnPreExpand
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = "1: 1\\n2"$/;"	v	class:SnippetActions_PostActionModifiesLineAfterSnippet
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = "[(1)2"$/;"	v	class:SnippetActions_PostActionModifiesCharAfterSnippet
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = "\\nabc"$/;"	v	class:SnippetActions_PreActionModifiesBuffer
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = "abc\\n"$/;"	v	class:SnippetActions_PostActionModifiesBuffer
wanted	plugged/ultisnips/test/test_SnippetActions.py	/^    wanted = "def123"$/;"	v	class:SnippetActions_DoNotBreakCursorOnSingleLikeChange
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "   Expand me!"$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand2
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "   Expand me!"$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand2
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "  Expand me!"$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "  Expand me!"$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWOChoose
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "  \\t\\tExpand\\tme!\\t"$/;"	v	class:No_Tab_Expand_ET_Leading_Spaces
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "  \\t\\tExpand\\tme!\\t"$/;"	v	class:No_Tab_Expand_Leading_Spaces
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = " .a" + EX$/;"	v	class:SnippetOptions_Regex_Self_TextAfter
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = " self."$/;"	v	class:SnippetOptions_Regex_Self_Space
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = """\\t\\thi$/;"	v	class:No_Tab_Expand_RealWorld
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "$Expand me!"$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "-Expand me!"$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand2
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "Expand me!"$/;"	v	class:MultiWordSnippet_Simple
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "Expand me!"$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_ExpandSingle
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "Expand me!"$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_NormalExpand
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "Expand me!"$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_Expand
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "Expand me!"$/;"	v	class:SnippetOptions_ExpandInwordSnippets_ExpandSingle
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "Expand me!"$/;"	v	class:SnippetOptions_ExpandWordSnippets_NormalExpand
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "Expand me!"$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_Expand
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "Expand me!"$/;"	v	class:SnippetOptions_Regex_Expand
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "Expand me!"$/;"	v	class:SnippetOptions_Regex_Multiple
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "Expand me!"$/;"	v	class:SnippetOptions_Regex_SameLine_Long_End
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "Expand me!"$/;"	v	class:SnippetOptions_Regex_SameLine_Long_Start
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "Expand me!"$/;"	v	class:SnippetOptions_Regex_WithSpace
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "[[Expand me!"$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix3
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "\\t\\tExpand\\tme!\\t"$/;"	v	class:No_Tab_Expand_ET
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "\\t\\tExpand\\tme!\\t"$/;"	v	class:No_Tab_Expand_ET_SW
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "\\t\\tExpand\\tme!\\t"$/;"	v	class:No_Tab_Expand_ET_SW_TS
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "\\t\\tExpand\\tme!\\t"$/;"	v	class:No_Tab_Expand_No_TS
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "\\t\\tExpand\\tme!\\t"$/;"	v	class:No_Tab_Expand_Simple
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "\\t\\t\\tExpand\\tme!\\t"$/;"	v	class:No_Tab_Expand_Leading_Tabs
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "a not at beginning"$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "a not at beginning"$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_OneWithOneWO
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "a test it" + EX$/;"	v	class:MultiWord_SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "a test" + EX$/;"	v	class:SnippetOptions_OnlyExpandWhenWSInFront_DontExpand
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "a(Expand me!"$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix2
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "a-Expand me!"$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_ExpandSuffix
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "a-Expand me!"$/;"	v	class:SnippetOptions_ExpandWordSnippets_ExpandSuffix
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "a." + EX$/;"	v	class:SnippetOptions_Regex_Self_TextBefore
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "aExpand me!"$/;"	v	class:MultiWord_SnippetOptions_ExpandInwordSnippets_SimpleExpand
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "aExpand me!"$/;"	v	class:SnippetOptions_ExpandInwordSnippets_SimpleExpand
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "abc test Expand me!"$/;"	v	class:SnippetOptions_Regex_SameLine_Simple
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "atest it" + EX$/;"	v	class:MultiWord_SnippetOptions_ExpandWordSnippets_NoExpand
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "atest" + EX$/;"	v	class:SnippetOptions_ExpandWordSnippets_NoExpand
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "self."$/;"	v	class:SnippetOptions_Regex_Self_Start
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "test No match"$/;"	v	class:SnippetOptions_Regex_PythonBlockNoMatch
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "test fedcab"$/;"	v	class:SnippetOptions_Regex_PythonBlockMatch
wanted	plugged/ultisnips/test/test_SnippetOptions.py	/^    wanted = "ßßExpand me!"$/;"	v	class:SnippetOptions_ExpandInwordSnippetsWithOtherChars_Expand3
wanted	plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = "Hallo"$/;"	v	class:SnippetPriorities_DoNotCareAboutNonMatchings
wanted	plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = "Should only expand in p.\\ntest" + EX$/;"	v	class:SnippetPriorities_ClearedByChild
wanted	plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = "This is a test snippet"$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded
wanted	plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = "This is a test snippet"$/;"	v	class:SnippetPriorities_FileHasHigherThanAdded_neg_prio
wanted	plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = "We overwrite"$/;"	v	class:SnippetPriorities_AddedHasHigherThanFile
wanted	plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = "We overwrite"$/;"	v	class:SnippetPriorities_MultiWordTriggerOverwriteExisting
wanted	plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = "We overwrite"$/;"	v	class:SnippetPriorities_OverwriteExisting
wanted	plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = "We overwrite\\nNo overwrite"$/;"	v	class:SnippetPriorities_OverwriteThenChoose_ECR
wanted	plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = "again"$/;"	v	class:SnippetPriorities_OverwriteTwice_ECR
wanted	plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = "test" + EX$/;"	v	class:SnippetPriorities_ClearedByParent
wanted	plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = "test" + EX$/;"	v	class:SnippetPriorities_SimpleClear
wanted	plugged/ultisnips/test/test_SnippetPriorities.py	/^    wanted = "test" + EX$/;"	v	class:SnippetPriorities_SimpleClear2
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<div allaway>\\n  Third Last\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBackTwice
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<div blah>\\n  Hallo\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirst_NoJumpBack
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<div id="no">\\n  End\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecond
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<div id="some_id">\\n  \\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteNone_ECR
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<div id="yes">\\n  Begin Hi\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteSecondTabBack
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<div>\\n  Hallo\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_DeleteFirst
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = """<divSomethingElse>\\n  Nupl  Nox\\n<\/div>"""$/;"	v	class:TabStop_TSInDefaultTextRLExample_OverwriteFirstJumpBack
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = """halongertextblEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward1
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = """haoverwriteblEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackAndForward0
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = """haupsblEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecond
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = """hoverwritelEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteSecondJumpBackOverwrite
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = """hupslEnd"""$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthNested_OverwriteFirst
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "${1:literal}"$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfDefinitionText
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "'Hallo': 'Hallo' Hallo"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirstSwitchNumbers
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "'Hallo': 'Hallo' Hallo"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond1
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = ":latex:`Hello`World"$/;"	v	class:TabStopSimpleReplaceZeroLengthTabstops_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "Hallo haselnhipsut upsend"$/;"	v	class:TabStopNavigatingInInsertModeSimple_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "Hallo: Hallo "$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite1
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "Test: blub\\nTrailing texthello"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop_Override
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "Test: snippet start\\nNested tabstop: hello\\nsnippet end\\nTrailing text"$/;"	v	class:TabStop_TSInDefaultText_ZeroLengthZerothTabstop
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "This \\\\ is a backslash!"$/;"	v	class:TabStop_EscapingChars_Backslash
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "[ HelloWorld ] Hello"$/;"	v	class:TabStop_AdjacentTabStopAddText_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "\\n${1:literal}"$/;"	v	class:TabStop_EscapingCharsDollars_BeginningOfLine
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "a${1:literal}"$/;"	v	class:TabStop_EscapingCharsDollars1
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "each_byte { |byte| Blah }"$/;"	v	class:TabStopTestJumpingRLExampleWithZeroTab_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "echo Hallo"$/;"	v	class:TabStopNoReplace_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hallo Blah Lets replace it again" + JB * 2 + JF$/;"	v	class:TabStopTestBackwardJumping2_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hallo Blah mitteLets replace it again" + JB * 2 + JF$/;"	v	class:TabStopTestBackwardJumping_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hallo Du Nase na"$/;"	v	class:TabStopSimpleReplace_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hallo Hi" + 2 * JF + "du Test"$/;"	v	class:TabStopTestJumpingDontJumpToEndIfThereIsTabZero_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hallo Nase a small feed"$/;"	v	class:TabStopSimpleReplaceSurrounded1_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hallo Nase a small feed"$/;"	v	class:TabStopSimpleReplaceSurrounded_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hallo Test Hi"$/;"	v	class:TabStopTestJumping2_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hallo Test mitte BeginningHi"$/;"	v	class:TabStopTestJumping_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hallo na Du Nase"$/;"	v	class:TabStopSimpleReplaceReversed_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hi  Nothing  Nothing world"$/;"	v	class:TabStop_Multiline_DelFirstOverwriteSecond_Overwrite
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hi Blah Ende"$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpAround
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hi Hallo "$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_Overwrite0
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hi Nothing Nothing world"$/;"	v	class:TabStop_Multiline_MirrorInFront_Overwrite
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hi Nothing world"$/;"	v	class:TabStop_Multiline_Overwrite
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hi first line\\nsecond line first line\\nsecond line world"$/;"	v	class:TabStop_Multiline_MirrorInFront_Leave
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hi first line\\nsecond line world"$/;"	v	class:TabStop_Multiline_Leave
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hi this Hallo Ende"$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpBackToOther
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hi this Hallo Hallo"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hi this second Hallo Ende"$/;"	v	class:TabStop_TSInDefaultNested_OverwriteOneJumpToThird
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hi this second second"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_DoNothing
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hisnip "$/;"	v	class:TabStopEscapingWhenSelectedNoCharTS_ECR
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hisnip default"$/;"	v	class:TabStopEscapingWhenSelected_ECR
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "hisnip i"$/;"	v	class:TabStopEscapingWhenSelectedSingleCharTS_ECR
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "ia(1, 2) after: 3"$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippet
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "ia(1, 2) after: 3"$/;"	v	class:TabStop_KeepCorrectJumpListOnOverwriteOfPartOfSnippetRE
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "nothing ship hups"$/;"	v	class:TabStopWithOneChar_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "snip $0 $hi end"$/;"	v	class:TabStop_EscapingCharsDollars
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "snip ` literal"$/;"	v	class:TabStop_EscapingCharsBackticks
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "test run"$/;"	v	class:TabStop_Exit_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "tt\\nt{\\n\\tt\\n}"$/;"	v	class:TabStop_CROnlyOnSelectedNear
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "usage: `basename $0` [ -u -v -d ]"$/;"	v	class:TabStop_EscapingChars_RealLife
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "world = require('WORLD')End"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteSecond_RLExample
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = "world = require(WORLD)End"$/;"	v	class:TabStop_TSInDefault_MirrorsOutside_OverwriteFirst_RLExample
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = ($/;"	v	class:TabStopTestMultilineExpand_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = r"These are two backslashes \\\\ done"$/;"	v	class:TabStop_EscapingChars_Backslash3
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = r"This is a backslash \\ done"$/;"	v	class:TabStop_EscapingChars_Backslash2
wanted	plugged/ultisnips/test/test_TabStop.py	/^    wanted = r"\\hello{world}"$/;"	v	class:TabStop_EscapingChars_Backslash4
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "* test\\n* test\\n* test"$/;"	v	class:Transformation_OptionMultiline_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "HALLO hallo"$/;"	v	class:Transformation_CleverTransformLongLower_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "Hallo hallo"$/;"	v	class:Transformation_CleverTransformLowercaseChar_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "SomE tExt SOME TEXT \\nsome text "$/;"	v	class:Transformation_MultipleTransformations_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "TEST blah"$/;"	v	class:Transformation_OptionIgnoreCase_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "a b  c d e f ghhh h oha a b  c d e f ghhh h..."$/;"	v	class:Transformation_ConditionalInsertRWEllipsis_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "a some more text began with an a"$/;"	v	class:Transformation_ConditionalInsertionSimple_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "a some yes"$/;"	v	class:Transformation_CIBothDefinedPositive_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "a, nice,   building a, nice, building"$/;"	v	class:Transformation_OptionReplaceGlobalMatchInReplace_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "a, nice, building a-nice-building"$/;"	v	class:Transformation_OptionReplaceGlobal_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "aa yes:no)"$/;"	v	class:Transformation_ConditionalWithEscapedDelimiter
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "aa yes\\\\"$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "ab no\\\\"$/;"	v	class:Transformation_ConditionalWithBackslashBeforeDelimiter1
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "b some no"$/;"	v	class:Transformation_CIBothDefinedNegative_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "dead parrot this parrot is a bit dead"$/;"	v	class:Transformation_BackreferenceTwice_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "foo boo aoo foo bull aoo"$/;"	v	class:Transformation_Backreference_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo "$/;"	v	class:Transformation_TabIsAtEndAndDeleted_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo "$/;"	v	class:Transformation_TabIsAtEndNoTextLeave_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo .\\nhallo- >\\nhallo-> "$/;"	v	class:Transformation_ConditionalInConditional_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo HALLO"$/;"	v	class:Transformation_CleverTransformLongUpper_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo Hallo"$/;"	v	class:Transformation_CleverTransformUpercaseChar_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo batzl hallo foo"$/;"	v	class:Transformation_SimpleCaseTransformInFrontDefVal_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo batzl hallo foo"$/;"	v	class:Transformation_SimpleCaseTransformInFront_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo foo boy hallo batzl boy"$/;"	v	class:Transformation_SimpleCase_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo hallo"$/;"	v	class:Transformation_SimpleCaseNoTransform_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo is somethingb"$/;"	v	class:Transformation_TabIsAtEndNoTextType_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo is somethingmore"$/;"	v	class:Transformation_TabIsAtEndAndDeleted1_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo noAUCH ahiuchauch_end"$/;"	v	class:Transformation_TestKill_InsertBeginning_Kill
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo noAUCH auchauchih_end"$/;"	v	class:Transformation_TestKill_InsertEnd_Kill
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo noAUCH hinoauchnoauch_end"$/;"	v	class:Transformation_TestKill_InsertBefore_NoKill
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "hallo noAUCH noauchnoauchab_end"$/;"	v	class:Transformation_TestKill_InsertAfter_NoKill
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "snip  "$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValue_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "snip  m2  hi"$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInFirstTab_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "snip m1  hi "$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueInSecondTab_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "snip matched hallo"$/;"	v	class:TransformationUsingBackspaceToDeleteDefaultValueTypeSomethingThen_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "sometext defined sometext"$/;"	v	class:Transformation_InsideTabLeaveAtDefault_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "sometext overwrite"$/;"	v	class:Transformation_InsideTabOvertype_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "test, hallo test\\nhallo"$/;"	v	class:Transformation_CINewlines_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "test, hallo test\\thallo"$/;"	v	class:Transformation_CITabstop_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "test, halul test, ha(ul)"$/;"	v	class:Transformation_CIEscapedParensinReplace_ECR
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "éèàçôïÉÈÀÇÔÏ€ eeacoiEEACOIEUR"$/;"	v	class:Transformation_SimpleCaseAsciiResult
wanted	plugged/ultisnips/test/test_Transformation.py	/^    wanted = "éèàçôïÉÈÀÇÔÏ€ eeacoieeacoieur"$/;"	v	class:Transformation_LowerCaseAsciiResult
wanted	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = """my snipped hi1$/;"	v	class:TestLangmapWithUtf8_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = """my snipped hi1$/;"	v	class:TestNonEmptyLangmap_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = """my snipped hi;$/;"	v	class:TestNonEmptyLangmapWithSemi_ExpectCorrectResult
wanted	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = "abc simple expand"$/;"	v	class:AddFunc_Simple
wanted	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = "blumba" + EX + "\\n" + "this is a dynamic snippet" + "\\n" + "blumba" + EX$/;"	v	class:AddNewSnippetSource
wanted	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = "simple expand"$/;"	v	class:AddFunc_Opt
wanted	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = "te'123êabc"$/;"	v	class:VerifyVimDict3
wanted	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = "test41123'êabc0"$/;"	v	class:VerifyVimDict1
wanted	plugged/ultisnips/test/test_UltiSnipFunc.py	/^    wanted = 'te"123êabc'$/;"	v	class:VerifyVimDict2
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "\\tbhlablbub"$/;"	v	class:Visual_SelectOneWord_ProblemAfterTab
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "beg\\n\\t    hello\\n\\t    nice\\n\\t\\tworld\\nend"$/;"	v	class:Visual_LineSelect_CheckIndentTwice
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "beg\\n\\thello\\n\\tnice\\n\\tworld\\n\\tsuper\\nenddone"$/;"	v	class:Visual_LineSelect_WithTabStop
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "beg\\n\\thello\\n\\tnice\\n\\tworld\\nend"$/;"	v	class:Visual_LineSelect_CheckIndentSimple
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "beg\\n\\thello\\n\\tnice\\n\\tworld\\nend"$/;"	v	class:Visual_LineSelect_CheckIndentWithTS_NoOverwrite
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "bhlablubb"$/;"	v	class:Visual_SelectOneWord_Inword
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "bla hblub\\n  hellobi"$/;"	v	class:Visual_CrossOneLine
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hBLABLUBb"$/;"	v	class:VisualTransformationWithDefault_ExpandWithVisual
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hBLABLUBb"$/;"	v	class:VisualTransformation_SelectOneWord
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hHELLO\\n NICE\\n WORLDb"$/;"	v	class:VisualTransformation_LineSelect_Simple
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hWORLDbhi"$/;"	v	class:VisualTransformationWithDefault_ExpandWithoutVisual
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "h\/\/ bodybhi"$/;"	v	class:VisualWithDefaultWithSlashes_ExpandWithoutVisual
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hbabc"$/;"	v	class:Visual_NoVisualSelection_Ignore
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hbefHELLO\\n    NICE\\n    WORLDaftbhi"$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_NoOverwrite
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hbefhello\\n    nice\\n    worldaftbhi"$/;"	v	class:Visual_InDefaultText_LineSelect_NoOverwrite
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hbeforeaaahello\\n\\t  nice\\n\\t  worldaftbhi"$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite1
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hbeforeahello\\n\\tnice\\n\\tworldaftbhi"$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_NoOverwrite
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hblablub\\nb"$/;"	v	class:Visual_SelectOneWord_TillEndOfLine
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hblablubb"$/;"	v	class:VisualWithDefault_ExpandWithVisual
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hblablubb"$/;"	v	class:Visual_SelectOneWord
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hblablubb\\nhb"$/;"	v	class:Visual_ExpandTwice
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hblablubbblabluba"$/;"	v	class:Visual_SelectOneWord_TwiceVisual
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hblablubbhello"$/;"	v	class:Visual_InDefaultText_SelectOneWord_NoOverwrite
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hello\\n\\t hello\\n\\t nice\\n\\t world\\nendhi"$/;"	v	class:Visual_InDefaultText_IndentBeforeTabstop_NoOverwrite
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hhello\\n nice\\n worldb"$/;"	v	class:Visual_LineSelect_Simple
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hhellob"$/;"	v	class:Visual_InDefaultText_SelectOneWord
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hjupbhi"$/;"	v	class:VisualTransformation_InDefaultText_LineSelect_Overwrite
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hjupbhi"$/;"	v	class:Visual_InDefaultText_LineSelect_Overwrite
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hnblablub\\nmmmbdone"$/;"	v	class:Visual_SelectOneWordWithTabstop_TillEndOfLine
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hupsbhi"$/;"	v	class:Visual_InDefaultText_IndentSpacesToTabstop_Overwrite
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "hworldbhi"$/;"	v	class:VisualWithDefault_ExpandWithoutVisual
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "if {\\n\\tif {\\n\\t\\tone\\n\\t\\ttwo\\n\\t}\\n\\tthree\\n}"$/;"	v	class:Visual_LineSelect_DedentLine
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "xxxhyyybyxxx"$/;"	v	class:Visual_SelectOneWordExclusive
wanted	plugged/ultisnips/test/test_Visual.py	/^    wanted = "xxxhyyyybxxx"$/;"	v	class:Visual_SelectOneWordInclusive
wanted	plugged/ultisnips/test/vim_test_case.py	/^    wanted = ""$/;"	v	class:VimTestCase
warn_return_any	plugged/ultisnips/mypy.ini	/^warn_return_any = True$/;"	k	section:mypy
warn_unused_configs	plugged/ultisnips/mypy.ini	/^warn_unused_configs = True$/;"	k	section:mypy
water	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    water <- c("#A4FCE3","#72EFE9","#4FE3ED","#47DCF2","#46D7F6",$/;"	c
water	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    water <- c("#E1FCF7","#BFF2EC","#A0E8E4","#83DEDE","#68CDD4",$/;"	c
water	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    water <- c("#A4FCE3","#72EFE9","#4FE3ED","#47DCF2","#46D7F6",$/;"	c
water	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    water <- c("#E1FCF7","#BFF2EC","#A0E8E4","#83DEDE","#68CDD4",$/;"	c
when-then	plugged/splitjoin.vim/spec/plugin/ruby_spec.rb	/^  describe "when-then" do$/;"	d
whiteChars	plugged/fzf/src/algo/algo.go	/^const whiteChars = " \\t\\n\\v\\f\\r\\x85\\xA0"$/;"	c	package:algo
whiteSuffix	plugged/fzf/src/terminal.go	/^var whiteSuffix *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
whiteboard	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    whiteboard = models.CharField(max_length=100, blank=True, default='')$/;"	v	class:Bugscache
whitespace	vimrc	/^augroup whitespace$/;"	a
who	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def who(self):$/;"	m	class:BugJobMap
who	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    def who(self):$/;"	m	class:JobNote
who	plugged/vim-coiled-snake/tests/issues/test_3.py	/^    who = models.CharField(max_length=50)$/;"	v	class:Job
width	plugged/fzf/src/options.go	/^	width    sizeSpec$/;"	m	struct:fzf.tmuxOptions	typeref:typename:sizeSpec
width	plugged/fzf/src/terminal.go	/^	width     int$/;"	m	struct:fzf.itemLine	typeref:typename:int
width	plugged/fzf/src/tui/light.go	/^	width         int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
width	plugged/fzf/src/tui/light.go	/^	width    int$/;"	m	struct:tui.LightWindow	typeref:typename:int
width	plugged/fzf/src/tui/tcell.go	/^	width       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
width	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    if(is.null(width)) width <- 0L$/;"	v	function:foo
width	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    if(is.null(width)) width <- 0L$/;"	v	function:foo
win	plugged/fzf/test/test_go.rb	/^  attr_reader :win$/;"	A	class:Tmux
window	plugged/fzf/src/terminal.go	/^	window             tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
windowPosition	plugged/fzf/src/options.go	/^type windowPosition int$/;"	t	package:fzf	typeref:typename:int
wipe	plugged/fzf/src/terminal.go	/^	wipe      bool$/;"	m	struct:fzf.previewed	typeref:typename:bool
wireframe	plugged/fzf/src/terminal.go	/^	wireframe bool$/;"	m	struct:fzf.previewed	typeref:typename:bool
with	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/with_spec.rb	/^describe 'with' do$/;"	d
with backslash	plugged/splitjoin.vim/spec/plugin/sh_spec.rb	/^  describe "with backslash" do$/;"	d
withIndex	plugged/fzf/src/result_test.go	/^func withIndex(i *Item, index int) *Item {$/;"	f	package:fzf	typeref:typename:*Item
withInputPipe	plugged/fzf/src/proxy_unix.go	/^func withInputPipe(input string, task func(io.WriteCloser)) error {$/;"	f	package:fzf	typeref:typename:error
withInputPipe	plugged/fzf/src/proxy_windows.go	/^func withInputPipe(input string, task func(io.WriteCloser)) error {$/;"	f	package:fzf	typeref:typename:error
withOutputPipe	plugged/fzf/src/proxy_unix.go	/^func withOutputPipe(output string, task func(io.ReadCloser)) error {$/;"	f	package:fzf	typeref:typename:error
withOutputPipe	plugged/fzf/src/proxy_windows.go	/^func withOutputPipe(output string, task func(io.ReadCloser)) error {$/;"	f	package:fzf	typeref:typename:error
withPos	plugged/fzf/src/pattern.go	/^	withPos       bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
withPrefixLengths	plugged/fzf/src/tokenizer.go	/^func withPrefixLengths(tokens []string, begin int) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
with_file	plugged/splitjoin.vim/spec/support/vim-elixir/spec/spec_helper.rb	/^  def with_file(content = nil)$/;"	f	class:Buffer
word	plugged/completor.vim/pythonx/completers/common/__init__.py	/^word = re.compile(r'[^\\W\\d]\\w*$', re.U)$/;"	v
word	plugged/completor.vim/pythonx/completers/common/buffer.py	/^word = re.compile(r'[^\\W\\d]\\w*$', re.U)$/;"	v
word	plugged/completor.vim/pythonx/completers/javascript/tern_wrapper.js	/^        var comp = {word: completion.name, menu: completion.type};$/;"	p	class:AnonymousFunctionfb12f65a0600.comp
word	plugged/ultisnips/test/test_ContextSnippets.py	/^    word = "Süßölgefäß"$/;"	v	class:ContextSnippets_Before
wordNext	plugged/fzf/src/terminal.go	/^	wordNext           string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wordRubout	plugged/fzf/src/terminal.go	/^	wordRubout         string$/;"	m	struct:fzf.Terminal	typeref:typename:string
word_ends	plugged/completor.vim/pythonx/completers/lsp/action.py	/^word_ends = re.compile(r'[\\d\\w]+$', re.U)$/;"	v
word_pat	plugged/completor.vim/pythonx/completers/lsp/action.py	/^word_pat = re.compile(r'([\\d\\w]+)', re.U)$/;"	v
word_patten	plugged/completor.vim/pythonx/completers/cpp/__init__.py	/^word_patten = re.compile(r'\\w+$')$/;"	v
world	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/def_spec.rb	/^  def world do$/;"	f	method:handle_call.hello
wrap	plugged/completor.vim/pythonx/completor/_vim.py	/^        def wrap(*args, **kwargs):$/;"	f	function:_cached	file:
wrap	plugged/fzf/src/options.go	/^	wrap        bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
wrap	plugged/fzf/src/terminal.go	/^	wrap               bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
wrap	plugged/ultisnips/pythonx/UltiSnips/err_to_scratch_buffer.py	/^def wrap(func):$/;"	f
wrapCols	plugged/fzf/src/terminal.go	/^func (t *Terminal) wrapCols() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
wrapLine	plugged/fzf/src/tui/light.go	/^func wrapLine(input string, prefixLength int, max int, tabstop int) []wrappedLine {$/;"	f	package:tui	typeref:typename:[]wrappedLine
wrapSign	plugged/fzf/src/terminal.go	/^	wrapSign           string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wrapSignWidth	plugged/fzf/src/terminal.go	/^	wrapSignWidth      int$/;"	m	struct:fzf.Terminal	typeref:typename:int
wrapped.newsink	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! wrapped.newsink(lines)$/;"	f
wrappedLine	plugged/fzf/src/tui/light.go	/^type wrappedLine struct {$/;"	s	package:tui
wrapper	plugged/completor.vim/pythonx/completor/api.py	/^    def wrapper():$/;"	f	function:_api	file:
wrapper	plugged/completor.vim/pythonx/completor/utils.py	/^        def wrapper(*args, **kwargs):$/;"	f	function:ignore_exception.deco	file:
wrapper	plugged/ultisnips/pythonx/UltiSnips/err_to_scratch_buffer.py	/^    def wrapper(self, *args, **kwds):$/;"	f	function:wrap	file:
wrapper	plugged/validator.vim/pythonx/validator/api.py	/^    def wrapper():$/;"	f	function:_api	file:
write	plugged/completor.vim/pythonx/completers/python/python_jedi.py	/^def write(msg):$/;"	f
write_temp	plugged/ultisnips/test/vim_interface.py	/^    def write_temp(self, file_path, content):$/;"	m	class:TempFileManager
writelines	plugged/fzf/test/test_go.rb	/^  def writelines(lines)$/;"	f	class:TestBase
x	plugged/fzf/src/tui/light.go	/^	x             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/highlight_roxygen.R	/^  x <- 3$/;"	v	function:foo
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^                 x <- 0$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^              x <- 0$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^            x <- 1$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^         x <- 0$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    33$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    x <- NULL$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    x <- xx[, c("abc", "bdc", "cde", "def", "efg", "fgh", "ghi", "hij", "ijk",$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^x <- 0$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^x <- 1 * 2 * 3 *$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^x <- 1 + 2 + 3 +$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^x <- 1 - 2 - 3 -$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^x <- 1 \/ 2 \/ 3 \/$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^x <- DT[really_long_row_subsetting_variable,$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^x <- a$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^x = letters %>%$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^            x <- 1$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        x <- 0$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    33$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    x <- NULL$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    x <- xx[, c("abc", "bdc", "cde", "def", "efg", "fgh", "ghi", "hij", "ijk",$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^x <- 0$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^x <- 1 * 2 * 3 *$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^x <- 1 + 2 + 3 +$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^x <- 1 - 2 - 3 -$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^x <- 1 \/ 2 \/ 3 \/$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^x <- DT[really_long_row_subsetting_variable,$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^x <- a$/;"	g
x	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^x = letters %>%$/;"	g
x	plugged/vim-coiled-snake/tests/corner_cases/inline_list_addition.py	/^x = [$/;"	v
x	plugged/vim-coiled-snake/tests/issues/test_7.py	/^    def x(self):$/;"	m	class:XX
xoffset	plugged/fzf/src/terminal.go	/^	xoffset            int$/;"	m	struct:fzf.Terminal	typeref:typename:int
xpto	plugged/splitjoin.vim/spec/support/vim-elixir/spec/indent/tuples_spec.rb	/^  def xpto do$/;"	f
y	plugged/fzf/src/tui/light.go	/^	y             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
y	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^        y <- unclass(x); attr(y, "units") <- NULL$/;"	v	function:print.difftime
y	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    x$/;"	g
y	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^y <- x ~$/;"	g
y	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^y = x &$/;"	g
y	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^y = x |$/;"	g
y	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^        y <- unclass(x); attr(y, "units") <- NULL$/;"	v	function:print.difftime
y	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    x$/;"	g
y	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^y <- x ~$/;"	g
y	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^y = x &$/;"	g
y	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^y = x |$/;"	g
y.	plugged/vim-vinegar/plugin/vinegar.vim	/^    nnoremap <silent><buffer> y. :<C-U>call setreg(v:register, join(<SID>absolutes(line('.'), li/;"	m
yS	plugged/vim-surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
ySS	plugged/vim-surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySs	plugged/vim-surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
yaml	plugged/splitjoin.vim/spec/plugin/yaml_spec.rb	/^describe "yaml" do$/;"	d
yanked	plugged/fzf/src/terminal.go	/^	yanked             []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
yarn	plugged/completor.vim/pythonx/completers/javascript/package.json	/^    "yarn": "^1.22.13"$/;"	s	object:dependencies
yoffset	plugged/fzf/src/tui/light.go	/^	yoffset       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
ys	plugged/vim-surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
yss	plugged/vim-surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
zsh	plugged/fzf/test/test_go.rb	/^    def zsh$/;"	S	class:Shell
zshCompletion	plugged/fzf/main.go	/^var zshCompletion []byte$/;"	v	package:main	typeref:typename:[]byte
zshKeyBindings	plugged/fzf/main.go	/^var zshKeyBindings []byte$/;"	v	package:main	typeref:typename:[]byte
zz	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test.R	/^    zz <- 2*(pfit@min - fitted@min)$/;"	g
zz	plugged/splitjoin.vim/spec/support/R-Vim-runtime/tests/indent_test_noalign.R	/^    zz <- 2*(pfit@min - fitted@min)$/;"	g
{<cr>	vimrc	/^inoremap {<cr> {<cr>}<esc>O$/;"	m
~	plugged/vim-vinegar/plugin/vinegar.vim	/^  nnoremap <buffer> ~ :edit ~\/<CR>$/;"	m
✨ Inclusive support	plugged/papercolor-theme/README.md	/^# ✨ Inclusive support$/;"	c
⭐ Configure  `.vimrc`	plugged/papercolor-theme/README.md	/^## ⭐ Configure  `.vimrc`$/;"	s	chapter:🔌 Installation
🎨 Colors	plugged/papercolor-theme/README.md	/^## 🎨 Colors$/;"	s	chapter:✨ Inclusive support
👋 Author	plugged/papercolor-theme/README.md	/^# 👋 Author$/;"	c
📚 Targeted plugins for additional syntax highlighting	plugged/papercolor-theme/README.md	/^## 📚 Targeted plugins for additional syntax highlighting$/;"	s	chapter:✨ Inclusive support
📝 License	plugged/papercolor-theme/README.md	/^# 📝 License$/;"	c
📺 Screenshots	plugged/papercolor-theme/README.md	/^# 📺 Screenshots$/;"	c
🔌 Installation	plugged/papercolor-theme/README.md	/^# 🔌 Installation$/;"	c
🔮 Related projects based on PaperColor	plugged/papercolor-theme/README.md	/^## 🔮 Related projects based on PaperColor$/;"	s	chapter:🤝 Contributing
🙇 Your support is very much appreciated	plugged/papercolor-theme/README.md	/^## 🙇 Your support is very much appreciated$/;"	s	chapter:🤝 Contributing
🚀 Languages	plugged/papercolor-theme/README.md	/^## 🚀 Languages$/;"	s	chapter:✨ Inclusive support
🛠️ User Customization	plugged/papercolor-theme/README.md	/^# 🛠️ User Customization$/;"	c
🤝 Contributing	plugged/papercolor-theme/README.md	/^# 🤝 Contributing$/;"	c
